2036G "Library of Magic" "binary search, constructive algorithms, divide and conquer, interactive, math, number theory" "This is an interactive problem.
The Department of Supernatural Phenomena at the Oxenfurt Academy has opened the Library of Magic, which contains the works of the greatest sorcerers of Redania \xe2\x80\x94 n (3\xe2\x89\xa4n\xe2\x89\xa41018) types of books, numbered from 1 to n. Each book\'s type number is indicated on its spine. Moreover, each type of book is stored in the library in exactly two copies! And you have been appointed as the librarian.
One night, you wake up to a strange noise and see a creature leaving the building through a window. Three thick tomes of different colors were sticking out of the mysterious thief\'s backpack. Before you start searching for them, you decide to compute the numbers a, b, and c written on the spines of these books. All three numbers are distinct.
So, you have an unordered set of tomes, which includes one tome with each of the pairwise distinct numbers a, b, and c, and two tomes for all numbers from 1 to n, except for a, b, and c. You want to find these values a, b, and c.
Since you are not working in a simple library, but in the Library of Magic, you can only use one spell in the form of a query to check the presence of books in their place: 
Since your magical abilities as a librarian are severely limited, you can make no more than 150 queries.
The first line of input contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4300) \xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa41018) \xe2\x80\x94 the number of types of tomes.
The interaction for each test case begins with reading the integer n.
Then you can make up to 150 queries.
To make a query, output a string in the format ""xor l r"" (without quotes) (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n). After each query, read an integer \xe2\x80\x94 the answer to your query.
To report the answer, output a string in the format ""ans a b c"" (without quotes), where a, b, and c are the numbers you found as the answer to the problem. You can output them in any order.
The interactor is not adaptive, which means that the answer is known before the participant makes queries and does not depend on the queries made by the participant.
After making 150 queries, the answer to any other query will be \xe2\x88\x921. Upon receiving such an answer, terminate the program to receive a verdict of ""WA"" (Wrong answer).
After outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive a verdict of ""IL"" (Idleness limit exceeded). To flush the buffer, use: 
Hacks
To make a hack, use the following format.
The first line should contain a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4300) \xe2\x80\x94 the number of test cases.
The only line of each test case should contain four integers n, a, b, and c (3\xe2\x89\xa4n\xe2\x89\xa41018, 1\xe2\x89\xa4a,b,c\xe2\x89\xa4n) \xe2\x80\x94 the number of books in the library and the numbers of the stolen tomes. The numbers a, b, and c must be distinct.
In the first test case, the books in the library after the theft look like this:

Now consider the answers to the queries: 
In the second test case, there are only 3 types of books, and it is easy to guess that the missing ones have the numbers 1, 2, and 3." "2200  x990"
    
2036F "XORificator 3000" "bitmasks, dp, number theory, two pointers" "Alice has been giving gifts to Bob for many years, and she knows that what he enjoys the most is performing bitwise XOR of interesting integers. Bob considers a positive integer x to be interesting if it satisfies x\xe2\x89\xa2k(mod2i). Therefore, this year for his birthday, she gifted him a super-powerful ""XORificator 3000"", the latest model.
Bob was very pleased with the gift, as it allowed him to instantly compute the XOR of all interesting integers in any range from l to r, inclusive. After all, what else does a person need for happiness? Unfortunately, the device was so powerful that at one point it performed XOR with itself and disappeared. Bob was very upset, and to cheer him up, Alice asked you to write your version of the ""XORificator"".
The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of XOR queries on the segment. The following t lines contain the queries, each consisting of the integers l, r, i, k (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa41018, 0\xe2\x89\xa4i\xe2\x89\xa430, 0\xe2\x89\xa4k<2i).
For each query, output a single integer \xe2\x80\x94 the XOR of all integers x in the range [l,r] such that x\xe2\x89\xa2kmod2i.
In the first query, the interesting integers in the range [1,3] are 1 and 3, so the answer will be 1\xe2\x8a\x953=2." "1900  x3097"
    
2036E "Reverse the Rivers" "binary search, constructive algorithms, data structures, greedy" "A conspiracy of ancient sages, who decided to redirect rivers for their own convenience, has put the world on the brink. But before implementing their grand plan, they decided to carefully think through their strategy \xe2\x80\x94 that\'s what sages do.
There are n countries, each with exactly k regions. For the j-th region of the i-th country, they calculated the value ai,j, which reflects the amount of water in it.
The sages intend to create channels between the j-th region of the i-th country and the j-th region of the (i+1)-th country for all 1\xe2\x89\xa4i\xe2\x89\xa4(n\xe2\x88\x921) and for all 1\xe2\x89\xa4j\xe2\x89\xa4k. 
Since all n countries are on a large slope, water flows towards the country with the highest number. According to the sages\' predictions, after the channel system is created, the new value of the j-th region of the i-th country will be bi,j=a1,j|a2,j|...|ai,j, where | denotes the bitwise ""OR"" operation.
After the redistribution of water, the sages aim to choose the most suitable country for living, so they will send you q queries for consideration.
Each query will contain m requirements. 
Each requirement contains three parameters: the region number r, the sign o (either ""<"" or "">""), and the value c. If o = ""<"", then in the r-th region of the country you choose, the new value must be strictly less than the limit c, and if o = "">"", it must be strictly greater.
In other words, the chosen country i must satisfy all m requirements. If in the current requirement o = ""<"", then it must hold that bi,r<c, and if o = "">"", then bi,r>c.
In response to each query, you should output a single integer \xe2\x80\x94 the number of the suitable country. If there are multiple such countries, output the smallest one. If no such country exists, output \xe2\x88\x921.
The first line contains three integers n, k, and q (1\xe2\x89\xa4n,k,q\xe2\x89\xa4105) \xe2\x80\x94 the number of countries, regions, and queries, respectively.
Next, there are n lines, where the i-th line contains k integers ai,1,ai,2,\xe2\x80\xa6,ai,k (1\xe2\x89\xa4ai,j\xe2\x89\xa4109), where ai,j is the value of the j-th region of the i-th country.
Then, q queries are described.
The first line of each query contains a single integer m (1\xe2\x89\xa4m\xe2\x89\xa4105) \xe2\x80\x94 the number of requirements.
Then follow m lines, each containing an integer r, a character o, and an integer c (1\xe2\x89\xa4r\xe2\x89\xa4k, 0\xe2\x89\xa4c\xe2\x89\xa42\xe2\x8b\x85109), where r and c are the region number and the value, and o is either ""<"" or "">"" \xe2\x80\x94 the sign.
It is guaranteed that n\xe2\x8b\x85k does not exceed 105 and that the sum of m across all queries also does not exceed 105.
For each query, output a single integer on a new line \xe2\x80\x94 the smallest number of the suitable country, or \xe2\x88\x921 if no such country exists.
In the example, the initial values of the regions are as follows:
After creating the channels, the new values will look like this:
In the first query, it is necessary to output the minimum country number (i.e., row) where, after the redistribution of water in the first region (i.e., column), the new value will be greater than four and less than six, and in the second region it will be less than eight. Only the country with number 2 meets these requirements.
In the second query, there are no countries that meet the specified requirements.
In the third query, only the country with number 3 is suitable.
In the fourth query, all three countries meet the conditions, so the answer is the smallest number 1." "1600  x6075"
    
2036D "I Love 1543" "brute force, implementation, matrices" "One morning, Polycarp woke up and realized that 1543 is the most favorite number in his life.
The first thing that Polycarp saw that day as soon as he opened his eyes was a large wall carpet of size n by m cells; n and m are even integers. Each cell contains one of the digits from 0 to 9.
Polycarp became curious about how many times the number 1543 would appear in all layers\xe2\x88\x97 of the carpet when traversed clockwise.
\xe2\x88\x97The first layer of a carpet of size n\xc3\x97m is defined as a closed strip of length 2\xe2\x8b\x85(n+m\xe2\x88\x922) and thickness of 1 element, surrounding its outer part. Each subsequent layer is defined as the first layer of the carpet obtained by removing all previous layers from the original carpet.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x94 the number of test cases. The following lines describe the test cases.
The first line of each test case contains a pair of numbers n and m (2\xe2\x89\xa4n,m\xe2\x89\xa4103, n,mï¿½\xe2\x80\x94 even integers).
This is followed by n lines of length m, consisting of digits from 0 to 9 \xe2\x80\x94 the description of the carpet.
It is guaranteed that the sum of n\xe2\x8b\x85m across all test cases does not exceed 106.
For each test case, output a single number \xe2\x80\x94 the total number of times 1543 appears in all layers of the carpet in the order of traversal clockwise." "1300  x10983"
    
2036C "Anya and 1100" "brute force, implementation" "While rummaging through things in a distant drawer, Anya found a beautiful string s consisting only of zeros and ones.
Now she wants to make it even more beautiful by performing q operations on it.
Each operation is described by two integers i (1\xe2\x89\xa4i\xe2\x89\xa4|s|) and v (v\xe2\x88\x88{0,1}) and means that the i-th character of the string is assigned the value v (that is, the assignment si=v is performed).
But Anya loves the number 1100, so after each query, she asks you to tell her whether the substring ""1100"" is present in her string (i.e. there exist such 1\xe2\x89\xa4i\xe2\x89\xa4|s|\xe2\x88\x923 that sisi+1si+2si+3=1100).
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of the test case contains the string s (1\xe2\x89\xa4|s|\xe2\x89\xa42\xe2\x8b\x85105), consisting only of the characters ""0"" and ""1"". Here |s| denotes the length of the string s.
The next line contains an integer q (1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of queries.
The following q lines contain two integers i (1\xe2\x89\xa4i\xe2\x89\xa4|s|) and v (v\xe2\x88\x88{0,1}), describing the query.
It is guaranteed that the sum of |s| across all test cases does not exceed 2\xe2\x8b\x85105. It is also guaranteed that the sum of q across all test cases does not exceed 2\xe2\x8b\x85105.
For each query, output ""YES"", if ""1100"" is present in Anya\'s string; otherwise, output ""NO"".
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses." "1100  x15603"
    
2036B Startup "greedy, sortings" "Arseniy came up with another business plan \xe2\x80\x94 to sell soda from a vending machine! For this, he purchased a machine with n shelves, as well as k bottles, where the i-th bottle is characterized by the brand index bi and the cost ci. 
You can place any number of bottles on each shelf, but all bottles on the same shelf must be of the same brand.
Arseniy knows that all the bottles he puts on the shelves of the machine will be sold. Therefore, he asked you to calculate the maximum amount he can earn.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n,k\xe2\x89\xa42\xe2\x8b\x85105), where n is the number of shelves in the machine, and k is the number of bottles available to Arseniy.
The next k lines contain two integers bi and ci (1\xe2\x89\xa4bi\xe2\x89\xa4k,1\xe2\x89\xa4ci\xe2\x89\xa41000) \xe2\x80\x94 the brand and cost of the i-th bottle.
It is also guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105 and that the sum of k across all test cases also does not exceed 2\xe2\x8b\x85105.
For each test case, output one integer \xe2\x80\x94 the maximum amount that Arseniy can earn.
In the first test case, Arseniy has 3 shelves in the vending machine. He can place, for example, two bottles of the brand 2 on the first shelf and a bottle of the brand 1 on the second shelf. Then the total cost of the bottles would be 6+7+15=28.
In the second test case, he has only one shelf. It is not difficult to show that the optimal option is to place a bottle of the brand 1 on it. Then the total cost will be 15.
In the third test case, he has as many as 6 shelves, so he can place all available bottles with a total cost of 7+5=12." "800  x21952"
    
2036A Quintomania implementation "Boris Notkin composes melodies. He represents them as a sequence of notes, where each note is encoded as an integer from 0 to 127 inclusive. The interval between two notes a and b is equal to |a\xe2\x88\x92b| semitones.
Boris considers a melody perfect if the interval between each two adjacent notes is either 5 semitones or 7 semitones.
After composing his latest melodies, he enthusiastically shows you his collection of works. Help Boris Notkin understand whether his melodies are perfect.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of melodies.
Each melody is described by two lines. 
The first line contains an integer n (2\xe2\x89\xa4n\xe2\x89\xa450) \xe2\x80\x94 the number of notes in the melody.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4127) \xe2\x80\x94 the notes of the melody.
For each melody, output ""YES"", if it is perfect; otherwise, output ""NO"".
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses." "800  x29171"
    
2035H "Peak Productivity Forces" "constructive algorithms" "You are given two permutations\xe2\x88\x97\xe2\x88\x97 aa and bb, both of length nn.
You can perform the following three-step operation on permutation aa: 
After the operation, a1,a2,\xe2\x80\xa6,ai\xe2\x88\x922,ai\xe2\x88\x921,ai,ai+1,ai+2,\xe2\x80\xa6,an\xe2\x88\x921,ana1,a2,\xe2\x80\xa6,ai\xe2\x88\x922,ai\xe2\x88\x921,ai,ai+1,ai+2,\xe2\x80\xa6,an\xe2\x88\x921,an is transformed into ai\xe2\x88\x921,a1,\xe2\x80\xa6,ai\xe2\x88\x923,ai\xe2\x88\x922,ai,an,ai+1,\xe2\x80\xa6,an\xe2\x88\x922,an\xe2\x88\x921ai\xe2\x88\x921,a1,\xe2\x80\xa6,ai\xe2\x88\x923,ai\xe2\x88\x922,ai,an,ai+1,\xe2\x80\xa6,an\xe2\x88\x922,an\xe2\x88\x921.
Here are some examples of operations done on the identity permutation [1,2,3,4,5,6,7][1,2,3,4,5,6,7] of length 77: 
Find a construction using at most 2n2n operations to make aa equal to bb or print \xe2\x88\x921\xe2\x88\x921 if it is impossible. The number of operations does not need to be minimized. It can be shown that if it is possible to make aa equal to bb, it is possible to do this within 2n2n operations. 
\xe2\x88\x97\xe2\x88\x97A permutation of length nn is an array consisting of nn distinct integers from 11 to nn in arbitrary order. For example, [2,3,1,5,4][2,3,1,5,4] is a permutation, but [1,2,2][1,2,2] is not a permutation (22 appears twice in the array), and [1,3,4][1,3,4] is also not a permutation (n=3n=3 but there is 44 in the array).
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x851041\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer nn (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the lengths of permutations aa and bb.
The second line of each test case contains nn integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the values of permutation aa.
The third line of each test case contains nn integers b1,b2,\xe2\x80\xa6,bnb1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4n1\xe2\x89\xa4bi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the values of permutation bb.
It is guaranteed that the sum of nn over all test cases will not exceed 5\xe2\x8b\x851055\xe2\x8b\x85105.
For each test case:
If there is a sequence of operations to transform aa into bb, output a single integer qq (0\xe2\x89\xa4q\xe2\x89\xa42n0\xe2\x89\xa4q\xe2\x89\xa42n)ï¿½\xe2\x80\x94 the number of operations in the first line and qq integers with the ii-th number representing the index of the ii-th operation in the second line.
If there is no sequence of operations, output \xe2\x88\x921\xe2\x88\x921 in the only line.
In the first case, you can do no operation since a=ba=b.
In the second case, it can be proved aa can not be transformed into bb.
In the third case, aa is transformed into [2,3,1][2,3,1] after the first operation and into bb after the second operation." "3500  x52"
    
2035G2 "Go Learn! (Hard Version)" "divide and conquer, dp" "The differences between the easy and hard versions are the constraints on n and the sum of n. In this version, n\xe2\x89\xa43\xe2\x8b\x85105 and the sum of n does not exceed 106. You can only make hacks if both versions are solved. 
Well, well, well, let\'s see how Bessie is managing her finances. She seems to be in the trenches! Fortunately, she is applying for a job at Moogle to resolve this issue. Moogle interviews require intensive knowledge of obscure algorithms and complex data structures, but Bessie received a tip-off from an LGM on exactly what she has to go learn.
Bessie wrote the following code to binary search for a certain element k in a possibly unsorted array [a1,a2,\xe2\x80\xa6,an] with n elements.
Bessie submitted her code to Farmer John\'s problem with m (1\xe2\x89\xa4m\xe2\x89\xa4n) tests. The i-th test is of the form (xi,ki) (1\xe2\x89\xa4x,k\xe2\x89\xa4n). It is guaranteed all the xi are distinct and all the ki are distinct.
Test i is correct if the following hold:
It might not be possible for all m tests to be correct on the same array, so Farmer John will remove some of them so Bessie can AC. Let r be the minimum of tests removed so that there exists an array [a1,a2,\xe2\x80\xa6,an] with 1\xe2\x89\xa4ai\xe2\x89\xa4n so that all remaining tests are correct. 
In addition to finding r, Farmer John wants you to count the number of arrays [a1,a2,\xe2\x80\xa6,an] with 1\xe2\x89\xa4ai\xe2\x89\xa4n such that there exists a way to remove exactly r tests so that all the remaining tests are correct. Since this number may be very large, please find it modulo 998244353.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105) denoting the number of the array and the number of tests.
The following m lines each contain two integers, describing the tests. The i-th line contains two integers xi and ki (1\xe2\x89\xa4xi,ki\xe2\x89\xa4n) denoting the index and value of the test. It is guaranteed all xi are distinct and all ki are distinct.
It is guaranteed the sum of n across all test cases does not exceed 106.
For each test case, output two integers, rï¿½\xe2\x80\x94 the minimum of tests removed so that there exists an array so that all remaining tests are correct, and the number of arrays such that it is possible to remove r tests to make all remaining tests correct modulo 998244353.
Consider the first example.
In the first test case, the array [1,2,2,3,4] satisfies all m tests, so the minimum number of tests Bessie has to remove is 0. Note that this is also the only array that satisfies all m tests. 
In the second test case, the minimum number of tests Bessie has to remove is 1. The only test Bessie can remove is (2,5). If Bessie removes test (2,5), then the arrays satisfying the remaining m\xe2\x88\x921 tests are [2,2,3,1,4], [2,2,3,2,4], [2,2,3,3,4]." "3500  x72"
    
2035G1 "Go Learn! (Easy Version)" "dp, trees" "The differences between the easy and hard versions are the constraints on nn and the sum of nn. In this version, n\xe2\x89\xa43000n\xe2\x89\xa43000 and the sum of nn does not exceed 104104. You can only make hacks if both versions are solved. 
Well, well, well, let\'s see how Bessie is managing her finances. She seems to be in the trenches! Fortunately, she is applying for a job at Moogle to resolve this issue. Moogle interviews require intensive knowledge of obscure algorithms and complex data structures, but Bessie received a tip-off from an LGM on exactly what she has to go learn.
Bessie wrote the following code to binary search for a certain element kk in a possibly unsorted array [a1,a2,\xe2\x80\xa6,an][a1,a2,\xe2\x80\xa6,an] with nn elements.
Bessie submitted her code to Farmer John\'s problem with mm (1\xe2\x89\xa4m\xe2\x89\xa4n1\xe2\x89\xa4m\xe2\x89\xa4n) tests. The ii-th test is of the form (xi,ki)(xi,ki) (1\xe2\x89\xa4x,k\xe2\x89\xa4n1\xe2\x89\xa4x,k\xe2\x89\xa4n). It is guaranteed all the xixi are distinct and all the kiki are distinct.
Test ii is correct if the following hold:
It might not be possible for all mm tests to be correct on the same array, so Farmer John will remove some of them so Bessie can AC. Let rr be the minimum of tests removed so that there exists an array [a1,a2,\xe2\x80\xa6,an][a1,a2,\xe2\x80\xa6,an] with 1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n so that all remaining tests are correct. 
In addition to finding rr, Farmer John wants you to count the number of arrays [a1,a2,\xe2\x80\xa6,an][a1,a2,\xe2\x80\xa6,an] with 1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n such that there exists a way to remove exactly rr tests so that all the remaining tests are correct. Since this number may be very large, please find it modulo 998244353998244353.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers nn and mm (1\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x89\xa430001\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x89\xa43000) denoting the number of the array and the number of tests.
The following mm lines each contain two integers, describing the tests. The ii-th line contains two integers xixi and kiki (1\xe2\x89\xa4xi,ki\xe2\x89\xa4n1\xe2\x89\xa4xi,ki\xe2\x89\xa4n) denoting the index and value of the test. It is guaranteed all xixi are distinct and all kiki are distinct.
It is guaranteed the sum of nn across all test cases does not exceed 104104.
For each test case, output two integers, rrï¿½\xe2\x80\x94 the minimum of tests removed so that there exists an array so that all remaining tests are correct, and the number of arrays such that it is possible to remove rr tests to make all remaining tests correct modulo 998244353998244353.
Consider the first example.
In the first test case, the array [1,2,2,3,4][1,2,2,3,4] satisfies all mm tests, so the minimum number of tests Bessie has to remove is 00. Note that this is also the only array that satisfies all mm tests. 
In the second test case, the minimum number of tests Bessie has to remove is 11. The only test Bessie can remove is (2,5)(2,5). If Bessie removes test (2,5)(2,5), then the arrays satisfying the remaining m\xe2\x88\x921m\xe2\x88\x921 tests are [2,2,3,1,4][2,2,3,1,4], [2,2,3,2,4][2,2,3,2,4], [2,2,3,3,4][2,2,3,3,4]." "3300  x127"
    
2035F "Tree Operations" "binary search, brute force, dfs and similar, dp, trees" "One day, a turtle gives you a tree with n nodes rooted at node x. Each node has an initial nonnegative value; the i-th node has starting value ai.
You want to make the values of all nodes equal to 0. To do so, you will perform a series of operations on the tree, where each operation will be performed on a certain node. Define an operation on node u as choosing a single node in u\'s subtree\xe2\x88\x97 and incrementing or decrementing its value by 1. The order in which operations are performed on nodes is as follows:
More formally, the i-th operation will be performed on the (((i\xe2\x88\x921)modn)+1)-th node.\xe2\x80\xa0
Note that you cannot skip over operations; that is, you cannot perform the i-th operation without first performing operations 1,2,\xe2\x80\xa6,i\xe2\x88\x921.
Find the minimum number of operations you must perform before you can make the values of all nodes equal to 0, assuming you pick operations optimally. If it\'s impossible to make the values of all nodes equal to 0 after finite operations, output \xe2\x88\x921.
\xe2\x88\x97The subtree of a node u is the set of nodes for which u lies on the shortest path from this node to the root, including u itself.
\xe2\x80\xa0Here, amodb denotes the remainder from dividing a by b.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and x (1\xe2\x89\xa4n\xe2\x89\xa42000, 1\xe2\x89\xa4x\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the number of nodes and the root of the tree.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the starting value of each node.
Each of the next n\xe2\x88\x921 lines of each test case contains two integers u and v (1\xe2\x89\xa4u,v\xe2\x89\xa4n, u\xe2\x89\xa0v) representing an undirected edge from u to v. It is guaranteed that the given edges form a tree.
It is guaranteed that the sum of n over all test cases does not exceed 2000.
For each test case, output a single integer denoting the minimum amount of operations needed to make all nodes 0. If it\'s impossible to make all nodes 0, output \xe2\x88\x921.
In the first test case, you can make the following valid sequence of operations: " "2500  x753"
    
2035E Monster "binary search, brute force, constructive algorithms, greedy, implementation, math, ternary search" "You are fighting a monster with z health using a weapon with d damage. Initially, d=0. You can perform the following operations.
You cannot perform the first operation for more than k times in a row.
Find the minimum number of coins needed to defeat the monster by dealing at least z damage.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains 4 integers x, y, z, and k (1\xe2\x89\xa4x,y,z,k\xe2\x89\xa4108)ï¿½\xe2\x80\x94 the first operation\'s cost, the second operation\'s cost, the monster\'s health, and the limitation on the first operation.
For each test case, output the minimum number of coins needed to defeat the monster.
In the first test case, x=2, y=3, z=5, and k=5. Here\'s a strategy that achieves the lowest possible cost of 12 coins: 
You deal a total of 3+3=6 damage, defeating the monster who has 5 health. The total number of coins you use is 2+2+2+3+3=12 coins. 
In the second test case, x=10, y=20, z=40, and k=5. Here\'s a strategy that achieves the lowest possible cost of 190 coins: 
You deal a total of 5+35=40 damage, defeating the monster who has exactly 40 health. The total number of coins you use is 50+20+20+100=190 coins. " "2300  x1457"
    
2035D "Yet Another Real Number Problem" "binary search, data structures, divide and conquer, greedy, implementation, math" "You are given an array b of length m. You can perform the following operation any number of times (possibly zero): 
Since this problem is too easy, you are given an array a of length n and need to solve the problem for each prefix of a.
In other words, denoting the maximum sum of b after performing any number of such operations as f(b), you need to output f([a1]), f([a1,a2]), \xe2\x80\xa6, f([a1,a2,\xe2\x80\xa6,an]) modulo 109+7 respectively.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of a.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the starting values of array a.
It is guaranteed that the sum of n over all test cases will not exceed 2\xe2\x8b\x85105.
For each test case, output n integers representing the answer for each prefix of a modulo 109+7.
For each prefix in the first example, a possible array after operations is: " "1800  x4304"
    
2035C "Alya and Permutation" "bitmasks, constructive algorithms, math" "Alya has been given a hard problem. Unfortunately, she is too busy running for student council. Please solve this problem for her.
Given an integer n, construct a permutation p of integers 1,2,\xe2\x80\xa6,n that maximizes the value of k (which is initially 0) after the following process.
Perform n operations, on the i-th operation (i=1,2,\xe2\x80\xa6,n),
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single integer n (5\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the permutation.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the maximum value of k in the first line and output the permutation p1,p2,\xe2\x80\xa6,pn in the second line.
If there are multiple such permutations, output any.
For the first test case, the value of k is determined as follows:
k=0 initially.
The final value of k is 5. It can be shown that the final value of k is at most 5 for all permutations of length 5. Another valid output is [2,3,1,4,5].
For the second test case, the final value of k is 7. It can be shown that the final value of k is at most 7 for all permutations of length 6. Other valid outputs include [2,4,1,6,3,5] and [5,2,6,1,3,4]." "1400  x7767"
    
2035B "Everyone Loves Tres" "constructive algorithms, greedy, math, number theory" "Given a positive integer n. Find the smallest integer whose decimal representation has length n and consists only of 3s and 6s such that it is divisible by both 33 and 66. If no such integer exists, print \xe2\x88\x921.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the length of the decimal representation.
For each test case, output the smallest required integer if such an integer exists and \xe2\x88\x921 otherwise.
For n=1, no such integer exists as neither 3 nor 6 is divisible by 33.
For n=2, 66 consists only of 6s and it is divisible by both 33 and 66.
For n=3, no such integer exists. Only 363 is divisible by 33, but it is not divisible by 66.
For n=4, 3366 and 6666 are divisible by both 33 and 66, and 3366 is the smallest." "900  x14128"
    
2035A Sliding "implementation, math" "There are n rows of m people. Let the position in the r-th row and the c-th column be denoted by (r,c). Number each person starting from 1 in row-major order, i.e., the person numbered (r\xe2\x88\x921)\xe2\x8b\x85m+c is initially at (r,c).
The person at (r,c) decides to leave. To fill the gap, let the person who left be numbered i. Each person numbered j>i will move to the position where the person numbered j\xe2\x88\x921 is initially at. The following diagram illustrates the case where n=2, m=3, r=1, and c=2. 
Calculate the sum of the Manhattan distances of each person\'s movement. If a person was initially at (r0,c0) and then moved to (r1,c1), the Manhattan distance is |r0\xe2\x88\x92r1|+|c0\xe2\x88\x92c1|.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each testcase contains 4 integers n, m, r, and c (1\xe2\x89\xa4r\xe2\x89\xa4n\xe2\x89\xa4106, 1\xe2\x89\xa4c\xe2\x89\xa4m\xe2\x89\xa4106), where n is the number of rows, m is the number of columns, and (r,c) is the position where the person who left is initially at.
For each test case, output a single integer denoting the sum of the Manhattan distances.
For the first test case, the person numbered 2 leaves, and the distances of the movements of the person numbered 3, 4, 5, and 6 are 1, 3, 1, and 1, respectively. So the answer is 1+3+1+1=6.
For the second test case, the person numbered 3 leaves, and the person numbered 4 moves. The answer is 1." "800  x14511"
    
2033G "Sakurako and Chefir" "data structures, dfs and similar, dp, greedy, trees" "Given a tree with n vertices rooted at vertex 1. While walking through it with her cat Chefir, Sakurako got distracted, and Chefir ran away.
To help Sakurako, Kosuke recorded his q guesses. In the i-th guess, he assumes that Chefir got lost at vertex vi and had ki stamina.
Also, for each guess, Kosuke assumes that Chefir could move along the edges an arbitrary number of times:
If Chefir\'s stamina is 0, he cannot make a move of the second type.
For each assumption, your task is to find the distance to the farthest vertex that Chefir could reach from vertex vi, having ki stamina.
\xe2\x88\x97Vertex a is an ancestor of vertex b if the shortest path from b to the root passes through a.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case is described as follows:
It is guaranteed that the sum of n and the sum of q across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case and for each guess, output the maximum distance to the farthest vertex that Chefir could reach from the starting point vi having ki stamina.
In the first example:" "2200  x1209"
    
2033F "Kosuke's Sloth" "brute force, math, number theory" "Kosuke is too lazy. He will not give you any legend, just the task:
Fibonacci numbers are defined as follows:
As this number can be too big, output it by modulo 109+7.
For example: G(3,2)=9 because the 3-rd Fibonacci number that is divisible by 2 is 34. [1,1,2,3,5,8,13,21,34].
The first line of the input data contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first and only line contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa41018, 1\xe2\x89\xa4k\xe2\x89\xa4105).
It is guaranteed that the sum of k across all test cases does not exceed 106.
For each test case, output the only number: the value G(n,k) taken by modulo 109+7." "1800  x5081"
    
2033E "Sakurako, Kosuke, and the Permutation" "brute force, data structures, dfs and similar, dsu, graphs, greedy, math" "Sakurako\'s exams are over, and she did excellently. As a reward, she received a permutation p. Kosuke was not entirely satisfied because he failed one exam and did not receive a gift. He decided to sneak into her room (thanks to the code for her lock) and spoil the permutation so that it becomes simple.
A permutation p is considered simple if for every i (1\xe2\x89\xa4i\xe2\x89\xa4n) one of the following conditions holds:
For example, the permutations [1,2,3,4], [5,2,4,3,1], and [2,1] are simple, while [2,3,1] and [5,2,1,4,3] are not.
In one operation, Kosuke can choose indices i,j (1\xe2\x89\xa4i,j\xe2\x89\xa4n) and swap the elements pi and pj.
Sakurako is about to return home. Your task is to calculate the minimum number of operations that Kosuke needs to perform to make the permutation simple.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case is described by two lines.
It is guaranteed that the sum of n across all test cases does not exceed 106.
It is guaranteed that p is a permutation.
For each test case, output the minimum number of operations that Kosuke needs to perform to make the permutation simple.
In the first and second examples, the permutations are already simple.
In the fourth example, it is sufficient to swap p2 and p4. Thus, the permutation will become [2,1,4,3] in 1 operation." "1400  x9661"
    
2033D "Kousuke's Assignment" "data structures, dp, dsu, greedy, math" "After a trip with Sakurako, Kousuke was very scared because he forgot about his programming assignment. In this assignment, the teacher gave him an array a of n integers and asked him to calculate the number of non-overlapping segments of the array a, such that each segment is considered beautiful.
A segment [l,r] is considered beautiful if al+al+1+\xe2\x8b\xaf+ar\xe2\x88\x921+ar=0.
For a fixed array a, your task is to compute the maximum number of non-overlapping beautiful segments.
The first line of input contains the number t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Each test case consists of 2 lines. 
It is guaranteed that the sum of n across all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integer: the maximum number of non-overlapping beautiful segments." "1300  x12739"
    
2033C "Sakurako's Field Trip" "dp, greedy, two pointers" "Even in university, students need to relax. That is why Sakurakos teacher decided to go on a field trip. It is known that all of the students will be walking in one line. The student with index i has some topic of interest which is described as ai. As a teacher, you want to minimise the disturbance of the line of students.
The disturbance of the line is defined as the number of neighbouring people with the same topic of interest. In other words, disturbance is the number of indices j (1\xe2\x89\xa4j<n) such that aj=aj+1.
In order to do this, you can choose index i (1\xe2\x89\xa4i\xe2\x89\xa4n) and swap students at positions i and n\xe2\x88\x92i+1. You can perform any number of swaps.
Your task is to determine the minimal amount of disturbance that you can achieve by doing the operation described above any number of times.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case is described by two lines.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the minimal possible disturbance of the line that you can achieve.
In the first example, it is necessary to apply the operation to i=2, thus the array will become [1,2,1,1,3], with the bold elements indicating those that have swapped places. The disturbance of this array is equal to 1.
In the fourth example, it is sufficient to apply the operation to i=3, thus the array will become [2,1,2,1,2,4]. The disturbance of this array is equal to 0.
In the eighth example, it is sufficient to apply the operation to i=3, thus the array will become [1,4,1,5,3,1,3]. The disturbance of this array is equal to 0." "1400  x12327"
    
2033B "Sakurako and Water" "brute force, constructive algorithms, greedy" "During her journey with Kosuke, Sakurako and Kosuke found a valley that can be represented as a matrix of size n\xc3\x97n, where at the intersection of the i-th row and the j-th column is a mountain with a height of ai,j. If ai,j<0, then there is a lake there.
Kosuke is very afraid of water, so Sakurako needs to help him:
More formally, she can choose a submatrix with the upper left corner located at (i,j) and the lower right corner at (p,q), such that p\xe2\x88\x92i=q\xe2\x88\x92j. She can then add one to each element at the intersection of the (i+k)-th row and the (j+k)-th column, for all k such that 0\xe2\x89\xa4k\xe2\x89\xa4p\xe2\x88\x92i.
Determine the minimum number of times Sakurako must use her magic so that there are no lakes.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4200)ï¿½\xe2\x80\x94 the number of test cases.
Each test case is described as follows: 
It is guaranteed that the sum of n across all test cases does not exceed 1000.
For each test case, output the minimum number of times Sakurako will have to use her magic so that all lakes disappear." "900  x22573"
    
2033A "Sakurako and Kosuke" "constructive algorithms, implementation, math" "Sakurako and Kosuke decided to play some games with a dot on a coordinate line. The dot is currently located in position x=0. They will be taking turns, and Sakurako will be the one to start. 
On the i-th move, the current player will move the dot in some direction by 2\xe2\x8b\x85i\xe2\x88\x921 units. Sakurako will always be moving the dot in the negative direction, whereas Kosuke will always move it in the positive direction. 
In other words, the following will happen:
They will keep on playing while the absolute value of the coordinate of the dot does not exceed n. More formally, the game continues while \xe2\x88\x92n\xe2\x89\xa4x\xe2\x89\xa4n. It can be proven that the game will always end.
Your task is to determine who will be the one who makes the last turn.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of games that Sakurako and Kosuke played.
Each game is described by one number n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number that defines the condition when the game ends.
For each of the t games, output a line with the result of that game. If Sakurako makes the last turn, output ""Sakurako"" (without quotes); else output ""Kosuke""." "800  x32326"
    
2032F Peanuts "combinatorics, dp, games, math" "Having the magical beanstalk, Jack has been gathering a lot of peanuts lately. Eventually, he has obtained n pockets of peanuts, conveniently numbered 1 to n from left to right. The i-th pocket has ai peanuts.
Jack and his childhood friend Alice decide to play a game around the peanuts. First, Alice divides the pockets into some boxes; each box will have a non-zero number of consecutive pockets, and each pocket will, obviously, belong to exactly one box. At the same time, Alice does not change the order of the boxes, that is, the boxes are numbered in ascending order of the indices of the pockets in them.
After that, Alice and Jack will take turns alternately, with Alice going first.
At each turn, the current player will remove a positive number of peanuts from exactly one pocket which belongs to the leftmost non-empty box (i.e., the leftmost box containing at least one non-empty pocket). In other words, if we number the boxes from left to right, then each player can only pick peanuts from the pocket in the j-th box (j\xe2\x89\xa52) only if the (j\xe2\x88\x921)-th box has no peanuts left. The player who cannot make a valid move loses.
Alice is sure she will win since she has the advantage of dividing the pockets into boxes herself. Thus, she wanted to know how many ways there are for her to divide the peanuts into boxes at the start of the game so that she will win, assuming both players play optimally. Can you help her with the calculation?
As the result can be very large, output it modulo 998244353.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the number of pockets.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of peanuts in each pocket.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of ways for Alice to divide the pockets into boxes at the start of the game to guarantee her win, assuming both players play optimally, modulo 998244353.
In the first test case, the only way for Alice to win is to divide the pockets into two boxes as follows: ([1,2],[3]) (the first box contains the first two pockets and the second box contains the third pocket). Alice wins by taking both peanuts from the second pocket, leaving Jack with ([1],[3]). Jack is forced to take the only peanut left in the first box, which allows Alice to take the remaining ones in the second box.
In the second test case, the winning divisions for Alice are ([1],[2,3,1]), ([1,2,3,1]), ([1,2],[3],[1]), and ([1,2],[3,1]).
In the third test case, Alice always wins no matter how she divides the pockets into boxes. 
In the fourth test case, Alice always loses no matter how she divides the pockets into boxes." "2700  x233"
    
2032E Balanced "constructive algorithms, data structures, greedy, implementation, math" "You are given a cyclic array a with n elements, where n is odd. In each operation, you can do the following:
A cyclic array is called balanced if all its elements are equal to each other.
Find any sequence of operations to make this cyclic array balanced or determine that it is impossible. Please note that you do not have to minimize the number of operations.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n<2\xe2\x8b\x85105, n is odd)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106) \xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case: 
In the first test case: 
In the second test case: 
In the third test case: " "2400  x884"
    
2032D Genokraken "constructive algorithms, data structures, graphs, greedy, implementation, interactive, trees, two pointers" "This is an interactive problem.
Upon clearing the Waterside Area, Gretel has found a monster named Genokraken, and she\'s keeping it contained for her scientific studies.
The monster\'s nerve system can be structured as a tree\xe2\x80\xa0 of n nodes (really, everything should stop resembling trees all the time\xe2\x80\xa6), numbered from 0 to n\xe2\x88\x921, with node 0 as the root.
Gretel\'s objective is to learn the exact structure of the monster\'s nerve systemï¿½\xe2\x80\x94 more specifically, she wants to know the values p1,p2,\xe2\x80\xa6,pn\xe2\x88\x921 of the tree, where pi (0\xe2\x89\xa4pi<i) is the direct parent node of node i (1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921).
She doesn\'t know exactly how the nodes are placed, but she knows a few convenient facts:
Gretel can make queries to the containment cell:
However, to avoid unexpected consequences by overstimulating the creature, Gretel wants to query at most 2n\xe2\x88\x926 times. Though Gretel is gifted, she can\'t do everything all at once, so can you give her a helping hand?
\xe2\x80\xa0A tree is a connected graph where every pair of distinct nodes has exactly one simple path connecting them.
\xe2\x80\xa1A path is a tree whose vertices can be listed in the order v1,v2,\xe2\x80\xa6,vk such that the edges are (vi,vi+1) (1\xe2\x89\xa4i<k).
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (4\xe2\x89\xa4n\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of nodes in Genokraken\'s nerve system.
It is guaranteed that the sum of n over all test cases does not exceed 104.
For each test case, interaction starts by reading the integer n.
Then you can make queries of the following type:
After the query, read an integer rï¿½\xe2\x80\x94 the answer to your query. You are allowed to use at most 2n\xe2\x88\x926 queries of this type.
When you find out the structure, output a line in the format ""! p1ï¿½p2\xe2\x80\xa6pn\xe2\x88\x921"" (without quotes), where pi (0\xe2\x89\xa4pi<i) denotes the index of the direct parent of node i. This query is not counted towards the 2n\xe2\x88\x926 queries limit.
After solving one test case, the program should immediately move on to the next one. After solving all test cases, the program should be terminated immediately.
After printing any query do not forget to output an end of line and flush the output buffer. Otherwise, you will get Idleness limit exceeded. To do this, use:
The interactor is non-adaptive. The tree does not change during the interaction.
Hacks
For hack, use the following format:
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (4\xe2\x89\xa4n\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of nodes in Genokraken\'s nerve system.
The second line of each test case contains n\xe2\x88\x921 integers p1,p2,\xe2\x80\xa6,pn\xe2\x88\x921 (0\xe2\x89\xa4p1\xe2\x89\xa4p2\xe2\x89\xa4\xe2\x80\xa6\xe2\x89\xa4pn\xe2\x88\x921\xe2\x89\xa4n\xe2\x88\x922, 0\xe2\x89\xa4pi<i)ï¿½\xe2\x80\x94 the direct parents of node 1, 2, ..., n\xe2\x88\x921 in the system, respectively.
In each test case, the values p1,p2,\xe2\x80\xa6,pn\xe2\x88\x921 must ensure the following in the tree: 
The sum of n over all test cases must not exceed 104.
In the first test case, Genokraken\'s nerve system forms the following tree:
In the second test case, Genokraken\'s nerve system forms the following tree:
In the third test case, Genokraken\'s nerve system forms the following tree:" "1800  x4358"
    
2032C Trinity "binary search, math, sortings, two pointers" "You are given an array a of n elements a1,a2,\xe2\x80\xa6,an.
You can perform the following operation any number (possibly 0) of times:
Find the minimum number of operations required to make the array a satisfy the condition:
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of elements in the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of operations required.
In the first test case, one of the possible series of operations would be:
It can be proven that any triplet of elements with pairwise distinct indices in the final array forms a non-degenerate triangle, and there is no possible answer using less than 3 operations.
In the second test case, we can assign a1:=a2=3 to make the array a=[3,3,2].
In the third test case, since 3, 4 and 5 are valid side lengths of a triangle, we don\'t need to perform any operation to the array." "1400  x10701"
    
2032B Medians "constructive algorithms, greedy, implementation, math" "You are given an array a=[1,2,\xe2\x80\xa6,n], where n is odd, and an integer k.
Your task is to choose an odd positive integer m and to split a into m subarrays\xe2\x80\xa0 b1,b2,\xe2\x80\xa6,bm such that:
\xe2\x80\xa0A subarray of the array a of length n is the array [al,al+1,\xe2\x80\xa6,ar] for some integers 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n.
\xe2\x80\xa1A median of the array of odd length is the middle element after the array is sorted in non-decreasing order. For example: median([1,2,5,4,3])=3, median([3,2,1])=2, median([2,1,2,1,2,2,2])=2.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45000) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n<2\xe2\x8b\x85105, n is odd)ï¿½\xe2\x80\x94 the length of array a and the desired median of the array of medians of all subarrays.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case:
In detail, for a valid answer [p1,p2,\xe2\x80\xa6,pm]:
If there are multiple solutions, you can output any of them.
In the first test case, the given partition has m=1 and b1=[1]. It is obvious that median([median([1])])=median([1])=1.
In the second test case, the given partition has m=3 and:
Therefore, median([median([1]),median([2]),median([3])])=median([1,2,3])=2.
In the third test case, there is no valid partition for k=3.
In the fourth test case, the given partition has m=5 and:
Therefore, median([median([1,2,3]),median([4,5,6]),median([7,8,9]),median([10,11,12]),median([13,14,15])])=median([2,5,8,11,14])=8." "1100  x15063"
    
2032A Circuit "greedy, implementation, math, number theory" "Alice has just crafted a circuit with n lights and 2n switches. Each component (a light or a switch) has two states: on or off. The lights and switches are arranged in a way that:
Alice brings the circuit, which shows only the states of the 2n switches, to her sister Iris and gives her a riddle: what is the minimum and maximum number of lights that can be turned on?
Knowing her little sister\'s antics too well, Iris takes no more than a second to give Alice a correct answer. Can you do the same?
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of lights in the circuit.
The second line of each test case contains 2n integers a1,a2,\xe2\x80\xa6,a2n (0\xe2\x89\xa4ai\xe2\x89\xa41)ï¿½\xe2\x80\x94 the states of the switches in the circuit. ai=0 means the i-th switch is off, and ai=1 means the i-th switch is on.
For each test case, output two integersï¿½\xe2\x80\x94 the minimum and maximum number of lights, respectively, that can be turned on.
In the first test case, there is only one light in the circuit, and no switch is on, so the light is certainly off.
In the second test case, there is only one light in the circuit, but one switch connected to it is on, so the light is on.
In the third test case, there is only one light in the circuit, and both switches are on, so the light is off as it was toggled twice.
In the fourth test case, to have no lights on, the switches can be arranged in this way:
And to have 2 lights on, the switches can be arranged in this way:" "800  x19682"
    
2031F "Penchick and Even Medians" "binary search, constructive algorithms, interactive" " 
This is an interactive problem. 
Returning from a restful vacation on Australia\'s Gold Coast, Penchick forgot to bring home gifts for his pet duck Duong Canh! But perhaps a beautiful problem crafted through deep thought on the scenic beaches could be the perfect souvenir.
There is a hidden permutation\xe2\x88\x97 p of length n, where n is even. You are allowed to make the following query:
Find the index of the two medians in permutation p using at most 80 queries.
Note that the interactor is non-adaptive. This means that the permutation p is fixed at the beginning and will not change based on your queries.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). 
\xe2\x80\xa0A sequence a is a subsequence of a sequence b if a can be obtained from b by the deletion of several (possibly, zero or all) element from arbitrary positions. 
\xe2\x80\xa1The two medians of an array a with even length k are defined as the k2-th and (k2+1)-th smallest element in the array (1-indexed).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows. 
The only line of each test case contains a single integer n (6\xe2\x89\xa4n\xe2\x89\xa4100, n is even)ï¿½\xe2\x80\x94 the length of the hidden permutation p.
For each test case, after reading the integer n, you should begin the interaction and find the answer before reading n for the next test case.
It is guaranteed that the sum of n over all test cases does not exceed 104. 
To make a query, print a single line in the following format:
After each query, you should read a line containing two integers m1 and m2 (1\xe2\x89\xa4m1<m2\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the value of the two medians in array [px1,px2,\xe2\x80\xa6,pxk\xe2\x88\x921,pxk].
You can make at most 80 such queries in each test case.
To give the final answer, print a single line in the following format:
Note that the order in which i1 and i2 is printed does not matter. In other words, your solution is valid as long as pi1=n2 and pi2=n2+1, or pi1=n2+1 and pi2=n2.
After printing each query do not forget to output the end of line and flush\xe2\x88\x97 the output. Otherwise, you will get Idleness limit exceeded verdict.
If, at any interaction step, you read \xe2\x88\x921 instead of valid data, your solution must exit immediately. This means that your solution will receive Wrong answer because of an invalid query or any other mistake. Failing to exit can result in an arbitrary verdict because your solution will continue to read from a closed stream. 
Hack format
For hacks, use the following format.
The first line should contain tï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case should contain a single even integer n.
The second line of each test case should contain a permutation p1,p2,\xe2\x80\xa6,pn of length n.
As an example, the hack format for the example input is: 
\xe2\x88\x97To flush, use: 
In the first test case, the hidden permutation is p=[6,2,3,5,1,4]. 
The answer ""! 3 6"" is valid as p3=3 and p6=4.
In the second test case, the hidden permutation is p=[10,9,8,7,6,5,4,3,2,1].
The answer ""! 5 6"" is valid as p5=6 and p6=5." " x139"
    
2031E "Penchick and Chloe's Trees" "constructive algorithms, data structures, dfs and similar, dp, greedy, math, trees" " 
With just a few hours left until Penchick and Chloe leave for Singapore, they could hardly wait to see the towering trees at the Singapore Botanic Gardens! Attempting to contain their excitement, Penchick crafted a rooted tree to keep Chloe and himself busy.
Penchick has a rooted tree\xe2\x88\x97 consisting of n vertices, numbered from 1 to n, with vertex 1 as the root, and Chloe can select a non-negative integer d to create a perfect binary tree\xe2\x80\xa0 of depth d.
Since Penchick and Chloe are good friends, Chloe wants her tree to be isomorphic\xe2\x80\xa1 to Penchick\'s tree. To meet this condition, Chloe can perform the following operation on her own tree any number of times:
In particular, doing an operation on an edge (u,v) where v is a leaf will delete vertex v without adding any new edges.
Since constructing a perfect binary tree can be time-consuming, Chloe wants to choose the minimum d such that a perfect binary tree of depth d can be made isomorphic to Penchick\'s tree using the above operation. Note that she can\'t change the roots of the trees.
\xe2\x88\x97A tree is a connected graph without cycles.  A rooted tree is a tree where one vertex is special and called the root.  The parent of vertex v is the first vertex on the simple path from v to the root. The root has no parent.  A child of vertex v is any vertex u for which v is the parent.  A leaf is any vertex without children. 
\xe2\x80\xa0A full binary tree is rooted tree, in which each node has 0 or 2 children.  A perfect binary tree is a full binary tree in which every leaf is at the same distance from the root. The depth of such a tree is the distance from the root to a leaf.
\xe2\x80\xa1Two rooted trees, rooted at r1 and r2 respectively, are considered isomorphic if there exists a permutation p of the vertices such that an edge (u,v) exists in the first tree if and only if the edge (pu,pv) exists in the second tree, and pr1=r2.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the number of vertices in Penchick\'s tree.
The second line of each test case contains n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4i\xe2\x88\x921)ï¿½\xe2\x80\x94 the parent of vertex i.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, output a single integer on each line: the minimum depth of Chloe\'s perfect binary tree.
For the first test case, create a perfect binary tree with depth 2.
Consider carrying out the operation on edge AC. Then the edges AC, CF, and CG are removed, and edges AF and AG are added. 
The resulting tree is isomorphic to the tree given in the input. It can be proven that no sequence of operations carried out on a binary tree of depth less than 2 can lead to a tree isomorphic to the tree given in the input. 
In the second test case, the tree is already isomorphic to a perfect binary tree of depth 3." " x1137"
    
2031D "Penchick and Desert Rabbit" "binary search, data structures, dfs and similar, dp, dsu, greedy, two pointers" "Dedicated to pushing himself to his limits, Penchick challenged himself to survive the midday sun in the Arabian Desert!
While trekking along a linear oasis, Penchick spots a desert rabbit preparing to jump along a line of palm trees. There are n trees, each with a height denoted by ai.
The rabbit can jump from the i-th tree to the j-th tree if exactly one of the following conditions is true:
For each i from 1 to n, determine the maximum height among all trees that the rabbit can reach if it starts from the i-th tree.
The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x85105). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of trees.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the height of the trees.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output n integers. The i-th integer should contain the maximum height among all trees that the rabbit can reach if it starts from the i-th tree.
In the first test case, the initial heights of trees are a=[2,3,1,4]. 
In the second test case, the rabbit can jump to the first tree regardless of which tree it starts from.
In the fifth test case, if the rabbit starts from the fifth tree, it can jump to the fourth tree. Then the rabbit can jump to the seventh tree and finally reach the sixth tree. Therefore, the maximum height of the tree that the rabbit can reach is 8." " x4035"
    
2031C "Penchick and BBQ Buns" "constructive algorithms, math, number theory" "Penchick loves two things: square numbers and Hong Kong-style BBQ buns! For his birthday, Kohane wants to combine them with a gift: n BBQ buns arranged from left to right. There are 106 available fillings of BBQ buns, numbered from 1 to 106. To ensure that Penchick would love this gift, Kohane has a few goals:
Help Kohane find a valid way to choose the filling of the buns, or determine if it is impossible to satisfy her goals! If there are multiple solutions, print any of them.
\xe2\x88\x97A positive integer x is a perfect square if there exists a positive integer y such that x=y2. For example, 49 and 1 are perfect squares because 49=72 and 1=12 respectively. On the other hand, 5 is not a perfect square as no integer squared equals 5
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85105). The description of the test cases follows.
The only line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of BBQ buns.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, if no valid choice of fillings exists, output \xe2\x88\x921. Otherwise, output n integers, where the i-th integer represents the filling of the i-th BBQ bun. If there are multiple solutions, print any of them.
In the first test case, the choice of fillings ""1 1 1"" is not allowed because buns 1 and 3 have the same filling, but are distance 2 apart, which is not a perfect square. The choice of fillings ""1 1 2"" is also not allowed as filling 2 is only used once.
In the second test case, the solution is valid because no filling is used exactly once, and any two buns with the same filling are spaced at a distance equal to a perfect square. For example, buns 1 and 10 both have filling 1 and are spaced at a distance of 9=32. Similarly, buns 5 and 9 both have filling 10 and are spaced at a distance of 4=22." " x7623"
    
2031B "Penchick and Satay Sticks" "brute force, greedy, sortings" "Penchick and his friend Kohane are touring Indonesia, and their next stop is in Surabaya!
In the bustling food stalls of Surabaya, Kohane bought n satay sticks and arranged them in a line, with the i-th satay stick having length pi. It is given that p is a permutation\xe2\x88\x97 of length n.
Penchick wants to sort the satay sticks in increasing order of length, so that pi=i for each 1\xe2\x89\xa4i\xe2\x89\xa4n. For fun, they created a rule: they can only swap neighboring satay sticks whose lengths differ by exactly 1. Formally, they can perform the following operation any number of times (including zero):
Determine whether it is possible to sort the permutation p, thus the satay sticks, by performing the above operation.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). 
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85105). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of satay sticks.
The second line of each test case contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the permutation p representing the length of the satay sticks.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output ""YES"" if it is possible to sort permutation p by performing the operation. Otherwise, output ""NO"".
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, we can sort permutation p=[2,1,3,4] by performing an operation on index 1 (|p2\xe2\x88\x92p1|=|1\xe2\x88\x922|=1), resulting in p=[1,2,3,4].
In the second test case, it can be proven that it is impossible to sort permutation p=[4,2,3,1] by performing the operation. Here is an example of a sequence of operations that can be performed on the permutation:
Unfortunately, permutation p remains unsorted after performing the operations." " x11672"
    
2031A "Penchick and Modern Monument" "constructive algorithms, greedy, math" "Amidst skyscrapers in the bustling metropolis of Metro Manila, the newest Noiph mall in the Philippines has just been completed! The construction manager, Penchick, ordered a state-of-the-art monument to be built with n pillars. 
The heights of the monument\'s pillars can be represented as an array h of n positive integers, where hi represents the height of the i-th pillar for all i between 1 and n.
Penchick wants the heights of the pillars to be in non-decreasing order, i.e. hi\xe2\x89\xa4hi+1 for all i between 1 and n\xe2\x88\x921. However, due to confusion, the monument was built such that the heights of the pillars are in non-increasing order instead, i.e. hi\xe2\x89\xa5hi+1 for all i between 1 and n\xe2\x88\x921.
Luckily, Penchick can modify the monument and do the following operation on the pillars as many times as necessary:
Help Penchick determine the minimum number of operations needed to make the heights of the monument\'s pillars non-decreasing.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of pillars.
The second line of each test case contains n integers h1,h2,\xe2\x80\xa6,hn (1\xe2\x89\xa4hi\xe2\x89\xa4n and hi\xe2\x89\xa5hi+1)ï¿½\xe2\x80\x94 the height of the pillars.
Please take note that the given array h is non-increasing.
Note that there are no constraints on the sum of n over all test cases.
For each test case, output a single integer representing the minimum number of operations needed to make the heights of the pillars non-decreasing.
In the first test case, the initial heights of pillars are h=[5,4,3,2,1].
After the operation, the heights of the pillars are h=[2,2,3,4,4], which is non-decreasing. It can be proven that it is not possible for Penchick to make the heights of the pillars non-decreasing in fewer than 4 operations. 
In the second test case, Penchick can make the heights of the pillars non-decreasing by modifying the height of pillar 3 to h3:=2. 
In the third test case, the heights of pillars are already non-decreasing, so no operations are required." " x12797"
    
2030G2 "The Destruction of the Universe (Hard Version)" "combinatorics, math" "This is the hard version of the problem. In this version, n\xe2\x89\xa4106. You can only make hacks if both versions of the problem are solved.
Orangutans are powerful beings\xe2\x80\x94so powerful that they only need 1 unit of time to destroy every vulnerable planet in the universe!
There are n planets in the universe. Each planet has an interval of vulnerability [l,r], during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by 1 unit.
Specifically, suppose the expansion is performed on planet p with interval of vulnerability [lp,rp]. Then, the resulting interval of vulnerability may be either [lp\xe2\x88\x921,rp] or [lp,rp+1].
Given a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.
Orangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo 998244353.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the number of planets in the universe.
The following n lines contain two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the initial interval of vulnerability of the i-th planet.
It is guaranteed that the sum of n does not exceed 106 over all test cases.
For each test case, output an integerï¿½\xe2\x80\x94 the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo 998244353.
In the first testcase, there are seven non-empty subsets of planets we must consider: 
The sum of scores of all non-empty subsets of the first testcase is 0\xe2\x8b\x854+1\xe2\x8b\x851+2\xe2\x8b\x852=5." "3100  x108"
    
2030G1 "The Destruction of the Universe (Easy Version)" "combinatorics, greedy, math" "This is the easy version of the problem. In this version, n\xe2\x89\xa45000. You can only make hacks if both versions of the problem are solved.
Orangutans are powerful beings\xe2\x80\x94so powerful that they only need 1 unit of time to destroy every vulnerable planet in the universe!
There are n planets in the universe. Each planet has an interval of vulnerability [l,r], during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by 1 unit.
Specifically, suppose the expansion is performed on planet p with interval of vulnerability [lp,rp]. Then, the resulting interval of vulnerability may be either [lp\xe2\x88\x921,rp] or [lp,rp+1].
Given a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.
Orangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo 998244353.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of planets in the universe.
The following n lines contain two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the initial interval of vulnerability of the i-th planet.
It is guaranteed that the sum of n does not exceed 5000 over all test cases.
For each test case, output an integerï¿½\xe2\x80\x94 the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo 998244353.
In the first testcase, there are seven non-empty subsets of planets we must consider: 
The sum of scores of all non-empty subsets of the first testcase is 0\xe2\x8b\x854+1\xe2\x8b\x851+2\xe2\x8b\x852=5." "2900  x144"
    
2030F "Orangutan Approved Subarrays" "binary search, data structures, dp, greedy, implementation, two pointers" "Suppose you have an array b. Initially, you also have a set S that contains all distinct elements of b. The array b is called orangutan-approved if it can be emptied by repeatedly performing the following operation: 
You are given an array a of length n and q queries. 
Each query consists of two indices l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n), and you need to determine whether or not the subarray al,al+1,\xe2\x80\xa6,ar is orangutan-approved.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the size of a and the number of queries, respectively.
The following line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the elements of the array a.
The following q lines contain two integers l and rï¿½\xe2\x80\x94 the endpoints of the subarray for each query (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n).
It is guaranteed that the sum of n and q over all test cases does not exceed 2\xe2\x8b\x85105.
For each query, output ""YES"" (without quotes) if the subarray from l to r is orangutan-approved, and ""NO"" (without quotes) otherwise.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yES"", ""yes"" and ""Yes"" will be recognized as a positive response).
In the first query of the first testcase, the answer is YES. 
In the first query of the second testcase, the answer is NO, because it can be shown that the subarray [2,1,2,1] cannot become empty through any sequence of valid operations." "2400  x659"
    
2030E "MEXimize the Score" "combinatorics, data structures, dp, greedy, implementation, math" "Suppose we partition the elements of an array b into any number k of non-empty multisets S1,S2,\xe2\x80\xa6,Sk, where k is an arbitrary positive integer. Define the score of b as the maximum value of MEX(S1)\xe2\x88\x97+MEX(S2)+\xe2\x80\xa6+MEX(Sk) over all possible partitions of b for any integer k.
Envy is given an array a of size n. Since he knows that calculating the score of a is too easy for you, he instead asks you to calculate the sum of scores of all 2n\xe2\x88\x921 non-empty subsequences of a.\xe2\x80\xa0 Since this answer may be large, please output it modulo 998244353.
\xe2\x88\x97MEX of a collection of integers c1,c2,\xe2\x80\xa6,ck is defined as the smallest non-negative integer x that does not occur in the collection c. For example, MEX([0,1,2,2])=3 and MEX([1,2,2])=0
\xe2\x80\xa0A sequence x is a subsequence of a sequence y if x can be obtained from y by deleting several (possibly, zero or all) elements.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai<n)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the answer, modulo 998244353.
In the first testcase, we must consider seven subsequences: 
In the last testcase, all subsequences have a score of 0." "2200  x1281"
    
2030D "QED's Favorite Permutation" "data structures, implementation, sortings" "QED is given a permutation\xe2\x88\x97 p of length n. He also has a string s of length n containing only characters L and R. QED only likes permutations that are sorted in non-decreasing order. To sort p, he can select any of the following operations and perform them any number of times:
He is also given q queries. In each query, he selects an index i and changes si from L to R (or from R to L). Note that the changes are persistent. 
After each query, he asks you if it is possible to sort p in non-decreasing order by performing the aforementioned operations any number of times. Note that before answering each query, the permutation p is reset to its original form.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and q (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x93 the length of the permutation and the number of queries.
The following line contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n, p is a permutation).
The following line contains n characters s1s2\xe2\x80\xa6sn. It is guaranteed that si is either L or R, s1=R, and sn=L.
The following q lines contain an integer i (2\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921), denoting that si is changed from L to R (or from R to L). 
It is guaranteed that the sum of n and q over all test cases does not exceed 2\xe2\x8b\x85105.
For each query, output ""YES"" (without quotes) if it is possible, and ""NO"" (without quotes) otherwise.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yES"", ""yes"" and ""Yes"" will be recognized as a positive response).
In the first testcase, s=RRRLL after the first query. QED may sort p using the following operations:
It can be shown that it is impossible to sort the array after all three updates of the first testcase." "1700  x6125"
    
2030C "A TRUE Battle" "brute force, games, greedy" "Alice and Bob are playing a game. There is a list of n booleans, each of which is either true or false, given as a binary string \xe2\x88\x97 of length n (where 1 represents true, and 0 represents false). Initially, there are no operators between the booleans.
Alice and Bob will take alternate turns placing and or or between the booleans, with Alice going first. Thus, the game will consist of n\xe2\x88\x921 turns since there are n booleans. Alice aims for the final statement to evaluate to true, while Bob aims for it to evaluate to false. Given the list of boolean values, determine whether Alice will win if both players play optimally.
To evaluate the final expression, repeatedly perform the following steps until the statement consists of a single true or false: 
\xe2\x88\x97A binary string is a string that only consists of characters 0 and 1
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the string.
The second line contains a binary string of length n, consisting of characters 0 and 1ï¿½\xe2\x80\x94 the list of boolean values.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each testcase, output ""YES"" (without quotes) if Alice wins, and ""NO"" (without quotes) otherwise.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yES"", ""yes"" and ""Yes"" will be recognized as a positive response).
In the first testcase, Alice can place and between the two booleans. The game ends as there are no other places to place operators, and Alice wins because trueï¿½andï¿½true is true.
In the second testcase, Alice can place or between the middle true and the left false. Bob can place and between the middle true and the right false. The statement falseï¿½orï¿½trueï¿½andï¿½false is false.
Note that these examples may not be the best strategies for either Alice or Bob." "1100  x15500"
    
2030B "Minimise Oneness" "combinatorics, constructive algorithms, games, math" "For an arbitrary binary string t\xe2\x88\x97, let f(t) be the number of non-empty subsequences\xe2\x80\xa0 of t that contain only 0, and let g(t) be the number of non-empty subsequences of t that contain at least one 1. 
Note that for f(t) and for g(t), each subsequence is counted as many times as it appears in t. E.g., f(000)=7,g(100)=4.
We define the oneness of the binary string t to be |f(t)\xe2\x88\x92g(t)|, where for an arbitrary integer z, |z| represents the absolute value of z.
You are given a positive integer n. Find a binary string s of length n such that its oneness is as small as possible. If there are multiple strings, you can print any of them.
\xe2\x88\x97A binary string is a string that only consists of characters 0 and 1.
\xe2\x80\xa0A sequence a is a subsequence of a sequence b if a can be obtained from b by the deletion of several (possibly, zero or all) elements. For example, subsequences of 1011101 are 0, 1, 11111, 0111, but not 000 nor 11100.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of s.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105. 
For each test case, output s on a new line. If multiple answers exist, output any.
In the first test case, for the example output, f(t)=1 because there is one subsequence that contains only 0 (0), and g(t)=0 because there are no subsequences that contain at least one 1. The oneness is |1\xe2\x88\x920|=1. The output 1 is correct as well because its oneness is |0\xe2\x88\x921|=1.
For the example output of the second test case, f(t)=1 because there is one non-empty subsequence that contains only 0, and g(t)=2 because there are two non-empty subsequences that contain at least one 1 (01 and 1). The oneness is thus |1\xe2\x88\x922|=1. It can be shown that 1 is the minimum possible value of its oneness over all possible binary strings of size 2." "800  x19822"
    
2030A "A Gift From Orangutan" "constructive algorithms, greedy, math, sortings" "While exploring the jungle, you have bumped into a rare orangutan with a bow tie! You shake hands with the orangutan and offer him some food and water. In return...
The orangutan has gifted you an array a of length n. Using a, you will construct two arrays b and c, both containing n elements, in the following manner:
Define the score of a as \xe2\x88\x91ni=1ci\xe2\x88\x92bi (i.e. the sum of ci\xe2\x88\x92bi over all 1\xe2\x89\xa4i\xe2\x89\xa4n). Before you calculate the score, you can shuffle the elements of a however you want.
Find the maximum score that you can get if you shuffle the elements of a optimally.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of elements in a.
The following line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 1000.
For each test case, output the maximum score that you can get.
In the first test case, there is no other way to rearrange a. So, b=[69] and c=[69]. The only possible score is 69\xe2\x88\x9269=0.
In the second test case, you can rearrange a as [7,5,6]. Here, b=[7,5,5] and c=[7,7,7]. The score in this case is (7\xe2\x88\x927)+(7\xe2\x88\x925)+(7\xe2\x88\x925)=4. It can be shown this is the maximum possible score." "800  x23138"
    
2029I "Variance Challenge" "flows, graphs, greedy" "Kevin has recently learned the definition of variance. For an array a of length n, the variance of a is defined as follows:
Now, Kevin gives you an array a consisting of n integers, as well as an integer k. You can perform the following operation on a:
For each 1\xe2\x89\xa4p\xe2\x89\xa4m, you have to find the minimum possible variance of a after exactly p operations are performed, independently for each p.
For simplicity, you only need to output the answers multiplied by n2. It can be proven that the results are always integers.
Each test contains multiple test cases. The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains three integers n, m, and k (1\xe2\x89\xa4n,m\xe2\x89\xa45000, n\xe2\x8b\x85m\xe2\x89\xa42\xe2\x8b\x85104, 1\xe2\x89\xa4k\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a, the maximum number of operations, and the number you add to ai each time, respectively.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n\xe2\x8b\x85m over all tests does not exceed 2\xe2\x8b\x85104.
For each test case, output m integers in a single line, the p-th integer denoting the minimum possible variance of a when exactly p operations are performed, multiplied by n2.
In the first test case: 
In the second test case, some possible optimal choices are:
In the third test case, some possible optimal choices are:
In the eighth test case, the optimal choice for all p is to perform the operation on the whole array p times." "3400  x21"
    
2029H "Message Spread" "bitmasks, brute force, combinatorics, dp" "Given is an undirected graph with n vertices and m edges. Each edge connects two vertices (u,v) and has a probability of pq of appearing each day.
Initially, vertex 1 has a message. At the end of the day, a vertex has a message if and only if itself or at least one of the vertices adjacent to it had the message the day before. Note that each day, each edge chooses its appearance independently.
Calculate the expected number of days before all the vertices have the message, modulo 998244353.
The first line contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa421, n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa4n(n\xe2\x88\x921)2).
Then m lines follow, each containing four integers u, v, p, and q (1\xe2\x89\xa4u\xe2\x89\xa0v\xe2\x89\xa4n, 1\xe2\x89\xa4p<q<998244353, gcd(p,q)=1)ï¿½\xe2\x80\x94 there is an undirected edge between u and v, and it has a probability of appearance of pq each day. 
It is guaranteed that there are no self-loops or multiple-edges in the graph and that the graph is connected if all of the edges appear.
Additional constraint in the input: Let gi,j be the probability of appearance of the edge between i and j (gi,j=0 if there is no edge between i and j). It is guaranteed that for any S\xe2\x8a\x86{1,2,\xe2\x80\xa6,n} (|S|\xe2\x89\xa51), \xe2\x88\x8fi\xe2\x88\x88S(\xe2\x88\x8fj\xe2\x88\x88{1,2,\xe2\x80\xa6,n}\xe2\x88\x96S(1\xe2\x88\x92gi,j))\xe2\x89\xa21(mod998244353).
Print a single integer in the only line of the outputï¿½\xe2\x80\x94 the expected number of days, modulo 998244353.
Formally, let M=998244353. It can be shown that the exact answer can be expressed as an irreducible fraction pq, where p and q are integers and q\xe2\x89\xa20(modM). Output the integer equal to p\xe2\x8b\x85q\xe2\x88\x921modM. In other words, output such an integer x that 0\xe2\x89\xa4x<M and x\xe2\x8b\x85q\xe2\x89\xa1p(modM). 
In the first test, the answer is equal to the expected number of days before the only edge in the graph first appears, and that is 10.1=10.
In the second test, the answer is equal to 209 before it is taken modulo 998244353.
In the third test, the only vertex already has the message, so the answer is 0." "3500  x30"
    
2029G "Balanced Problem" "data structures, dp" "There is an array a consisting of n integers. Initially, all elements of a are equal to 0.
Kevin can perform several operations on the array. Each operation is one of the following two types:
In the country of KDOI, people think that the integer v is balanced. Thus, Iris gives Kevin an array c consisting of n integers and defines the beauty of the array a as follows:
Kevin wants to maximize the beauty of a after all the operations. However, he had already performed m operations when he was sleepy. Now, he can perform an arbitrary number (possibly zero) of new operations.
You have to help Kevin find the maximum possible beauty if he optimally performs the new operations.
However, to make sure that you are not just rolling the dice, Kevin gives you an integer V, and you need to solve the problem for each 1\xe2\x89\xa4v\xe2\x89\xa4V.
Each test contains multiple test cases. The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains three integers n, m, and V (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4V\xe2\x89\xa42000)ï¿½\xe2\x80\x94 the length of the array a, the number of initial operations, and the number that Kevin gives you.
The second line contains n integers c1,c2,\xe2\x80\xa6,cn (1\xe2\x89\xa4ci\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements in the array c.
Then m lines follow, the i-th line containing a character op and an integer x (op=L or R, 1\xe2\x89\xa4x\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the type of the i-th operation and the selected index.
It is guaranteed that:
For each test case, output V integers in a single line, the i-th integer denoting the maximum possible beauty after Kevin performs some new operations when v=i.
In the first test case, the array a changes as follows for the initial operations: [0,0,0]Lï¿½3\xe2\x86\x92[1,1,1]Rï¿½3\xe2\x86\x92[1,1,2]Lï¿½1\xe2\x86\x92[2,1,2].
In the second test case, for both v=1 and v=2, it is optimal to not perform any new operations." "3000  x110"
    
2029F "Palindrome Everywhere" "constructive algorithms, graphs, greedy" "You are given a cycle with n vertices numbered from 0 to n\xe2\x88\x921. For each 0\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921, there is an undirected edge between vertex i and vertex ((i+1)modn) with the color ci (ci=R or B).
Determine whether the following condition holds for every pair of vertices (i,j) (0\xe2\x89\xa4i<j\xe2\x89\xa4n\xe2\x88\x921):
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains an integer n (3\xe2\x89\xa4n\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the number of vertices in the cycle.
The second line contains a string c of length n (ci=R or B)ï¿½\xe2\x80\x94 the color of each edge.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, print ""YES"" (without quotes) if there is a palindrome route between any pair of nodes, and ""NO"" (without quotes) otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, it is easy to show that there is a palindrome route between any two vertices.
In the second test case, for any two vertices, there exists a palindrome route with only red edges.
In the third test case, the cycle is as follows: 0R\xe2\x9f\xb71B\xe2\x9f\xb72B\xe2\x9f\xb73R\xe2\x9f\xb74B\xe2\x9f\xb70. Take (i,j)=(0,3) as an example, then 0R\xe2\x9f\xb61B\xe2\x9f\xb62B\xe2\x9f\xb63R\xe2\x9f\xb64B\xe2\x9f\xb60B\xe2\x9f\xb64R\xe2\x9f\xb63 is a palindrome route. Thus, the condition holds for (i,j)=(0,3).
In the fourth test case, when (i,j)=(0,2), there does not exist a palindrome route." "2500  x577"
    
2029E "Common Generator" "brute force, constructive algorithms, math, number theory" "For two integers x and y (x,y\xe2\x89\xa52), we will say that x is a generator of y if and only if x can be transformed to y by performing the following operation some number of times (possibly zero):
For example, 
Now, Kevin gives you an array a consisting of n pairwise distinct integers (ai\xe2\x89\xa52).
You have to find an integer x\xe2\x89\xa52 such that for each 1\xe2\x89\xa4i\xe2\x89\xa4n, x is a generator of ai, or determine that such an integer does not exist.
Each test contains multiple test cases. The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (2\xe2\x89\xa4ai\xe2\x89\xa44\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the elements in the array a. It is guaranteed that the elements are pairwise distinct.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integer xï¿½\xe2\x80\x94 the integer you found. Print \xe2\x88\x921 if there does not exist a valid x.
If there are multiple answers, you may output any of them.
In the first test case, for x=2:
In the second test case, it can be proven that it is impossible to find a common generator of the four integers." "2100  x2230"
    
2029D "Cool Graph" "constructive algorithms, data structures, dfs and similar, dsu, graphs, greedy, trees" "You are given an undirected graph with n vertices and m edges.
You can perform the following operation at most 2\xe2\x8b\x85max(n,m) times:
A graph is called cool if and only if one of the following holds:
You have to make the graph cool by performing the above operations. Note that you can use at most 2\xe2\x8b\x85max(n,m) operations.
It can be shown that there always exists at least one solution.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains two integers n and m (3\xe2\x89\xa4n\xe2\x89\xa4105, 0\xe2\x89\xa4m\xe2\x89\xa4min(n(n\xe2\x88\x921)2,2\xe2\x8b\x85105))ï¿½\xe2\x80\x94 the number of vertices and the number of edges.
Then m lines follow, the i-th line contains two integers ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the two nodes that the i-th edge connects.
It is guaranteed that the sum of n over all test cases does not exceed 105, and the sum of m over all test cases does not exceed 2\xe2\x8b\x85105.
It is guaranteed that there are no self-loops or multiple-edges in the given graph.
For each test case, in the first line output an integer k (0\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85max(n,m))ï¿½\xe2\x80\x94 the number of operations.
Then output k lines, the i-th line containing three distinct integers a, b, and c (1\xe2\x89\xa4a,b,c\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the three integers you choose in the i-th operation.
If there are multiple solutions, you can output any of them.
In the first test case, the graph is already cool because there are no edges.
In the second test case, after performing the only operation, the graph becomes a tree, so it is cool.
In the third test case, the graph is already cool because it is a tree.
In the fourth test case, after performing the only operation, the graph has no edges, so it is cool.
In the fifth test case:
Note that after the first operation, the graph has already become cool, and there are two extra operations. As the graph is still cool after the two extra operations, this is a valid answer." "1900  x2452"
    
2029C "New Rating" "binary search, data structures, dp, greedy" "Kevin used to be a participant of Codeforces. Recently, the KDOI Team has developed a new Online Judge called Forcescode. 
Kevin has participated in n contests on Forcescode. In the i-th contest, his performance rating is ai.
Now he has hacked into the backend of Forcescode and will select an interval [l,r] (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n), then skip all of the contests in this interval. After that, his rating will be recalculated in the following way:
You have to help Kevin to find his maximum possible rating after the recalculation if he chooses the interval [l,r] optimally. Note that Kevin has to skip at least one contest.
Each test contains multiple test cases. The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of contests.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the performance ratings in the contests.
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum possible rating after the recalculation if Kevin chooses the interval optimally.
In the first test case, Kevin must skip at least one contest. If he chooses any interval of length 1, his rating after the recalculation will be equal to 5.
In the second test case, Kevin\'s optimal choice is to select the interval [3,5]. During the recalculation, his rating changes as follows:
0a1=1\xe2\x86\x921a2=2\xe2\x86\x922skip\xe2\x86\x922skip\xe2\x86\x922skip\xe2\x86\x922a6=3\xe2\x86\x923a7=4\xe2\x86\x924
In the third test case, Kevin must skip the only contest, so his rating will remain at the initial value of 0.
In the fourth test case, Kevin\'s optimal choice is to select the interval [7,9]. During the recalculation, his rating changes as follows:
0a1=9\xe2\x86\x921a2=9\xe2\x86\x922a3=8\xe2\x86\x923a4=2\xe2\x86\x922a5=4\xe2\x86\x923a6=4\xe2\x86\x924skip\xe2\x86\x924skip\xe2\x86\x924skip\xe2\x86\x924
In the fifth test case, Kevin\'s optimal choice is to select the interval [5,9]." "1700  x4515"
    
2029B Replacement "constructive algorithms, games, strings" "You have a binary string\xe2\x88\x97 s of length n, and Iris gives you another binary string r of length n\xe2\x88\x921.
Iris is going to play a game with you. During the game, you will perform n\xe2\x88\x921 operations on s. In the i-th operation (1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921):
If all the n\xe2\x88\x921 operations are performed successfully, you win.
Determine whether it is possible for you to win this game.
\xe2\x88\x97A binary string is a string where each character is either 0 or 1.
Each test contains multiple test cases. The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of s.
The second line contains the binary string s of length n (si=0 or 1).
The third line contains the binary string r of length n\xe2\x88\x921 (ri=0 or 1).
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, print ""YES"" (without quotes) if you can win the game, and ""NO"" (without quotes) otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, you cannot perform the first operation. Thus, you lose the game.
In the second test case, you can choose k=1 in the only operation, and after that, s becomes equal to 1. Thus, you win the game.
In the third test case, you can perform the following operations: 110_1r1=0\xe2\x86\x92101_r2=0\xe2\x86\x9210_r3=1\xe2\x86\x921." "1100  x7844"
    
2029A Set "greedy, math" "You are given a positive integer k and a set S of all integers from l to r (inclusive).
You can perform the following two-step operation any number of times (possibly zero):
Find the maximum possible number of operations that can be performed.
Each test contains multiple test cases. The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The only line of each test case contains three integers l, r, and k (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4109, 1\xe2\x89\xa4k\xe2\x89\xa4r\xe2\x88\x92l+1)ï¿½\xe2\x80\x94 the minimum integer in S, the maximum integer in S, and the parameter k.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum possible number of operations that can be performed.
In the first test case, initially, S={3,4,5,6,7,8,9}. One possible optimal sequence of operations is: 
In the second test case, initially, S={4,5,6,7,8,9}. One possible optimal sequence of operations is: 
In the third test case, initially, S={7,8,9}. For each x in S, no multiple of x other than x itself can be found in S. Since k=2, you can perform no operations.
In the fourth test case, initially, S={2,3,4,5,6,7,8,9,10}. One possible optimal sequence of operations is: " "800  x10505"
    
2028F "Alice's Adventures in Addition" "bitmasks, brute force, dp, implementation" "Note that the memory limit is unusual.
The Cheshire Cat has a riddle for Alice: given n integers a1,a2,\xe2\x80\xa6,an and a target m, is there a way to insert + and \xc3\x97 into the circles of the expression a1\xe2\x88\x98a2\xe2\x88\x98\xe2\x8b\xaf\xe2\x88\x98an=m to make it true? We follow the usual order of operations: \xc3\x97 is done before +.
Although Alice is excellent at chess, she is not good at math. Please help her so she can find a way out of Wonderland!
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n,m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4m\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of integers and the target, respectively.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the elements of the array a.
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output ""YES"" without quotes if it is possible to get the target by inserting + or \xc3\x97 and ""NO"" otherwise.
You can output each letter in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
Possible solutions for the first four test cases are shown below. 2\xc3\x971+1\xc3\x971\xc3\x972=42\xc3\x971+1+1\xc3\x972=52\xc3\x971+1+1+2=62+1+1+1+2=7 It is impossible to get a result of 8 in the fifth test case." "2700  x236"
    
2028E "Alice's Adventures in the Rabbit Hole" "combinatorics, dfs and similar, dp, games, greedy, math, probabilities, trees" "Alice is at the bottom of the rabbit hole! The rabbit hole can be modeled as a tree\xe2\x88\x97 which has an exit at vertex 1, and Alice starts at some vertex v. She wants to get out of the hole, but unfortunately, the Queen of Hearts has ordered her execution. 
Each minute, a fair coin is flipped. If it lands heads, Alice gets to move to an adjacent vertex of her current location, and otherwise, the Queen of Hearts gets to pull Alice to an adjacent vertex of the Queen\'s choosing. If Alice ever ends up on any of the non-root leaves\xe2\x80\xa0 of the tree, Alice loses.
Assuming both of them move optimally, compute the probability that Alice manages to escape for every single starting vertex 1\xe2\x89\xa4v\xe2\x89\xa4n. Since these probabilities can be very small, output them modulo 998244353.
Formally, let M=998244353. It can be shown that the exact answer can be expressed as an irreducible fraction pq, where p and q are integers and q\xe2\x89\xa20(modM). Output the integer equal to p\xe2\x8b\x85q\xe2\x88\x921modM. In other words, output such an integer x that 0\xe2\x89\xa4x<M and x\xe2\x8b\x85q\xe2\x89\xa1p(modM). 
\xe2\x88\x97A tree is a connected simple graph which has n vertices and n\xe2\x88\x921 edges.
\xe2\x80\xa0A leaf is a vertex that is connected to exactly one edge.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of vertices in the tree.
The i-th of the next n\xe2\x88\x921 lines contains two integers xi and yi (1\xe2\x89\xa4xi,yi\xe2\x89\xa4n and xi\xe2\x89\xa0yi) \xe2\x80\x94 the edges of the tree. It is guaranteed that the given edges form a tree.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output n integers on one line \xe2\x80\x94 the probabilities of Alice escaping starting from vertex 1,2,\xe2\x80\xa6,n. Since these probabilities can be very small, output them modulo 998244353.
For the first test case: " "2300  x983"
    
2028D "Alice's Adventures in Cards" "constructive algorithms, data structures, dp, graphs, greedy, implementation, ternary search" "Alice is playing cards with the Queen of Hearts, King of Hearts, and Jack of Hearts. There are n different types of cards in their card game. Alice currently has a card of type 1 and needs a card of type n to escape Wonderland. The other players have one of each kind of card.
In this card game, Alice can trade cards with the three other players. Each player has different preferences for the n types of cards, which can be described by permutations\xe2\x88\x97 q, k, and j for the Queen, King, and Jack, respectively. 
A player values card a more than card b if for their permutation p, pa>pb. Then, this player is willing to trade card b to Alice in exchange for card a. Alice\'s preferences are straightforward: she values card a more than card b if a>b, and she will also only trade according to these preferences.
Determine if Alice can trade up from card 1 to card n subject to these preferences, and if it is possible, give a possible set of trades to do it.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains an integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of card types.
The next three lines contain the preferences of the Queen, King, and Jack respectively. Each of these lines contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 a permutation corresponding to the player\'s preferences.
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, on the first line output a single string ""YES"" or ""NO"" (without the quotes) denoting whether Alice can trade up to card n.
If the first line was ""YES"", then on the next line output k \xe2\x80\x94 the number of trades Alice will make. On the next k lines output space separated a character c\xe2\x88\x88{q,k,j} and integer x, denoting that Alice trades with player c to get card x. It must be the case that on the k\'th line, x=n. If there are multiple solutions, print any of them.
You can output this answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses. The same goes for the character c denoting the player in the trade (Q,K,J will all be accepted alongside their lowercase variants).
In the first testcase, Alice can trade with the King to get card 2. She can then trade with the Queen to get card 3.
In the second testcase, even though Alice can trade with the Queen to get card 3, with the King to get card 2, and then with the Jack to get card 4, this is not a valid solution since it doesn\'t respect Alice\'s preferences. We can show that there is no way for Alice to get to card 4." "2000  x2051"
    
2028C "Alice's Adventures in Cutting Cake" "binary search, dp, greedy, two pointers" "Alice is at the Mad Hatter\'s tea party! There is a long sheet cake made up of n sections with tastiness values a1,a2,\xe2\x80\xa6,an. There are m creatures at the tea party, excluding Alice. 
Alice will cut the cake into m+1 pieces. Formally, she will partition the cake into m+1 subarrays, where each subarray consists of some number of adjacent sections. The tastiness of a piece is the sum of tastiness of its sections. Afterwards, she will divvy these m+1 pieces up among the m creatures and herself (her piece can be empty). However, each of the m creatures will only be happy when the tastiness of its piece is v or more.
Alice wants to make sure every creature is happy. Limited by this condition, she also wants to maximize the tastiness of her own piece. Can you help Alice find the maximum tastiness her piece can have? If there is no way to make sure every creature is happy, output \xe2\x88\x921.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains three integers n,m,v (1\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4v\xe2\x89\xa4109) \xe2\x80\x94 the number of sections, the number of creatures, and the creatures\' minimum requirement for tastiness, respectively.
The next line contains n space separated integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the tastinesses of the sections.
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the maximum tastiness Alice can achieve for her piece, or \xe2\x88\x921 if there is no way to make sure every creature is happy.
For the first test case, Alice can give the first and second section as their own pieces, and then take the remaining 10+1+1+10=22 tastiness for herself. We can show that she cannot do any better.
For the second test case, Alice could give the first and second section as one piece, and the sixth section as one piece. She can then take the remaining 10+1+1=12 tastiness for herself. We can show that she cannot do any better.
For the seventh test case, Alice cannot give each creature a piece of at least 12 tastiness." "1600  x5283"
    
2028B "Alice's Adventures in Permuting" "binary search, implementation, math" "Alice mixed up the words transmutation and permutation! She has an array a specified via three integers n, b, c: the array a has length n and is given via ai=b\xe2\x8b\x85(i\xe2\x88\x921)+c for 1\xe2\x89\xa4i\xe2\x89\xa4n. For example, if n=3, b=2, and c=1, then a=[2\xe2\x8b\x850+1,2\xe2\x8b\x851+1,2\xe2\x8b\x852+1]=[1,3,5].
Now, Alice really enjoys permutations of [0,\xe2\x80\xa6,n\xe2\x88\x921]\xe2\x88\x97 and would like to transform a into a permutation. In one operation, Alice replaces the maximum element of a with the MEX\xe2\x80\xa0 of a. If there are multiple maximum elements in a, Alice chooses the leftmost one to replace.
Can you help Alice figure out how many operations she has to do for a to become a permutation for the first time? If it is impossible, you should report it.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 0 to n\xe2\x88\x921 in arbitrary order. Please note, this is slightly different from the usual definition of a permutation. For example, [1,2,0,4,3] is a permutation, but [0,1,1] is not a permutation (1 appears twice in the array), and [0,2,3] is also not a permutation (n=3 but there is 3 in the array).
\xe2\x80\xa0The MEX of an array is the smallest non-negative integer that does not belong to the array. For example, the MEX of [0,3,1,3] is 2 and the MEX of [5] is 0.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The only line of each test case contains three integers n, b, c (1\xe2\x89\xa4n\xe2\x89\xa41018; 0\xe2\x89\xa4b, c\xe2\x89\xa41018) \xe2\x80\x94 the parameters of the array.
For each test case, if the array can never become a permutation, output \xe2\x88\x921. Otherwise, output the minimum number of operations for the array to become a permutation.
In the first test case, the array is already [0,1,\xe2\x80\xa6,9], so no operations are required.
In the third test case, the starting array is [1,3,5,\xe2\x80\xa6,199]. After the first operation, the 199 gets transformed into a 0. In the second operation, the 197 gets transformed into a 2. If we continue this, it will take exactly 50 operations to get the array [0,1,2,3,\xe2\x80\xa6,99].
In the fourth test case, two operations are needed: [1,1,1]\xe2\x86\x92[0,1,1]\xe2\x86\x92[0,2,1].
In the fifth test case, the process is [0,0,0]\xe2\x86\x92[1,0,0]\xe2\x86\x92[2,0,0]\xe2\x86\x92[1,0,0]\xe2\x86\x92[2,0,0]. This process repeats forever, so the array is never a permutation and the answer is \xe2\x88\x921." "1400  x7828"
    
2028A "Alice's Adventures in ''Chess''" "brute force, implementation, math" "Alice is trying to meet up with the Red Queen in the countryside! Right now, Alice is at position (0,0), and the Red Queen is at position (a,b). Alice can only move in the four cardinal directions (north, east, south, west). 
More formally, if Alice is at the point (x,y), she will do one of the following: 
Alice\'s movements are predetermined. She has a string s representing a sequence of moves that she performs from left to right. Once she reaches the end of the sequence, she repeats the same pattern of moves forever.
Can you help Alice figure out if she will ever meet the Red Queen?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains three integers n, a, b (1\xe2\x89\xa4n, a, b\xe2\x89\xa410)ï¿½\xe2\x80\x94 the length of the string and the initial coordinates of the Red Queen.
The second line contains a string s of length n consisting only of the characters N, E, S, or W.
For each test case, output a single string ""YES"" or ""NO"" (without the quotes) denoting whether Alice will eventually meet the Red Queen.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, Alice follows the path (0,0)\xe2\x86\x92N(0,1)\xe2\x86\x92E(1,1)\xe2\x86\x92N(1,2)\xe2\x86\x92E(2,2).
In the second test case, Alice can never reach the Red Queen." "900  x12892"
    
2.03E+05 "Bit Game (Hard Version)" "bitmasks, dp, math" "This is the hard version of this problem. The only difference is that you need to output the number of choices of games where Bob wins in this version, where the number of stones in each pile are not fixed. You must solve both versions to be able to hack.
Alice and Bob are playing a familiar game where they take turns removing stones from n piles. Initially, there are xi stones in the i-th pile, and it has an associated value ai. A player can take d stones away from the i-th pile if and only if both of the following conditions are met: 
The player who cannot make a move loses, and Alice goes first.
You\'re given the ai values of each pile, but the number of stones in the i-th pile has not been determined yet. For the i-th pile, xi can be any integer between 1 and bi, inclusive. That is, you can choose an array x1,x2,\xe2\x80\xa6,xn such that the condition 1\xe2\x89\xa4xi\xe2\x89\xa4bi is satisfied for all piles. 
Your task is to count the number of games where Bob wins if both players play optimally. Two games are considered different if the number of stones in any pile is different, i.e., the arrays of x differ in at least one position.
Since the answer can be very large, please output the result modulo 109+7.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains n (1\xe2\x89\xa4n\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of piles.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai<230).
The third line of each test case contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi<230).
It is guaranteed that the sum of n over all test cases does not exceed 104.
Output a single integer, the number of games where Bob wins, modulo 109+7.
In the first test case, no matter which values of x2 and x3 we choose, the second and third piles will always be chosen exactly once before no more stones can be taken from them. If x1=2, then no stones can be taken from it, so Bob will make the last move. If x1=1 or x1=3, then exactly one move can be made on that pile, so Alice will make the last move. So Bob wins when x=[2,1,1] or x=[2,1,2] or x=[2,2,1] or x=[2,2,2].
In the second test case, Bob wins when x1=14 or x1=30 by removing 14\xe2\x88\x92k stones, where k is the number of stones Alice removes on her turn. Bob also wins when x1=16 or x1=32 since Alice does not have any moves to begin with." "3100  x46"
    
2.03E+04 "Bit Game (Easy Version)" "bitmasks, brute force, games, math" "This is the easy version of this problem. The only difference is that you need to output the winner of the game in this version, and the number of stones in each pile are fixed. You must solve both versions to be able to hack.
Alice and Bob are playing a familiar game where they take turns removing stones from n piles. Initially, there are xi stones in the i-th pile, and it has an associated value ai. A player can take d stones away from the i-th pile if and only if both of the following conditions are met: 
The player who cannot make a move loses, and Alice goes first.
You\'re given the ai and xi values for each pile, please determine who will win the game if both players play optimally.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains n (1\xe2\x89\xa4n\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of piles.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai<230).
The third line of each test case contains n integers x1,x2,\xe2\x80\xa6,xn (1\xe2\x89\xa4xi<230).
It is guaranteed that the sum of n over all test cases does not exceed 104.
Print a single line with the winner\'s name. If Alice wins, print ""Alice"", otherwise print ""Bob"" (without quotes).
In the first test case, neither player can take any stones from the first pile since there is no value of d satisfying the conditions. For the second pile, to begin with, Alice can remove between 1 and 6 stones. No matter which move Alice performs, Bob can remove the rest of the stones on his turn. After Bob\'s move, there are no more moves that Alice can perform, so Bob wins.
In the second test case, here is one example of how the game might go. Alice moves first, and she decides to remove from the first pile. She cannot take 17 stones, because 17>10, which fails the first condition. She cannot take 10 stones, because 25&10=8 which fails the second condition. One option is to take 9 stones; now the pile has 16 stones left. On Bob\'s turn he decides to take stones from the second pile; the only option here is to take all 4. Now, no more stones can be taken from either of the first two piles, so Alice must take some stones from the last pile. She decides to take 12 stones, and Bob then follows by taking the last 2 stones on that pile. Since Alice now has no legal moves left, Bob wins. It can be shown that no matter which strategy Alice follows, Bob will always be able to win if he plays optimally." "2800  x125"
    
2027D2 "The Endspeaker (Hard Version)" "binary search, data structures, dp, greedy, implementation, two pointers" "This is the hard version of this problem. The only difference is that you need to also output the number of optimal sequences in this version. You must solve both versions to be able to hack.
You\'re given an array a of length n, and an array b of length m (bi>bi+1 for all 1\xe2\x89\xa4i<m). Initially, the value of k is 1. Your aim is to make the array a empty by performing one of these two operations repeatedly:
You need to minimize the total cost of the operations to make array a empty. If it\'s impossible to do this through any sequence of operations, output \xe2\x88\x921. Otherwise, output the minimum total cost of the operations, and the number of sequences of operations which yield this minimum cost modulo 109+7. 
Two sequences of operations are considered different if you choose a different type of operation at any step, or the size of the removed prefix is different at any step.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa43\xe2\x8b\x85105, 1\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa43\xe2\x8b\x85105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
The third line of each test case contains m integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4109).
It is also guaranteed that bi>bi+1 for all 1\xe2\x89\xa4i<m.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, if it\'s possible to make a empty, then output two integers. The first should be the minimum total cost of the operations, and the second should be the number of sequences of operations which achieve this minimum cost, modulo 109+7.
If there is no possible sequence of operations which makes a empty, then output a single integer \xe2\x88\x921.
In the first test case, there are 3 optimal sequences of operations which yield a total cost of 1:
In the second test case, it\'s impossible to remove any prefix of the array since a1>b1, so array a cannot be made empty by any sequence of operations." "2200  x1245"
    
2027D1 "The Endspeaker (Easy Version)" "binary search, dp, graphs, greedy, implementation, two pointers" "This is the easy version of this problem. The only difference is that you only need to output the minimum total cost of operations in this version. You must solve both versions to be able to hack.
You\'re given an array a of length n, and an array b of length m (bi>bi+1 for all 1\xe2\x89\xa4i<m). Initially, the value of k is 1. Your aim is to make the array a empty by performing one of these two operations repeatedly:
You need to minimize the total cost of the operations to make array a empty. If it\'s impossible to do this through any sequence of operations, output \xe2\x88\x921. Otherwise, output the minimum total cost of the operations.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa43\xe2\x8b\x85105, 1\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa43\xe2\x8b\x85105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
The third line of each test case contains m integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4109).
It is also guaranteed that bi>bi+1 for all 1\xe2\x89\xa4i<m.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, if it\'s possible to make a empty, then output the minimum total cost of the operations.
If there is no possible sequence of operations which makes a empty, then output a single integer \xe2\x88\x921.
In the first test case, one optimal sequence of operations which yields a total cost of 1 is as follows:
In the second test case, it\'s impossible to remove any prefix of the array since a1>b1, so array a cannot be made empty by any sequence of operations." "1700  x4543"
    
2027C "Add Zeros" "brute force, data structures, dfs and similar, dp, graphs, greedy" "You\'re given an array a initially containing n integers. In one operation, you must do the following:
After performing this operation as many times as you want, what is the maximum possible length of the array a?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41012).
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum possible length of a after performing some sequence of operations.
In the first test case, we can first choose i=4, since a4=5+1\xe2\x88\x924=2. After this, the array becomes [2,4,6,2,5,0,0,0]. We can then choose i=3 since a3=8+1\xe2\x88\x923=6. After this, the array becomes [2,4,6,2,5,0,0,0,0,0], which has a length of 10. It can be shown that no sequence of operations will make the final array longer.
In the second test case, we can choose i=2, then i=3, then i=4. The final array will be [5,4,4,5,1,0,0,0,0,0,0], with a length of 11." "1500  x8611"
    
2027B "Stalin Sort" "brute force, greedy" "Stalin Sort is a humorous sorting algorithm designed to eliminate elements which are out of place instead of bothering to sort them properly, lending itself to an O(n) time complexity.
It goes as follows: starting from the second element in the array, if it is strictly smaller than the previous element (ignoring those which have already been deleted), then delete it. Continue iterating through the array until it is sorted in non-decreasing order. For example, the array [1,4,2,3,6,5,5,7,7] becomes [1,4,6,7,7] after a Stalin Sort.
We define an array as vulnerable if you can sort it in non-increasing order by repeatedly applying a Stalin Sort to any of its subarrays\xe2\x88\x97, as many times as is needed.
Given an array a of n integers, determine the minimum number of integers which must be removed from the array to make it vulnerable.
\xe2\x88\x97An array a is a subarray of an array b if a can be obtained from b by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. 
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases. This is followed by descriptions of the test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42000)ï¿½\xe2\x80\x94 the size of the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
It is guaranteed that the sum of n over all test cases does not exceed 2000.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of integers which must be removed from the array to make it vulnerable.
In the first test case, the optimal answer is to remove the numbers 3 and 9. Then we are left with a=[6,4,2,5,2]. To show this array is vulnerable, we can first apply a Stalin Sort on the subarray [4,2,5] to get a=[6,4,5,2] and then apply a Stalin Sort on the subarray [6,4,5] to get a=[6,2], which is non-increasing.
In the second test case, the array is already non-increasing, so we don\'t have to remove any integers." "1100  x13285"
    
2027A "Rectangle Arrangement" "geometry, implementation, math" "You are coloring an infinite square grid, in which all cells are initially white. To do this, you are given n stamps. Each stamp is a rectangle of width wi and height hi.
You will use each stamp exactly once to color a rectangle of the same size as the stamp on the grid in black. You cannot rotate the stamp, and for each cell, the stamp must either cover it fully or not cover it at all. You can use the stamp at any position on the grid, even if some or all of the cells covered by the stamping area are already black.
What is the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100).
The i-th of the next n lines contains two integers wi and hi (1\xe2\x89\xa4wi,hi\xe2\x89\xa4100).
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum sum of the perimeters of the connected regions of black squares you can obtain after all the stamps have been used.
In the first test case, the stamps can be used as shown on the left. Each stamp is highlighted in its own color for clarity.
After all these stamps are used, there is one black region (as shown on the right), and its perimeter is 20. It can be shown that there is no way of using the stamps that yields a lower total perimeter.
In the second test case, the second and third stamps can be used entirely inside the first one, so the minimum perimeter is equal to 8." "800  x18125"
    
2026F "Bermart Ice Cream" "data structures, dfs and similar, divide and conquer, dp, implementation, trees" "In the Bermart chain of stores, a variety of ice cream is sold. Each type of ice cream has two parameters: price and tastiness.
Initially, there is one store numbered 1, which sells nothing. You have to process q queries of the following types: 
The first line contains a single integer q (1\xe2\x89\xa4q\xe2\x89\xa43\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of queries.
Each of the following q lines contains a query in the format described in the statement: 
Additional constraints on the input data: 
For each query of type 4, output a single integerï¿½\xe2\x80\x94 for store x, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed p (each type can be used in the subset no more than once)." "2700  x153"
    
2026E "Best Subsequence" "bitmasks, dfs and similar, flows, graph matchings, graphs" "Given an integer array a of size n.
Let\'s define the value of the array as its size minus the number of set bits in the bitwise OR of all elements of the array.
For example, for the array [1,0,1,2], the bitwise OR is 3 (which contains 2 set bits), and the value of the array is 4\xe2\x88\x922=2.
Your task is to calculate the maximum possible value of some subsequence of the given array.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai<260).
For each test case, print the maximum possible value of some subsequence of the given array." "2500  x1057"
    
2026D "Sums of Segments" "binary search, data structures, dp, implementation, math" "You are given a sequence of integers [a1,a2,\xe2\x80\xa6,an]. Let s(l,r) be the sum of elements from al to ar (i.\xe2\x80\x89e. s(l,r)=r\xe2\x88\x91i=lai).
Let\'s construct another sequence b of size n(n+1)2 as follows: b=[s(1,1),s(1,2),\xe2\x80\xa6,s(1,n),s(2,2),s(2,3),\xe2\x80\xa6,s(2,n),s(3,3),\xe2\x80\xa6,s(n,n)].
For example, if a=[1,2,5,10], then b=[1,3,8,18,2,7,17,5,15,10].
You are given q queries. During the i-th query, you are given two integers li and ri, and you have to calculate ri\xe2\x88\x91j=libj.
The first line contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x9210\xe2\x89\xa4ai\xe2\x89\xa410).
The third line contains one integer q (1\xe2\x89\xa4q\xe2\x89\xa43\xe2\x8b\x85105).
Then q lines follow, the i-th of them contains two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n(n+1)2).
Print q integers, the i-th of which should be equal to ri\xe2\x88\x91j=libj." "1900  x3861"
    
2026C "Action Figures" "binary search, brute force, constructive algorithms, data structures, greedy, implementation" "There is a shop that sells action figures near Monocarp\'s house. A new set of action figures will be released shortly; this set contains n figures, the i-th figure costs i coins and is available for purchase from day i to day n.
For each of the n days, Monocarp knows whether he can visit the shop.
Every time Monocarp visits the shop, he can buy any number of action figures which are sold in the shop (of course, he cannot buy an action figure that is not yet available for purchase). If Monocarp buys at least two figures during the same day, he gets a discount equal to the cost of the most expensive figure he buys (in other words, he gets the most expensive of the figures he buys for free). 
Monocarp wants to buy exactly one 1-st figure, one 2-nd figure, ..., one n-th figure from the set. He cannot buy the same figure twice. What is the minimum amount of money he has to spend?
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
Each test case consists of two lines:
Additional constraints on the input: 
For each test case, print one integer \xe2\x80\x94 the minimum amount of money Monocarp has to spend.
In the first test case, Monocarp buys the 1-st figure on the 1-st day and spends 1 coin.
In the second test case, Monocarp can buy the 1-st and the 3-rd figure on the 3-rd day, the 2-nd and the 4-th figure on the 4-th day, and the 5-th and the 6-th figure on the 6-th day. Then, he will spend 1+2+5=8 coins. 
In the third test case, Monocarp can buy the 2-nd and the 3-rd figure on the 3-rd day, and all other figures on the 7-th day. Then, he will spend 1+2+4+5+6=18 coins." "1500  x8393"
    
2026B "Black Cells" "binary search, brute force, constructive algorithms, greedy" "You are given a strip divided into cells, numbered from left to right from 0 to 1018. Initially, all cells are white.
You can perform the following operation: choose two white cells i and j, such that i\xe2\x89\xa0j and |i\xe2\x88\x92j|\xe2\x89\xa4k, and paint them black.
A list a is given. All cells from this list must be painted black. Additionally, at most one cell that is not in this list can also be painted black. Your task is to determine the minimum value of k for which this is possible.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42000).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (0<ai<1018; ai<ai+1).
Additional constraint on the input: the sum of n across all test cases does not exceed 2000.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum value of k for which it is possible to paint all the given cells black.
In the first example, with k=1, it is possible to paint the cells (1,2).
In the second example, with k=1, it is possible to paint the cells (7,8).
In the third example, with k=2, it is possible to paint the cells (2,4) and (8,9).
In the fourth example, with k=3, it is possible to paint the cells (0,1), (5,8) and (10,13)." "1300  x11458"
    
2026A "Perpendicular Segments" "constructive algorithms, geometry, greedy, math" "You are given a coordinate plane and three integers X, Y, and K. Find two line segments AB and CD such that 
Note that it\'s not necessary for segments to intersect. Segments are perpendicular as long as the lines they induce are perpendicular.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of test cases. Next, t cases follow.
The first and only line of each test case contains three integers X, Y, and K (1\xe2\x89\xa4X,Y\xe2\x89\xa41000; 1\xe2\x89\xa4K\xe2\x89\xa41414).
Additional constraint on the input: the values of X, Y, and K are chosen in such a way that the answer exists.
For each test case, print two lines. The first line should contain 4 integers Ax, Ay, Bx, and Byï¿½\xe2\x80\x94 the coordinates of the first segment.
The second line should also contain 4 integers Cx, Cy, Dx, and Dyï¿½\xe2\x80\x94 the coordinates of the second segment.
If there are multiple answers, print any of them.
The answer for the first test case is shown below: " "900  x15613"
    
2025G "Variable Damage" "data structures, flows" "Monocarp is gathering an army to fight a dragon in a videogame.
The army consists of two parts: the heroes and the defensive artifacts. Each hero has one parameterï¿½\xe2\x80\x94 his health. Each defensive artifact also has one parameterï¿½\xe2\x80\x94 its durability.
Before the battle begins, Monocarp distributes artifacts to the heroes so that each hero receives at most one artifact.
The battle consists of rounds that proceed as follows: 
The battle ends when there are no heroes left alive.
Initially, the army is empty. There are q queries: add a hero with health x or an artifact with durability y to the army. After each query, determine the maximum number of rounds that Monocarp can survive if he distributes the artifacts optimally.
The first line contains one integer q (1\xe2\x89\xa4q\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of queries.
In the i-th of the following q lines, there are two integers ti and vi (ti\xe2\x88\x88{1,2}; 1\xe2\x89\xa4vi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the type of the query and the value of the query parameter. If the type is 1, a hero with health vi is added. If the type is 2, an artifact with durability vi is added.
Print q integers. After each query, output the maximum number of rounds that Monocarp can survive if he distributes the artifacts optimally.
Let\'s consider the first example." "3000  x131"
    
2025F "Choose Your Queries" "constructive algorithms, dfs and similar, dp, graphs, greedy, trees" "You are given an array a, consisting of n integers (numbered from 1 to n). Initially, they are all zeroes.
You have to process q queries. The i-th query consists of two different integers xi and yi. During the i-th query, you have to choose an integer p (which is either xi or yi) and an integer d (which is either 1 or \xe2\x88\x921), and assign ap=ap+d.
After each query, every element of a should be a non-negative integer.
Process all queries in such a way that the sum of all elements of a after the last query is the minimum possible.
The first line contains two integers n and q (2\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105; 1\xe2\x89\xa4q\xe2\x89\xa43\xe2\x8b\x85105) \xe2\x80\x94 the number of elements in a and the number of queries, respectively.
Then q lines follow. The i-th of these lines contains two integers xi and yi (1\xe2\x89\xa4xi,yi\xe2\x89\xa4n; xi\xe2\x89\xa0yi) \xe2\x80\x94 the description of the i-th query.
For each query, print a line containing two characters:
If there are multiple answers, print any of them." "2700  x664"
    
2025E "Card Game" "combinatorics, dp, fft, greedy, math" "In the most popular card game in Berland, a deck of n\xc3\x97m cards is used. Each card has two parameters: suit and rank. Suits in the game are numbered from 1 to n, and ranks are numbered from 1 to m. There is exactly one card in the deck for each combination of suit and rank.
A card with suit a and rank b can beat a card with suit c and rank d in one of two cases: 
Two players play the game. Before the game starts, they receive exactly half of the deck each. The first player wins if for every card of the second player, he can choose his card that can beat it, and there is no card that is chosen twice (i.\xe2\x80\x89e. there exists a matching of the first player\'s cards with the second player\'s cards such that in each pair the first player\'s card beats the second player\'s card). Otherwise, the second player wins.
Your task is to calculate the number of ways to distribute the cards so that the first player wins. Two ways are considered different if there exists a card such that in one way it belongs to the first player and in the other way it belongs to the second player. The number of ways can be very large, so print it modulo 998244353.
The only line contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4500).
Additional constraint on the input: m is even.
Print a single integerï¿½\xe2\x80\x94 the number of ways to distribute the cards so that the first player wins, taken modulo 998244353." "2200  x1726"
    
2025D "Attribute Checks" "brute force, data structures, dp, implementation, math, two pointers" "Imagine a game where you play as a character that has two attributes: ""Strength"" and ""Intelligence"", that are at zero level initially.
During the game, you\'ll acquire m attribute points that allow you to increase your attribute levelsï¿½\xe2\x80\x94 one point will increase one of the attributes by one level. But sometimes, you\'ll encounter a so-called ""Attribute Checks"": if your corresponding attribute is high enough, you\'ll pass it; otherwise, you\'ll fail it.
Spending some time, you finally prepared a list which contains records of all points you got and all checks you\'ve met. And now you\'re wondering: what is the maximum number of attribute checks you can pass in a single run if you\'d spend points wisely?
Note that you can\'t change the order of records.
The first line contains two integers n and m (1\xe2\x89\xa4m\xe2\x89\xa45000; m<n\xe2\x89\xa42\xe2\x8b\x85106)ï¿½\xe2\x80\x94 the number of records in the list and the total number of points you\'ll get during the game.
The second line contains n integers r1,r2,\xe2\x80\xa6,rn (\xe2\x88\x92m\xe2\x89\xa4ri\xe2\x89\xa4m), where ri encodes the i-th record: 
Additional constraint on the input: the sequence r1,r2,\xe2\x80\xa6,rn contains exactly m elements equal to 0.
Print one integer \xe2\x80\x94 the maximum number of checks you can pass.
In the first test, it\'s optimal to spend each point in Strength, so you\'ll fail 2 Intelligence checks but pass 3 Strength checks.
In the second test, you\'ll fail both checks, since the first point you get comes after the checks.
In the third test, one of the optimal strategies is: " "1800  x5808"
    
2025C "New Game" "binary search, brute force, greedy, implementation, sortings, two pointers" "There\'s a new game Monocarp wants to play. The game uses a deck of n cards, where the i-th card has exactly one integer ai written on it.
At the beginning of the game, on the first turn, Monocarp can take any card from the deck. During each subsequent turn, Monocarp can take exactly one card that has either the same number as on the card taken on the previous turn or a number that is one greater than the number on the card taken on the previous turn.
In other words, if on the previous turn Monocarp took a card with the number x, then on the current turn he can take either a card with the number x or a card with the number x+1. Monocarp can take any card which meets that condition, regardless of its position in the deck.
After Monocarp takes a card on the current turn, it is removed from the deck.
According to the rules of the game, the number of distinct numbers written on the cards that Monocarp has taken must not exceed k.
If, after a turn, Monocarp cannot take a card without violating the described rules, the game ends.
Your task is to determine the maximum number of cards that Monocarp can take from the deck during the game, given that on the first turn he can take any card from the deck.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa4200000)ï¿½\xe2\x80\x94 the number of cards in the deck and the maximum number of distinct numbers that can be written on the cards that Monocarp takes.
The second line contains a sequence of integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109), where ai is the number written on the i-th card.
Additional constraint of the input: the sum of n over all test cases doesn\'t exceed 200000.
For each test case, print the maximum number of cards that Monocarp can take from the deck during the game, given that on the first turn he can take any card from the deck.
In the first example, Monocarp needs to take any of the cards with the number 3. On the next two turns, he needs to take the two remaining cards with the number 3. On the next three turns, he needs to take three cards with the number 4. After that, Monocarp will not be able to take any more cards from the deck, and he will have 6 cards." "1300  x14308"
    
2025B "Binomial Coefficients, Kind Of" "combinatorics, dp, math" "Recently, akshiM met a task that needed binomial coefficients to solve. He wrote a code he usually does that looked like this:
Unfortunately, he made an error, since the right formula is the following:
But his team member keblidA is interested in values that were produced using the wrong formula. Please help him to calculate these coefficients for t various pairs (ni,ki). Note that they should be calculated according to the first (wrong) formula.
Since values C[ni][ki] may be too large, print them modulo 109+7.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of pairs. Next, t pairs are written in two lines.
The second line contains t integers n1,n2,\xe2\x80\xa6,nt (2\xe2\x89\xa4ni\xe2\x89\xa4105).
The third line contains t integers k1,k2,\xe2\x80\xa6,kt (1\xe2\x89\xa4ki<ni).
Print t integers C[ni][ki] modulo 109+7." "1100  x16300"
    
2025A "Two Screens" "binary search, greedy, strings, two pointers" "There are two screens which can display sequences of uppercase Latin letters. Initially, both screens display nothing.
In one second, you can do one of the following two actions:
You have to calculate the minimum number of seconds you have to spend so that the first screen displays the sequence s, and the second screen displays the sequence t.
The first line contains one integer q (1\xe2\x89\xa4q\xe2\x89\xa4500) \xe2\x80\x94 the number of test cases.
Each test case consists of two lines. The first line contains the string s, and the second line contains the string t (1\xe2\x89\xa4|s|,|t|\xe2\x89\xa4100). Both strings consist of uppercase Latin letters.
For each test case, print one integer \xe2\x80\x94 the minimum possible number of seconds you have to spend so that the first screen displays the sequence s, and the second screen displays the sequence t.
In the first test case, the following sequence of actions is possible:
In the second test case, the following sequence of actions is possible:
In the third test case, the fastest way to display the sequences is to type both of them character by character without copying, and this requires 16 seconds." "800  x23215"
    
2024B "Buying Lemonade" "binary search, constructive algorithms, sortings" "There is a vending machine that sells lemonade. The machine has a total of n slots. You know that initially, the i-th slot contains ai cans of lemonade. There are also n buttons on the machine, each button corresponds to a slot, with exactly one button corresponding to each slot. Unfortunately, the labels on the buttons have worn off, so you do not know which button corresponds to which slot.
When you press the button corresponding to the i-th slot, one of two events occurs:
After pressing, the can drops out so quickly that it is impossible to track from which slot it fell. The contents of the slots are hidden from your view, so you cannot see how many cans are left in each slot. The only thing you know is the initial number of cans in the slots: a1,a2,\xe2\x80\xa6,an.
Determine the minimum number of button presses needed to guarantee that you receive at least k cans of lemonade.
Note that you can adapt your strategy during the button presses based on whether you received a can or not. It is guaranteed that there are at least k cans of lemonade in total in the machine. In other words, k\xe2\x89\xa4a1+a2+\xe2\x80\xa6+an.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4k\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of slots in the machine and the required number of cans of lemonade.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of cans in the slots.
It is guaranteed that k\xe2\x89\xa4a1+a2+\xe2\x80\xa6+an, meaning there are at least k cans of lemonade in the machine.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the minimum number of button presses needed to guarantee that you receive at least k cans of lemonade.
In the first test case, we can simply press the first button and receive one can of lemonade.
In the second test case, we can press each button once and guarantee that we receive 2 cans of lemonade. Note that if we simply press one button twice, we might not be lucky, and that button could correspond to the first slot, in which case we would only receive 1 can of lemonade for two presses.
In the third test case, one of the optimal strategies is as follows:
Press the first button twice. After the first press, a can of lemonade will definitely drop out. Then there are two options:
It can be shown that it is impossible to guarantee receiving 4 cans of lemonade with only 4 presses, so the answer is 5." "1100  x12888"
    
2024A "Profitable Interest Rate" "greedy, math" "Alice has a coins. She can open a bank deposit called ""Profitable"", but the minimum amount required to open this deposit is b coins.
There is also a deposit called ""Unprofitable"", which can be opened with any amount of coins. Alice noticed that if she opens the ""Unprofitable"" deposit with x coins, the minimum amount required to open the ""Profitable"" deposit decreases by 2x coins. However, these coins cannot later be deposited into the ""Profitable"" deposit.
Help Alice determine the maximum number of coins she can deposit into the ""Profitable"" deposit if she first deposits some amount of coins (possibly 0) into the ""Unprofitable"" deposit. If Alice can never open the ""Profitable"" deposit, output 0.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
A single line of each test case contains two integers a and b (1\xe2\x89\xa4a,b\xe2\x89\xa4109) \xe2\x80\x94 the number of coins Alice has and the initial minimum amount required to open the ""Profitable"" deposit.
For each test case, output a single integer \xe2\x80\x94 the maximum number of coins that Alice can deposit into the ""Profitable"" deposit. If Alice can never open the ""Profitable"" deposit, output 0.
In the first test case, a\xe2\x89\xa5b, so Alice can immediately open the ""Profitable"" deposit with all 10 coins.
In the second test case, Alice can open the ""Unprofitable"" deposit with 2 coins. Then she will have 5 coins left, but the minimum amount required to open the ""Profitable"" deposit will decrease by 4 coins, making it equal to 5 coins. Thus, Alice will be able to open the ""Profitable"" deposit with 5 coins.
In the third test case, Alice will not be able to open the ""Profitable"" deposit." "800  x18553"
    
2023F "Hills and Pits" "data structures, greedy, math, matrices" "In a desert city with a hilly landscape, the city hall decided to level the road surface by purchasing a dump truck. The road is divided into n sections, numbered from 1 to n from left to right. The height of the surface in the i-th section is equal to ai. If the height of the i-th section is greater than 0, then the dump truck must take sand from the i-th section of the road, and if the height of the i-th section is less than 0, the dump truck must fill the pit in the i-th section of the road with sand. It is guaranteed that the initial heights are not equal to 0.
When the dump truck is in the i-th section of the road, it can either take away x units of sand, in which case the height of the surface in the i-th section will decrease by x, or it can fill in x units of sand (provided that it currently has at least x units of sand in its bed), in which case the height of the surface in the i-th section of the road will increase by x.
The dump truck can start its journey from any section of the road. Moving to an adjacent section on the left or right takes 1 minute, and the time for loading and unloading sand can be neglected. The dump truck has an infinite capacity and is initially empty.
You need to find the minimum time required for the dump truck to level the sand so that the height in each section becomes equal to 0. Note that after all movements, the dump truck may still have sand left in its bed. You need to solve this problem independently for the segments numbered from li to ri. Sand outside the segment cannot be used.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa43\xe2\x8b\x85105) \xe2\x80\x94 the number of sections and the number of queries.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x92109\xe2\x89\xa4ai\xe2\x89\xa4109, ai\xe2\x89\xa00) \xe2\x80\x94 the initial height in each section.
The i-th of the following q lines contains two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n) \xe2\x80\x94 the boundaries of the segment of sections for which the minimum time needs to be determined.
It is guaranteed that the sum of n over all test cases and the sum of q over all test cases do not exceed 3\xe2\x8b\x85105.
For each query, output the minimum time required to level the sand in the segment [li,ri], or \xe2\x88\x921 if it is impossible.
In the first test case, 179 units of sand need to be added to the only section. However, there is nowhere to take it from, so this is impossible.
In the second test case:" "3500  x54"
    
2023E "Tree of Life" "dp, greedy, trees" "In the heart of an ancient kingdom grows the legendary Tree of Life \xe2\x80\x94 the only one of its kind and the source of magical power for the entire world. The tree consists of n nodes. Each node of this tree is a magical source, connected to other such sources through magical channels (edges). In total, there are n\xe2\x88\x921 channels in the tree, with the i-th channel connecting nodes vi and ui. Moreover, there exists a unique simple path through the channels between any two nodes in the tree.
However, the magical energy flowing through these channels must be balanced; otherwise, the power of the Tree of Life may disrupt the natural order and cause catastrophic consequences. The sages of the kingdom discovered that when two magical channels converge at a single node, a dangerous ""magical resonance vibration"" occurs between them. To protect the Tree of Life and maintain its balance, it is necessary to select several paths and perform special rituals along them. A path is a sequence of distinct nodes v1,v2,\xe2\x80\xa6,vk, where each pair of adjacent nodes vi and vi+1 is connected by a channel. When the sages perform a ritual along such a path, the resonance vibration between the channels (vi,vi+1) and (vi+1,vi+2) is blocked for each 1\xe2\x89\xa4i\xe2\x89\xa4k\xe2\x88\x922.
The sages\' task is to select the minimum number of paths and perform rituals along them to block all resonance vibrations. This means that for every pair of channels emanating from a single node, there must exist at least one selected path that contains both of these channels.
Help the sages find the minimum number of such paths so that the magical balance of the Tree of Life is preserved, and its power continues to nourish the entire world!
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa44\xe2\x8b\x85104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105) \xe2\x80\x94 the number of nodes in the Tree of Life.
The i-th of the following n\xe2\x88\x921 lines of each test case contains two integers vi and ui (1\xe2\x89\xa4vi<ui\xe2\x89\xa4n) \xe2\x80\x94 the channel connecting nodes vi and ui.
It is guaranteed that there exists a unique simple path through the channels between any two nodes.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the minimum number of paths that the sages need to select to prevent a catastrophe.
In the first test case, there are two pairs of channels emanating from a single node: (1,2) and (2,3), (2,3) and (3,4). It is sufficient to perform the ritual along the path 1\xe2\x88\x922\xe2\x88\x923\xe2\x88\x924. Thus, the answer is 1.
In the second test case, there are no pairs of channels emanating from a single node, so the answer is 0.
In the third test case, rituals can be performed along the paths 2\xe2\x88\x921\xe2\x88\x923, 2\xe2\x88\x921\xe2\x88\x924, and 3\xe2\x88\x921\xe2\x88\x924." "3300  x82"
    
2023D "Many Games" "brute force, dp, greedy, math, probabilities" "Recently, you received a rare ticket to the only casino in the world where you can actually earn something, and you want to take full advantage of this opportunity.
The conditions in this casino are as follows: 
You need to choose a set of games in advance that you will play in such a way as to maximize the expected value of your winnings.
In this case, if you choose to play the games with indices i1<i2<\xe2\x80\xa6<ik, you will win in all of them with a probability of k\xe2\x88\x8fj=1pij100, and in that case, your winnings will be equal to k\xe2\x88\x91j=1wij.
That is, the expected value of your winnings will be (k\xe2\x88\x8fj=1pij100)\xe2\x8b\x85(k\xe2\x88\x91j=1wij).
To avoid going bankrupt, the casino owners have limited the expected value of winnings for each individual game. Thus, for all i (1\xe2\x89\xa4i\xe2\x89\xa4n), it holds that wi\xe2\x8b\x85pi\xe2\x89\xa42\xe2\x8b\x85105.
Your task is to find the maximum expected value of winnings that can be obtained by choosing some set of games in the casino.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of games offered to play.
The i-th of the following n lines contains two integers pi and wi (1\xe2\x89\xa4pi\xe2\x89\xa4100, 1\xe2\x89\xa4wi,pi\xe2\x8b\x85wi\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the probability of winning and the size of the winnings in the i-th game.
Output a single number \xe2\x80\x94 the maximum expected value of winnings in the casino that can be obtained by choosing some subset of games.
Your answer will be accepted if the relative or absolute error does not exceed 10\xe2\x88\x926. Formally, if a is your answer and b is the jury\'s answer, it will be accepted if |a\xe2\x88\x92b|max(b,1)\xe2\x89\xa410\xe2\x88\x926.
In the first example, you can choose the first and third games. In this case, the expected value of winnings will be (p1100\xe2\x8b\x85p3100)\xe2\x8b\x85(w1+w3)=(80100\xe2\x8b\x8550100)\xe2\x8b\x85(80+200)=112.
In the second example, you can choose the first and second games. In this case, the expected value of winnings will be (p1100\xe2\x8b\x85p2100)\xe2\x8b\x85(w1+w2)=(100100\xe2\x8b\x85100100)\xe2\x8b\x85(1+1)=2.
In the third example, you can choose only the second game. In this case, the expected value of winnings will be p2100\xe2\x8b\x85w2=2100\xe2\x8b\x851000=20." "2900  x389"
    
2023C C+K+S "constructive algorithms, dfs and similar, graphs, greedy, hashing, implementation, strings" "You are given two strongly connected\xe2\x80\xa0 directed graphs, each with exactly n vertices, but possibly different numbers of edges. Upon closer inspection, you noticed an important feature \xe2\x80\x94 the length of any cycle in these graphs is divisible by k.
Each of the 2n vertices belongs to exactly one of two types: incoming or outgoing. For each vertex, its type is known to you.
You need to determine whether it is possible to draw exactly n directed edges between the source graphs such that the following four conditions are met: 
\xe2\x80\xa0A strongly connected graph is a graph in which there is a path from every vertex to every other vertex.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and k (2\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of vertices in each graph and the value by which the length of each cycle is divisible.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (ai\xe2\x88\x88{0,1}). If ai=0, then vertex i of the first graph is incoming. If ai=1, then vertex i of the first graph is outgoing.
The third line of each test case contains a single integer m1 (1\xe2\x89\xa4m1\xe2\x89\xa45\xe2\x8b\x85105) \xe2\x80\x94 the number of edges in the first graph.
The next m1 lines contain descriptions of the edges of the first graph. The i-th of them contains two integers vi and ui (1\xe2\x89\xa4vi,ui\xe2\x89\xa4n) \xe2\x80\x94 an edge in the first graph leading from vertex vi to vertex ui.
Next, in the same format, follows the description of the second graph.
The next line contains n integers b1,b2,\xe2\x80\xa6,bn (bi\xe2\x88\x88{0,1}). If bi=0, then vertex i of the second graph is incoming. If bi=1, then vertex i of the second graph is outgoing.
The next line contains a single integer m2 (1\xe2\x89\xa4m2\xe2\x89\xa45\xe2\x8b\x85105) \xe2\x80\x94 the number of edges in the second graph.
The next m2 lines contain descriptions of the edges of the second graph. The i-th of them contains two integers vi and ui (1\xe2\x89\xa4vi,ui\xe2\x89\xa4n) \xe2\x80\x94 an edge in the second graph leading from vertex vi to vertex ui.
It is guaranteed that both graphs are strongly connected, and the lengths of all cycles are divisible by k.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105. It is guaranteed that the sum of m1 and the sum of m2 over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output ""YES"" (without quotes) if it is possible to draw n new edges such that all conditions are met, and ""NO"" (without quotes) otherwise.
You may output the answer in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
In the first test case, it is possible to draw edges from the first graph to the second graph as (1,3) and (4,2) (the first number in the pair is the vertex number in the first graph, and the second number in the pair is the vertex number in the second graph), and from the second graph to the first graph as (1,2), (4,3) (the first number in the pair is the vertex number in the second graph, and the second number in the pair is the vertex number in the first graph).
In the second test case, there are a total of 4 incoming vertices and 2 outgoing vertices, so it is not possible to draw 3 edges." "2400  x918"
    
2023B Skipping "binary search, dp, graphs, shortest paths" "It is already the year 3024, ideas for problems have long run out, and the olympiad now takes place in a modified individual format. The olympiad consists of n problems, numbered from 1 to n. The i-th problem has its own score ai and a certain parameter bi (1\xe2\x89\xa4bi\xe2\x89\xa4n).
Initially, the testing system gives the participant the first problem. When the participant is given the i-th problem, they have two options: 
Then, the testing system selects the next problem for the participant from problems with indices j, such that: 
Among these problems, it selects the problem with the maximum index that it has not previously given to the participant (he has neither submitted nor skipped it before). If there is no such problem, then the competition for the participant ends, and their result is equal to the sum of points for all submitted problems. In particular, if the participant submits the first problem, then the competition for them ends. Note that the participant receives each problem at most once.
Prokhor has prepared thoroughly for the olympiad, and now he can submit any problem. Help him determine the maximum number of points he can achieve.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa44\xe2\x8b\x85105) \xe2\x80\x94 the number of problems in the olympiad.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the scores of the problems.
The third line of each test case contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4n) \xe2\x80\x94 the parameters of the problems.
It is guaranteed that the sum of n over all test cases does not exceed 4\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the maximum number of points that Prokhor can achieve.
In the first test case, Prokhor can skip the first problem; then he will receive the problem with index b1=2. Prokhor can submit it and receive a2=16 points. After that, the competition will end because Prokhor has already received all problems. Note that if Prokhor submits the first problem, he will receive a1=15 points, but the competition will end immediately.
In the second test case, Prokhor can skip the first problem; then he will receive the problem with index b1=3. Prokhor can submit it and receive a3=100 points. After that, Prokhor will receive the second problem, which he can skip to receive the problem with index b2=4. Prokhor can submit the fourth problem and receive another a4=100 points. After that, the competition ends because Prokhor has already received all problems with indices not exceeding 4. Thus, Prokhor will receive a total of 200 points.
In the third test case, Prokhor can submit the first problem and receive 100 points, after which the competition will end immediately." "1700  x4772"
    
2023A "Concatenation of Arrays" "constructive algorithms, greedy, math, sortings" "You are given n arrays a1, \xe2\x80\xa6, an. The length of each array is two. Thus, ai=[ai,1,ai,2]. You need to concatenate the arrays into a single array of length 2n such that the number of inversions\xe2\x80\xa0 in the resulting array is minimized. Note that you do not need to count the actual number of inversions.
More formally, you need to choose a permutation\xe2\x80\xa1 p of length n, so that the array b=[ap1,1,ap1,2,ap2,1,ap2,2,\xe2\x80\xa6,apn,1,apn,2] contains as few inversions as possible.
\xe2\x80\xa0The number of inversions in an array c is the number of pairs of indices i and j such that i<j and ci>cj.
\xe2\x80\xa1A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105) \xe2\x80\x94 the number of arrays.
Each of the following n lines contains two integers ai,1 and ai,2 (1\xe2\x89\xa4ai,j\xe2\x89\xa4109) \xe2\x80\x94 the elements of the i-th array.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output 2n integers \xe2\x80\x94 the elements of the array you obtained. If there are multiple solutions, output any of them.
In the first test case, we concatenated the arrays in the order 2,1. Let\'s consider the inversions in the resulting array b=[2,3,1,4]:
Thus, the number of inversions is 2. It can be proven that this is the minimum possible number of inversions.
In the second test case, we concatenated the arrays in the order 3,1,2. Let\'s consider the inversions in the resulting array b=[2,1,3,2,4,3]:
Thus, the number of inversions is 3. It can be proven that this is the minimum possible number of inversions.
In the third test case, we concatenated the arrays in the order 4,2,1,5,3." "1300  x11718"
    
2.02E+05 "Billetes MX (Hard Version)" "binary search, combinatorics, data structures, dsu, graphs" "This is the hard version of the problem. In this version, it is guaranteed that q\xe2\x89\xa4105. You can make hacks only if both versions of the problem are solved.
An integer grid A with p rows and q columns is called beautiful if: 
There is a partially filled integer grid G with n rows and m columns where only k cells are filled. Polycarp wants to know how many ways he can assign integers to the unfilled cells so that the grid is beautiful.
However, Monocarp thinks that this problem is too easy. Therefore, he will perform q updates on the grid. In each update, he will choose an unfilled cell and assign an integer to it. Note that these updates are persistent. That is, changes made to the grid will apply when processing future updates.
For each of the q+1 states of the grid, the initial state and after each of the q queries, determine the number of ways Polycarp can assign integers to the unfilled cells so that the grid is beautiful. Since this number can be very large, you are only required to output their values modulo 109+7.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains four integers n, m, k and q (2\xe2\x89\xa4n,m\xe2\x89\xa4105; 0\xe2\x89\xa4k,q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of rows, the number of columns, the number of fixed cells, and the number of updates.
The following k lines contain three integers r, c and v (1\xe2\x89\xa4r\xe2\x89\xa4n,1\xe2\x89\xa4c\xe2\x89\xa4m; 0\xe2\x89\xa4v<230) indicating that Gr,c is assigned the integer v.
The following q lines contain three integers r, c and v (1\xe2\x89\xa4r\xe2\x89\xa4n,1\xe2\x89\xa4c\xe2\x89\xa4m; 0\xe2\x89\xa4v<230) indicating that Gr,c is assigned the integer v.
It is guaranteed that the pairs (r,c) over all assignments are distinct.
It is guaranteed that the sum of n, m, k and q over all test cases does not exceed 105 respectively.
For each test case, output q+1 lines. The i-th line of output should contain the answer of the i-th state of the grid modulo 109+7.
In the first test case of the example, we initially have the following grid:
It can be proven that the only valid value for tile (3,3) is 0, so the first answer is 1. For the second query, the grid does not satisfy the condition, and thus the answer is 0." "2600  x352"
    
2.02E+04 "Billetes MX (Easy Version)" "2-sat, binary search, combinatorics, constructive algorithms, dfs and similar, dsu, graphs" "This is the easy version of the problem. In this version, it is guaranteed that q=0. You can make hacks only if both versions of the problem are solved.
An integer grid A with p rows and q columns is called beautiful if: 
There is a partially filled integer grid G with n rows and m columns where only k cells are filled. Polycarp wants to know how many ways he can assign integers to the unfilled cells so that the grid is beautiful.
However, Monocarp thinks that this problem is too easy. Therefore, he will perform q updates on the grid. In each update, he will choose an unfilled cell and assign an integer to it. Note that these updates are persistent. That is, changes made to the grid will apply when processing future updates.
For each of the q+1 states of the grid, the initial state and after each of the q queries, determine the number of ways Polycarp can assign integers to the unfilled cells so that the grid is beautiful. Since this number can be very large, you are only required to output their values modulo 109+7.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains four integers n, m, k and q (2\xe2\x89\xa4n,m\xe2\x89\xa4105; 0\xe2\x89\xa4k\xe2\x89\xa4105; q=0)ï¿½\xe2\x80\x94 the number of rows, the number of columns, the number of fixed cells, and the number of updates.
The following k lines contain three integers r, c and v (1\xe2\x89\xa4r\xe2\x89\xa4n,1\xe2\x89\xa4c\xe2\x89\xa4m; 0\xe2\x89\xa4v<230)ï¿½\xe2\x80\x94 indicating that Gr,c is assigned the integer v.
The following q lines contain three integers r, c and v (1\xe2\x89\xa4r\xe2\x89\xa4n,1\xe2\x89\xa4c\xe2\x89\xa4m; 0\xe2\x89\xa4v<230)ï¿½\xe2\x80\x94 indicating that Gr,c is assigned the integer v.
It is guaranteed that the pairs (r,c) over all assignments are distinct.
It is guaranteed that the sum of n, m, k and q over all test cases does not exceed 105 respectively.
For each test case, output q+1 lines. The i-th line of output should contain the answer of the i-th state of the grid modulo 109+7.
In the first test case of the example, we have the following grid:
It can be proven that the only valid value for tile (3,3) is 0." "2500  x398"
    
2022D2 "Asesino (Hard Version)" "constructive algorithms, dp, interactive" "This is the hard version of the problem. In this version, you must use the minimum number of queries possible. You can make hacks only if both versions of the problem are solved.
This is an interactive problem.
It is a tradition in Mexico\'s national IOI trainings to play the game ""Asesino"", which is similar to ""Among Us"" or ""Mafia"".
Today, n players, numbered from 1 to n, will play ""Asesino"" with the following three roles:
Each player will be assigned a role in the game. There will be exactly one Impostor but there can be any (possible zero) number of Knights and Knaves.
As the game moderator, you have accidentally forgotten the roles of everyone, but you need to determine the player who is the Impostor.
To determine the Impostor, you will ask some questions. In each question, you will pick two players i and j (1\xe2\x89\xa4i,j\xe2\x89\xa4n; i\xe2\x89\xa0j) and ask if player i thinks that player j is a Knight. The results of the question is shown in the table below.
Find the Impostor in the minimum number of queries possible. That is, let f(n) be the minimum integer such that for n players, there exists a strategy that can determine the Impostor using at most f(n) questions. Then, you should use at most f(n) questions to determine the Impostor.
Note: the grader is adaptive: the roles of the players are not fixed in the beginning and may change depending on your questions. However, it is guaranteed that there exists an assignment of roles that is consistent with all previously asked questions under the constraints of this problem.
The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of people playing the game.
It is guaranteed that the sum of n over all test cases does not exceed 105.
To ask a question, output a line in the following format:
The jury will output a ""1"" if player i thinks player j is a Knight, and ""0"" otherwise.
When you have determined which player the Impostor is, output a line in the following format:
Note that answering does not count to your limit of f(n) questions.
If you have made an invalid output, used more than f(n) questions or wrongly determined the Impostor, the jury will respond with ""-1"" and you will receive a Wrong Answer verdict. Upon receiving ""-1"", your program must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.
After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:
Hack format
For hacks, use the following format.
The first line should contain a single integer tï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case should contain the integer n followed by the string ""manual"".
The second line contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x921\xe2\x89\xa4ai\xe2\x89\xa41)ï¿½\xe2\x80\x94 the roles of each player. 1 denotes a Knight, 0 denotes a Knave, and \xe2\x88\x921 dentoes an Impostor. There must be exactly one Impostor, that is there must be exactly one index i such that ai=\xe2\x88\x921.
As an example, the hack format for the example input is: 
Note that the example test cases do not represent an optimal strategy for asking questions and are only shown for the sake of demonstrating the interaction format. Specifically, we cannot determine which player is the Impostor from the questions asked in the examples.
In the first test case of the example, players at indices 2 and 6 are Knights, players at indices 1, 3, 5, and 7 are Knaves, and the Impostor is at index 4. The following is an explanation of the questions asked:" "2700  x497"
    
2022D1 "Asesino (Easy Version)" "binary search, brute force, constructive algorithms, implementation, interactive" "This is the easy version of the problem. In this version, you can ask at most n+69 questions. You can make hacks only if both versions of the problem are solved.
This is an interactive problem.
It is a tradition in Mexico\'s national IOI trainings to play the game ""Asesino"", which is similar to ""Among Us"" or ""Mafia"".
Today, n players, numbered from 1 to n, will play ""Asesino"" with the following three roles:
Each player will be assigned a role in the game. There will be exactly one Impostor but there can be any (possible zero) number of Knights and Knaves.
As the game moderator, you have accidentally forgotten the roles of everyone, but you need to determine the player who is the Impostor.
To determine the Impostor, you will ask some questions. In each question, you will pick two players i and j (1\xe2\x89\xa4i,j\xe2\x89\xa4n; i\xe2\x89\xa0j) and ask if player i thinks that player j is a Knight. The results of the question is shown in the table below.
Find the Impostor in at most n+69 questions.
Note: the grader is adaptive: the roles of the players are not fixed in the beginning and may change depending on your questions. However, it is guaranteed that there exists an assignment of roles that is consistent with all previously asked questions under the constraints of this problem.
The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of people playing the game.
It is guaranteed that the sum of n over all test cases does not exceed 105.
To ask a question, output a line in the following format:
The jury will output a ""1"" if player i thinks player j is a Knight, and ""0"" otherwise.
When you have determined which player the Impostor is, output a line in the following format:
Note that answering does not count to your limit of n+69 questions.
If you have made an invalid output, used more than n+69 questions or wrongly determined the Impostor, the jury will respond with ""-1"" and you will receive a Wrong Answer verdict. Upon receiving ""-1"", your program must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.
After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:
Hack format
For hacks, use the following format.
The first line should contain a single integer tï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case should contain the integer n followed by the string ""manual"".
The second line contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x921\xe2\x89\xa4ai\xe2\x89\xa41)ï¿½\xe2\x80\x94 the roles of each player. 1 denotes a Knight, 0 denotes a Knave, and \xe2\x88\x921 dentoes an Impostor. There must be exactly one Impostor, that is there must be exactly one index i such that ai=\xe2\x88\x921.
As an example, the hack format for the example input is: 
Note that the example test cases do not represent an optimal strategy for asking questions and are only shown for the sake of demonstrating the interaction format. Specifically, we cannot determine which player is the Impostor from the questions asked in the examples.
In the first test case of the example, players at indices 2 and 6 are Knights, players at indices 1, 3, 5, and 7 are Knaves, and the Impostor is at index 4. The following is an explanation of the questions asked:" "1900  x2760"
    
2022C Gerrymandering "dp, implementation" "\xc3\x81lvaro and Jos\xc3\xa9 are the only candidates running for the presidency of Tepito, a rectangular grid of 2 rows and n columns, where each cell represents a house. It is guaranteed that n is a multiple of 3.
Under the voting system of Tepito, the grid will be split into districts, which consist of any 3 houses that are connected\xe2\x88\x97. Each house will belong to exactly one district.
Each district will cast a single vote. The district will vote for \xc3\x81lvaro or Jos\xc3\xa9 respectively if at least 2 houses in that district select them. Therefore, a total of 2n3 votes will be cast.
As \xc3\x81lvaro is the current president, he knows exactly which candidate each house will select. If \xc3\x81lvaro divides the houses into districts optimally, determine the maximum number of votes he can get.
\xe2\x88\x97A set of cells is connected if there is a path between any 2 cells that requires moving only up, down, left and right through cells in the set.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains one integer n (3\xe2\x89\xa4n\xe2\x89\xa4105; n is a multiple of 3)ï¿½\xe2\x80\x94 the number of columns of Tepito.
The following two lines each contain a string of length n. The i-th line contains the string si, consisting of the characters A and J. If si,j=A, the house in the i-th row and j-th column will select \xc3\x81lvaro. Otherwise if si,j=J, the house will select Jos\xc3\xa9.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum number of districts \xc3\x81lvaro can win by optimally dividing the houses into districts.
The image below showcases the optimal arrangement of districts \xc3\x81lvaro can use for each test case in the example." "1800  x3783"
    
2022B "Kar Salesman" "binary search, greedy, math" "Karel is a salesman in a car dealership. The dealership has n different models of cars. There are ai cars of the i-th model. Karel is an excellent salesperson and can convince customers to buy up to x cars (of Karel\'s choice), as long as the cars are from different models.
Determine the minimum number of customers Karel has to bring in to sell all the cars.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n and x (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105; 1\xe2\x89\xa4x\xe2\x89\xa410)ï¿½\xe2\x80\x94 the number of different models of cars and the maximum number of cars Karel can convince a customer to buy.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of cars of each model.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output the minimum possible number of customers needed to sell all the cars.
For the first case, Karel only needs to lure in 3 customers. He will convince the customers to buy the following models of cars: 
For the second case, Karel only needs to lure in 3 customers. He will convince the customers to buy the following models of cars: " "1300  x9772"
    
2022A "Bus to Pï¿½njamo" "constructive algorithms, greedy, implementation, math" "There are n families travelling to P\xc3\xa9njamo to witness Mexico\'s largest-ever ""walking a chicken on a leash"" marathon. The i-th family has ai family members. All families will travel using a single bus consisting of r rows with 2 seats each.
A person is considered happy if: 
Determine the maximum number of happy people in an optimal seating arrangement. Note that everyone must be seated in the bus.
It is guaranteed that all family members will fit on the bus. Formally, it is guaranteed that n\xe2\x88\x91i=1ai\xe2\x89\xa42r.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains two integers n and r (1\xe2\x89\xa4n\xe2\x89\xa4100; 1\xe2\x89\xa4r\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of families and the number of rows in the bus.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa410)ï¿½\xe2\x80\x94 the number of family members in each family.
For each test case, output the maximum number of happy people in an optimal seating arrangement.
In the first test case, the two members of the first family can sit together in the first row, while the two members of the second family can sit together in the second row. The remaining member of the second family can sit in the third row along with a member of the third family. This seating arrangement is shown below, where the 4 happy people are colored green.
In the second test case, a possible seating arrangement with 6 happy people is shown below.
In the third test case, a possible seating arrangement with 6 happy people is shown below." "800  x13565"
    
2.02E+06 "Digital Village (Extreme Version)" "data structures, dfs and similar, dp, dsu, graphs, greedy, math, trees" "This is the extreme version of the problem. In the three versions, the constraints on n and m are different. You can make hacks only if all the versions of the problem are solved.
Pak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with n houses and m internet cables connecting house ui and house vi, each with a latency of wi.
There are p houses that require internet. Pak Chanek can install servers in at most k of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house si requiring internet will be the maximum latency of the cables between that house and the server it is connected to.
For each k=1,2,\xe2\x80\xa6,n, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains 3 integers n, m, p (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4p\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the number of houses, the number of cables, and the number of houses that need internet.
The second line of each test case contains p integers s1,s2,\xe2\x80\xa6,sp (1\xe2\x89\xa4si\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the houses that need internet. It is guaranteed that all elements of s are distinct. 
The i-th of the next m lines of each test case contains three integers ui, vi, and wi (1\xe2\x89\xa4ui<vi\xe2\x89\xa4n; 1\xe2\x89\xa4wi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the internet cable connecting house ui and house vi with latency of wi. It is guaranteed that the given edges form a connected simple graph.
It is guaranteed that the sum of n and the sum of m do not exceed 2\xe2\x8b\x85105.
For each test case, output n integers: the minimum total latency that can be achieved for all the houses requiring internet for each k=1,2,\xe2\x80\xa6,n.
In the first test case for k=3, a possible optimal solution is to install servers at vertices 2, 6 and 8 and obtain the following latency:
So the total latency is 9." "2800  x418"
    
2.02E+05 "Digital Village (Hard Version)" "data structures, dp, dsu, graphs, math, trees" "This is the hard version of the problem. In the three versions, the constraints on n and m are different. You can make hacks only if all the versions of the problem are solved.
Pak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with n houses and m internet cables connecting house ui and house vi, each with a latency of wi.
There are p houses that require internet. Pak Chanek can install servers in at most k of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house si requiring internet will be the maximum latency of the cables between that house and the server it is connected to.
For each k=1,2,\xe2\x80\xa6,n, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa42000). The description of the test cases follows.
The first line of each test case contains three integers n, m, p (2\xe2\x89\xa4n\xe2\x89\xa45000; n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa45000; 1\xe2\x89\xa4p\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the number of houses, the number of cables, and the number of houses that need internet.
The second line of each test case contains p integers s1,s2,\xe2\x80\xa6,sp (1\xe2\x89\xa4si\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the houses that need internet. It is guaranteed that all elements of s are distinct. 
The i-th of the next m lines of each test case contains three integers ui, vi, and wi (1\xe2\x89\xa4ui<vi\xe2\x89\xa4n; 1\xe2\x89\xa4wi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the internet cable connecting house ui and house vi with latency of wi. It is guaranteed that the given edges form a connected simple graph.
It is guaranteed that the sum of n and the sum of m do not exceed 5000.
For each test case, output n integers: the minimum total latency that can be achieved for all the houses requiring internet for each k=1,2,\xe2\x80\xa6,n.
In the first test case for k=3, a possible optimal solution is to install servers at vertices 2, 6 and 8 and obtain the following latency:
So the total latency is 9." "2500  x800"
    
2.02E+04 "Digital Village (Easy Version)" "brute force, data structures, dfs and similar, dp, dsu, fft, graphs, greedy, implementation, math, trees" "This is the easy version of the problem. In the three versions, the constraints on n and m are different. You can make hacks only if all the versions of the problem are solved.
Pak Chanek is setting up internet connections for the village of Khuntien. The village can be represented as a connected simple graph with n houses and m internet cables connecting house ui and house vi, each with a latency of wi.
There are p houses that require internet. Pak Chanek can install servers in at most k of the houses. The houses that need internet will then be connected to one of the servers. However, since each cable has its latency, the latency experienced by house si requiring internet will be the maximum latency of the cables between that house and the server it is connected to.
For each k=1,2,\xe2\x80\xa6,n, help Pak Chanek determine the minimum total latency that can be achieved for all the houses requiring internet.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains three integers n, m, p (2\xe2\x89\xa4n\xe2\x89\xa4400; n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa4400; 1\xe2\x89\xa4p\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the number of houses, the number of cables and the number of houses that need internet.
The second line of each test case contains p integers s1,s2,\xe2\x80\xa6,sp (1\xe2\x89\xa4si\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the houses that need internet. It is guaranteed that all elements of s are distinct. 
The i-th of the next m lines of each test case contains three integers ui, vi, and wi (1\xe2\x89\xa4ui<vi\xe2\x89\xa4n; 1\xe2\x89\xa4wi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the internet cable connecting house ui and house vi with latency of wi. It is guaranteed that the given edges form a connected simple graph.
It is guaranteed that the sum of n3 and the sum of m3 do not exceed 108.
For each test case, output n integers: the minimum total latency that can be achieved for all the houses requiring internet for each k=1,2,\xe2\x80\xa6,n.
In the first test case for k=3, a possible optimal solution is to install servers at vertices 2, 6 and 8 and obtain the following latency:
So the total latency is 9." "2300  x1462"
    
2021D "Boss, Thirsty" "dp, greedy, implementation" "Pak Chanek has a friend who runs a drink stall in a canteen. His friend will sell drinks for n days, numbered from day 1 to day n. There are also m types of drinks, numbered from 1 to m.
The profit gained from selling a drink on a particular day can vary. On day i, the projected profit from selling drink of type j is Ai,j. Note that Ai,j can be negative, meaning that selling the drink would actually incur a loss.
Pak Chanek wants to help his friend plan the sales over the n days. On day i, Pak Chanek must choose to sell at least one type of drink. Furthermore, the types of drinks sold on a single day must form a subarray. In other words, in each day, Pak Chanek will select i and j such that 1\xe2\x89\xa4i\xe2\x89\xa4j\xe2\x89\xa4m. Then all types of drinks between i and j (inclusive) will be sold.
However, to ensure that customers from the previous day keep returning, the selection of drink types sold on day i (i>1) must meet the following conditions:
The daily profit is the sum of the profits from all drink types sold on that day. The total profit from the sales plan is the sum of the profits over n days. What is the maximum total profit that can be achieved if Pak Chanek plans the sales optimally?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 3\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105; n\xe2\x8b\x85m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of rows and columns in a grid.
The next n lines of each test case contain m integers each, where the i-th line contains the integers Ai,1Ai,2,\xe2\x80\xa6,Ai,m (\xe2\x88\x92109\xe2\x89\xa4Ai,j\xe2\x89\xa4109)ï¿½\xe2\x80\x94 project profits of each drink type on the i-th day.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer: the maximum profit that Pak Chanek can achieve.
Here is Pak Chanek\'s optimal plan:
So, the total profit of Pak Chanek\'s plan is 148+142+185=475." "2500  x654"
    
2021C2 "Adjust The Presentation (Hard Version)" "constructive algorithms, data structures, greedy, implementation, sortings" "This is the hard version of the problem. In the two versions, the constraints on q and the time limit are different. In this version, 0\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105. You can make hacks only if all the versions of the problem are solved.
A team consisting of n members, numbered from 1 to n, is set to present a slide show at a large meeting. The slide show contains m slides.
There is an array a of length n. Initially, the members are standing in a line in the order of a1,a2,\xe2\x80\xa6,an from front to back. The slide show will be presented in order from slide 1 to slide m. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is [3,1,2,4]. After member 3 presents the current slide, you can change the line of members into either [3,1,2,4], [1,3,2,4], [1,2,3,4] or [1,2,4,3].
There is also an array b of length m. The slide show is considered good if it is possible to make member bi present slide i for all i from 1 to m under these constraints.
However, your annoying boss wants to make q updates to the array b. In the i-th update, he will choose a slide si and a member ti and set bsi:=ti. Note that these updates are persistent, that is changes made to the array b will apply when processing future updates.
For each of the q+1 states of array b, the initial state and after each of the q updates, determine if the slideshow is good.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains three integers n, m and q (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85105; 0\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of members and the number of sections.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the initial order of the members from front to back. It is guaranteed that each integer from 1 to n appears exactly once in a.
The third line of each test case contains m integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the members who should present each section.
Each of the next q lines contains two integers si and ti (1\xe2\x89\xa4si\xe2\x89\xa4m, 1\xe2\x89\xa4ti\xe2\x89\xa4n)ï¿½\xe2\x80\x94 parameters of an update.
It is guaranteed that the sum of n, the sum of m and the sum of q over all test cases do not exceed 2\xe2\x8b\x85105 respectively.
For each test case, output q+1 lines corresponding to the q+1 states of the array b. Output ""YA"" if the slide show is good, and ""TIDAK"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yA"", ""Ya"", ""ya"", and ""YA"" will be recognized as positive responses.
For the first test case, you do not need to move the members as both slides are presented by member 1, who is already at the front of the line. After that, set b1:=2, now slide 1 must be presented by member 2 which is impossible as member 1 will present slide 1 first. Then, set b1=1, the b is the same as the initial b, making a good presentation possible." "1900  x3525"
    
2021C1 "Adjust The Presentation (Easy Version)" "constructive algorithms, greedy" "This is the easy version of the problem. In the two versions, the constraints on q and the time limit are different. In this version, q=0. You can make hacks only if all the versions of the problem are solved.
A team consisting of n members, numbered from 1 to n, is set to present a slide show at a large meeting. The slide show contains m slides.
There is an array a of length n. Initially, the members are standing in a line in the order of a1,a2,\xe2\x80\xa6,an from front to back. The slide show will be presented in order from slide 1 to slide m. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is [3,1,2,4]. After member 3 presents the current slide, you can change the line of members into either [3,1,2,4], [1,3,2,4], [1,2,3,4] or [1,2,4,3].
There is also an array b of length m. The slide show is considered good if it is possible to make member bi present slide i for all i from 1 to m under these constraints.
However, your annoying boss wants to make q updates to the array b. In the i-th update, he will choose a slide si and a member ti and set bsi:=ti. Note that these updates are persistent, that is changes made to the array b will apply when processing future updates.
For each of the q+1 states of array b, the initial state and after each of the q updates, determine if the slideshow is good.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains three integers n, m and q (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85105; q=0)ï¿½\xe2\x80\x94 the number of members, the number of sections and the number of updates.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the initial order of the members from front to back. It is guaranteed that each integer from 1 to n appears exactly once in a.
The third line of each test case contains m integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the members who should present each section.
It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 2\xe2\x8b\x85105 respectively.
For each test case, output q+1 lines corresponding to the q+1 states of the array b. Output ""YA"" if the slide show is good, and ""TIDAK"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yA"", ""Ya"", ""ya"", and ""YA"" will be recognized as positive responses.
For the first test case, you do not need to move the members as both slides are presented by member 1, who is already at the front of the line.
For the second test case, the following is a possible way to move members so that the presentation is good: " "1300  x11320"
    
2021B "Maximize Mex" "brute force, greedy, math, number theory" "You are given an array a of n positive integers and an integer x. You can do the following two-step operation any (possibly zero) number of times: 
Find the maximum value of the MEX of a if you perform the operations optimally.
The MEX (minimum excluded value) of an array is the smallest non-negative integer that is not in the array. For example: 
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa45000). The description of the test cases follows.
The first line of each test case contains two integers n and x (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4x\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the length of the array and the integer to be used in the operation.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the given array.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer: the maximum MEX of a if you perform the operations optimally.
In the first test case, the MEX of a is 4 without performing any operations, which is the maximum.
In the second test case, the MEX of a is 5 without performing any operations. If we perform two operations both with i=1, we will have the array a=[5,3,4,1,0,2]. Then, the MEX of a will become 6, which is the maximum.
In the third test case, the MEX of a is 0 without performing any operations, which is the maximum." "1200  x14148"
    
2021A "Meaning Mean" "data structures, greedy, math, sortings" "Pak Chanek has an array a of n positive integers. Since he is currently learning how to calculate the floored average of two numbers, he wants to practice it on his array a.
While the array a has at least two elements, Pak Chanek will perform the following three-step operation: 
For example, suppose that a=[5,4,3,2,1,1]. If we choose i=1 and j=5, the resulting array will be a=[4,3,2,1,3]. If we choose i=4 and j=3, the resulting array will be a=[5,4,1,1,2].
After all operations, the array will consist of a single element x. Find the maximum possible value of x if Pak Chanek performs the operations optimally.
\xe2\x88\x97\xe2\x8c\x8ax\xe2\x8c\x8b denotes the floor function of x, which is the greatest integer that is less than or equal to x. For example, \xe2\x8c\x8a6\xe2\x8c\x8b=6, \xe2\x8c\x8a2.5\xe2\x8c\x8b=2, \xe2\x8c\x8a\xe2\x88\x923.6\xe2\x8c\x8b=\xe2\x88\x924 and \xe2\x8c\x8a\xcf\x80\xe2\x8c\x8b=3
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa45000). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa450)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
Do note that the sum of n over all test cases is not bounded.
For each test case, output a single integer: the maximum possible value of x after all numbers have been picked.
In the first test case, the array is initially a=[1,7,8,4,5]. Pak Chanek will perform the following operations: 
After all the operations, the array consists of a single element x=6. It can be proven that there is no series of operations that results in x greater than 6 in the end." "800  x18457"
    
2020F "Count Leaves" "dp, math, number theory" "Let nn and dd be positive integers. We build the the divisor tree Tn,dTn,d as follows:
For example, T6,2T6,2 (the divisor tree for n=6n=6 and d=2d=2) looks like this:
Define f(n,d)f(n,d) as the number of leaves in Tn,dTn,d.
Given integers nn, kk, and dd, please compute \xe2\x88\x91i=1nf(ik,d)\xe2\x88\x91i=1nf(ik,d), modulo 109+7109+7.
\xe2\x80\xa0\xe2\x80\xa0 In this problem, we say that an integer yy is a divisor of xx if y\xe2\x89\xa51y\xe2\x89\xa51 and there exists an integer zz such that x=y\xe2\x8b\x85zx=y\xe2\x8b\x85z.
Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The only line of each test case contains three integers nn, kk, and dd (1\xe2\x89\xa4n\xe2\x89\xa41091\xe2\x89\xa4n\xe2\x89\xa4109, 1\xe2\x89\xa4k,d\xe2\x89\xa41051\xe2\x89\xa4k,d\xe2\x89\xa4105).
It is guaranteed that the sum of nn over all test cases does not exceed 109109.
For each test case, output \xe2\x88\x91i=1nf(ik,d)\xe2\x88\x91i=1nf(ik,d), modulo 109+7109+7.
In the first test case, n=6n=6, k=1k=1, and d=1d=1. Thus, we need to find the total number of leaves in the divisor trees T1,1T1,1, T2,1T2,1, T3,1T3,1, T4,1T4,1, T5,1T5,1, T6,1T6,1.
The total number of leaves is 1+2+2+3+2+4=141+2+2+3+2+4=14.
In the second test case, n=1n=1, k=3k=3, d=3d=3. Thus, we need to find the number of leaves in T1,3T1,3, because 13=113=1. This tree has only one leaf, so the answer is 11." "2900  x193"
    
2020E "Expected Power" "bitmasks, dp, math, probabilities" "You are given an array of n integers a1,a2,\xe2\x80\xa6,an. You are also given an array p1,p2,\xe2\x80\xa6,pn.
Let S denote the random multiset (i.ï¿½e., it may contain equal elements) constructed as follows:
Denote f(S) as the bitwise XOR of all elements of S. Please calculate the expected value of (f(S))2. Output the answer modulo 109+7.
Formally, let M=109+7. It can be shown that the answer can be expressed as an irreducible fraction pq, where p and q are integers and q\xe2\x89\xa20(modM). Output the integer equal to p\xe2\x8b\x85q\xe2\x88\x921modM. In other words, output such an integer x that 0\xe2\x89\xa4x<M and x\xe2\x8b\x85q\xe2\x89\xa1p(modM).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41023).
The third line of each test case contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4104).
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the expected value of (f(S))2, modulo 109+7.
In the first test case, a=[1,2] and each element is inserted into S with probability 12, since p1=p2=5000 and pi104=12. Thus, there are 4 outcomes for S, each happening with the same probability of 14:
Hence, the answer is 0\xe2\x8b\x8514+1\xe2\x8b\x8514+4\xe2\x8b\x8514+9\xe2\x8b\x8514=144=72\xe2\x89\xa1500000007(mod109+7).
In the second test case, a=[1,1], a1 is inserted into S with probability 0.1, while a2 is inserted into S with probability 0.2. There are 3 outcomes for S:
Hence, the answer is 0\xe2\x8b\x850.72+1\xe2\x8b\x850.26+0\xe2\x8b\x850.02=0.26=26100\xe2\x89\xa1820000006(mod109+7)." "2000  x2958"
    
2020D "Connect the Dots" "brute force, dp, dsu, graphs, math, trees" "One fine evening, Alice sat down to play the classic game ""Connect the Dots"", but with a twist.
To play the game, Alice draws a straight line and marks n points on it, indexed from 1 to n. Initially, there are no arcs between the points, so they are all disjoint. After that, Alice performs m operations of the following type:
After performing all m operations, she wants to know the number of connected components\xe2\x80\xa0 these points form. Please help her find this number.
\xe2\x80\xa0 Two points are said to be in one connected component if there is a path between them via several (possibly zero) arcs and other points.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105).
The i-th of the following m lines contains three integers ai, di, and ki (1\xe2\x89\xa4ai\xe2\x89\xa4ai+ki\xe2\x8b\x85di\xe2\x89\xa4n, 1\xe2\x89\xa4di\xe2\x89\xa410, 0\xe2\x89\xa4ki\xe2\x89\xa4n).
It is guaranteed that both the sum of n and the sum of m over all test cases do not exceed 2\xe2\x8b\x85105.
For each test case, output the number of connected components.
In the first test case, there are n=10 points. The first operation joins the points 1, 3, 5, 7, and 9. The second operation joins the points 2, 4, 6, 8, and 10. There are thus two connected components: {1,3,5,7,9} and {2,4,6,8,10}.
In the second test case, there are n=100 points. The only operation joins the points 19, 21, 23, 25, and 27. Now all of them form a single connected component of size 5. The other 95 points form single-point connected components. Thus, the answer is 1+95=96.
In the third test case, there are n=100 points. After the operations, all odd points from 1 to 79 will be in one connected component of size 40. The other 60 points form single-point connected components. Thus, the answer is 1+60=61." "1800  x5624"
    
2020C "Bitwise Balancing" "bitmasks, hashing, implementation, math, schedules, ternary search" "You are given three non-negative integers b, c, and d.
Please find a non-negative integer a\xe2\x88\x88[0,261] such that (a|b)\xe2\x88\x92(a&c)=d, where | and & denote the bitwise OR operation and the bitwise AND operation, respectively.
If such an a exists, print its value. If there is no solution, print a single integer \xe2\x88\x921. If there are multiple solutions, print any of them.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The only line of each test case contains three positive integers b, c, and d (0\xe2\x89\xa4b,c,d\xe2\x89\xa41018).
For each test case, output the value of a, or \xe2\x88\x921 if there is no solution. Please note that a must be non-negative and cannot exceed 261.
In the first test case, (0|2)\xe2\x88\x92(0&2)=2\xe2\x88\x920=2. So, a=0 is a correct answer.
In the second test case, no value of a satisfies the equation.
In the third test case, (12|10)\xe2\x88\x92(12&2)=14\xe2\x88\x920=14. So, a=12 is a correct answer." "1400  x14302"
    
2020B "Brightness Begins" "binary search, math" "Imagine you have n light bulbs numbered 1,2,\xe2\x80\xa6,n. Initially, all bulbs are on. To flip the state of a bulb means to turn it off if it used to be on, and to turn it on otherwise.
Next, you do the following:
After performing all operations, there will be several bulbs that are still on. Your goal is to make this number exactly k.
Find the smallest suitable n such that after performing the operations there will be exactly k bulbs on. We can show that an answer always exists.
\xe2\x80\xa0 An integer x is divisible by y if there exists an integer z such that x=y\xe2\x8b\x85z.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The only line of each test case contains a single integer k (1\xe2\x89\xa4k\xe2\x89\xa41018).
For each test case, output nï¿½\xe2\x80\x94 the minimum number of bulbs.
In the first test case, the minimum number of bulbs is 2. Let\'s denote the state of all bulbs with an array, where 1 corresponds to a turned on bulb, and 0 corresponds to a turned off bulb. Initially, the array is [1,1].
In the end, there are k=1 bulbs on. We can also show that the answer cannot be less than 2.
In the second test case, the minimum number of bulbs is 5. Initially, the array is [1,1,1,1,1]. 
In the end, there are k=3 bulbs on. We can also show that the answer cannot be smaller than 5." "1200  x16213"
    
2020A "Find Minimum Operations" "bitmasks, brute force, greedy, math, number theory" "You are given two integers n and k.
In one operation, you can subtract any power of k from n. Formally, in one operation, you can replace n by (n\xe2\x88\x92kx) for any non-negative integer x.
Find the minimum number of operations required to make n equal to 0.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The only line of each test case contains two integers n and k (1\xe2\x89\xa4n,k\xe2\x89\xa4109).
For each test case, output the minimum number of operations on a new line.
In the first test case, n=5 and k=2. We can perform the following sequence of operations:
It can be shown that there is no way to make n equal to 0 in less than 2 operations. Thus, 2 is the answer.
In the second test case, n=3 and k=5. We can perform the following sequence of operations:
It can be shown that there is no way to make n equal to 0 in less than 3 operations. Thus, 3 is the answer." "800  x21727"
    
2019B "All Pairs Segments" "implementation, math" "You are given n points on the x axis, at increasing positive integer coordinates x1<x2<\xe2\x80\xa6<xn.
For each pair (i,j) with 1\xe2\x89\xa4i<j\xe2\x89\xa4n, you draw the segment [xi,xj]. The segments are closed, i.e., a segment [a,b] contains the points a,a+1,\xe2\x80\xa6,b.
You are given q queries. In the i-th query, you are given a positive integer ki, and you have to determine how many points with integer coordinates are contained in exactly ki segments.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n, q (2\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of points and the number of queries.
The second line of each test case contains n integers x1,x2,\xe2\x80\xa6,xn (1\xe2\x89\xa4x1<x2<\xe2\x80\xa6<xn\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the coordinates of the n points.
The third line of each test case contains q integers k1,k2,\xe2\x80\xa6,kq (1\xe2\x89\xa4ki\xe2\x89\xa41018)ï¿½\xe2\x80\x94 the parameters of the q queries.
It is guaranteed that the sum of n over all test cases does not exceed 105, and the sum of q over all test cases does not exceed 105.
For each test case, output a single line with q integers: the i-th integer is the answer to the i-th query.
In the first example, you only draw the segment [101,200]. No point is contained in exactly 2 segments, and the 100 points 101,102,\xe2\x80\xa6,200 are contained in exactly 1 segment.
In the second example, you draw 15 segments: [1,2],[1,3],[1,5],[1,6],[1,7],[2,3],[2,5],[2,6],[2,7],[3,5],[3,6],[3,7],[5,6],[5,7],[6,7]. Points 1,7 are contained in exactly 5 segments; points 2,4,6 are contained in exactly 9 segments; points 3,5 are contained in exactly 11 segments." "1200  x13725"
    
2019A "Max Plus Size" "brute force, dp, greedy" "You are given an array a1,a2,\xe2\x80\xa6,an of positive integers.
You can color some elements of the array red, but there cannot be two adjacent red elements (i.e., for 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921, at least one of ai and ai+1 must not be red).
Your score is the maximum value of a red element plus the number of red elements. Find the maximum score you can get.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the length of the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the given array.
For each test case, output a single integer: the maximum possible score you can get after coloring some elements red according to the statement.
In the first test case, you can color the array as follows: [5,4,5]. Your score is max([5,5])+size([5,5])=5+2=7. This is the maximum score you can get.
In the second test case, you can color the array as follows: [4,5,4]. Your score is max([4,4])+size([4,4])=4+2=6. This is the maximum score you can get.
In the third test case, you can color the array as follows: [3,3,3,3,4,1,2,3,4,5]. Your score is max([3,3,4,3,5])+size([3,3,4,3,5])=5+5=10. This is the maximum score you can get." "800  x22706"
    
2018F3 "Speedbreaker Counting (Hard Version)" "dp, greedy, math" "This is the hard version of the problem. In the three versions, the constraints on n and the time limit are different. You can make hacks only if all the versions of the problem are solved.
This is the statement of Problem D1B:
You win if, for each i, you conquer city i at a time no later than ai. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win? 
For each 0\xe2\x89\xa4k\xe2\x89\xa4n, count the number of arrays of positive integers a1,a2,\xe2\x80\xa6,an such that
The answer can be very large, so you have to calculate it modulo a given prime p.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa43000). The description of the test cases follows.
The only line of each test case contains two integers n, p (1\xe2\x89\xa4n\xe2\x89\xa43000, 108\xe2\x89\xa4p\xe2\x89\xa4109, p is prime)ï¿½\xe2\x80\x94 the number of cities and the modulo.
It is guaranteed that the sum of n over all test cases does not exceed 3000.
For each test case, output n+1 integers: the i-th integer should be the number of arrays that satisfy the conditions for k=i\xe2\x88\x921.
In the first test case,
In the second test case,
In the third test case," "3100  x174"
    
2018F2 "Speedbreaker Counting (Medium Version)" "dp, greedy, math" "This is the medium version of the problem. In the three versions, the constraints on n and the time limit are different. You can make hacks only if all the versions of the problem are solved.
This is the statement of Problem D1B:
You win if, for each i, you conquer city i at a time no later than ai. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win? 
For each 0\xe2\x89\xa4k\xe2\x89\xa4n, count the number of arrays of positive integers a1,a2,\xe2\x80\xa6,an such that
The answer can be very large, so you have to calculate it modulo a given prime p.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The only line of each test case contains two integers n, p (1\xe2\x89\xa4n\xe2\x89\xa4500, 108\xe2\x89\xa4p\xe2\x89\xa4109, p is prime)ï¿½\xe2\x80\x94 the number of cities and the modulo.
It is guaranteed that the sum of n over all test cases does not exceed 500.
For each test case, output n+1 integers: the i-th integer should be the number of arrays that satisfy the conditions for k=i\xe2\x88\x921.
In the first test case,
In the second test case,
In the third test case," "3000  x167"
    
2018F1 "Speedbreaker Counting (Easy Version)" "combinatorics, dp, greedy, math" "This is the easy version of the problem. In the three versions, the constraints on n and the time limit are different. You can make hacks only if all the versions of the problem are solved.
This is the statement of Problem D1B:
You win if, for each i, you conquer city i at a time no later than ai. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win? 
For each 0\xe2\x89\xa4k\xe2\x89\xa4n, count the number of arrays of positive integers a1,a2,\xe2\x80\xa6,an such that
The answer can be very large, so you have to calculate it modulo a given prime p.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa480). The description of the test cases follows.
The only line of each test case contains two integers n, p (1\xe2\x89\xa4n\xe2\x89\xa480, 108\xe2\x89\xa4p\xe2\x89\xa4109, p is prime)ï¿½\xe2\x80\x94 the number of cities and the modulo.
It is guaranteed that the sum of n over all test cases does not exceed 80.
For each test case, output n+1 integers: the i-th integer should be the number of arrays that satisfy the conditions for k=i\xe2\x88\x921.
In the first test case,
In the second test case,
In the third test case," "2900  x208"
    
2.02E+05 "Complex Segments (Hard Version)" "binary search, data structures, divide and conquer, dsu, greedy, math, sortings" "This is the hard version of the problem. In this version, the constraints on n and the time limit are higher. You can make hacks only if both versions of the problem are solved.
A set of (closed) segments is complex if it can be partitioned into some subsets such that 
You are given n segments [l1,r1],[l2,r2],\xe2\x80\xa6,[ln,rn]. Find the maximum size of a complex subset of these segments.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4103). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of segments.
The second line of each test case contains n integers l1,l2,\xe2\x80\xa6,ln (1\xe2\x89\xa4li\xe2\x89\xa42n)ï¿½\xe2\x80\x94 the left endpoints of the segments.
The third line of each test case contains n integers r1,r2,\xe2\x80\xa6,rn (li\xe2\x89\xa4ri\xe2\x89\xa42n)ï¿½\xe2\x80\x94 the right endpoints of the segments.
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integer: the maximum size of a complex subset of the given segments.
In the first test case, all pairs of segments intersect, therefore it is optimal to form a single group containing all of the three segments.
In the second test case, there is no valid partition for all of the five segments. A valid partition with four segments is the following: {{[1,5],[2,4]},{[6,9],[8,10]}}.
In the third test case, it is optimal to make a single group containing all the segments except the second." "3400  x110"
    
2.02E+04 "Complex Segments (Easy Version)" "binary search, data structures, divide and conquer, dsu, greedy, math, sortings" "This is the easy version of the problem. In this version, the constraints on n and the time limit are lower. You can make hacks only if both versions of the problem are solved.
A set of (closed) segments is complex if it can be partitioned into some subsets such that 
You are given n segments [l1,r1],[l2,r2],\xe2\x80\xa6,[ln,rn]. Find the maximum size of a complex subset of these segments.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4103). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of segments.
The second line of each test case contains n integers l1,l2,\xe2\x80\xa6,ln (1\xe2\x89\xa4li\xe2\x89\xa42n)ï¿½\xe2\x80\x94 the left endpoints of the segments.
The third line of each test case contains n integers r1,r2,\xe2\x80\xa6,rn (li\xe2\x89\xa4ri\xe2\x89\xa42n)ï¿½\xe2\x80\x94 the right endpoints of the segments.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85104.
For each test case, output a single integer: the maximum size of a complex subset of the given segments.
In the first test case, all pairs of segments intersect, therefore it is optimal to form a single group containing all of the three segments.
In the second test case, there is no valid partition for all of the five segments. A valid partition with four segments is the following: {{[1,5],[2,4]},{[6,9],[8,10]}}.
In the third test case, it is optimal to make a single group containing all the segments except the second." "3300  x146"
    
2018D "Max Plus Min Plus Size" "data structures, dp, dsu, greedy, implementation, matrices, sortings" "You are given an array a1,a2,\xe2\x80\xa6,an of positive integers.
You can color some elements of the array red, but there cannot be two adjacent red elements (i.e., for 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921, at least one of ai and ai+1 must not be red).
Your score is the maximum value of a red element, plus the minimum value of a red element, plus the number of red elements. Find the maximum score you can get.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the given array.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer: the maximum possible score you can get after coloring some elements red according to the statement.
In the first test case, you can color the array as follows: [5,4,5]. Your score is max([5,5])+min([5,5])+size([5,5])=5+5+2=12. This is the maximum score you can get.
In the second test case, you can color the array as follows: [4,5,4]. Your score is max([5])+min([5])+size([5])=5+5+1=11. This is the maximum score you can get.
In the third test case, you can color the array as follows: [3,3,3,3,4,1,2,3,5,4]. Your score is max([3,3,4,3,4])+min([3,3,4,3,4])+size([3,3,4,3,4])=4+3+5=12. This is the maximum score you can get." "2200  x1571"
    
2018C "Tree Pruning" "brute force, dfs and similar, greedy, sortings, trees" "You are given a tree with n nodes, rooted at node 1. In this problem, a leaf is a non-root node with degree 1.
In one operation, you can remove a leaf and the edge adjacent to it (possibly, new leaves appear). What is the minimum number of operations that you have to perform to get a tree, also rooted at node 1, where all the leaves are at the same distance from the root?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of nodes.
Each of the next n\xe2\x88\x921 lines contains two integers u, v (1\xe2\x89\xa4u,v\xe2\x89\xa4n, u\xe2\x89\xa0v), describing an edge that connects u and v. It is guaranteed that the given edges form a tree.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output a single integer: the minimum number of operations needed to achieve your goal.
In the first two examples, the tree is as follows:
In the first example, by removing edges (1,3) and (2,5), the resulting tree has all leaves (nodes 6 and 7) at the same distance from the root (node 1), which is 3. The answer is 2, as it is the minimum number of edges that need to be removed to achieve the goal.
In the second example, removing edges (1,4) and (5,7) results in a tree where all leaves (nodes 4 and 5) are at the same distance from the root (node 1), which is 2." "1700  x6100"
    
2018B Speedbreaker "binary search, data structures, dp, greedy, implementation, two pointers" "There are n cities in a row, numbered 1,2,\xe2\x80\xa6,n left to right.
You win if, for each i, you conquer city i at a time no later than ai. A winning strategy may or may not exist, also depending on the starting city. How many starting cities allow you to win?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of cities.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the deadlines for conquering the cities.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer: the number of starting cities that allow you to win.
In the first test case, cities 2, 3, and 4 are good starting cities.
In the second test case, there are no good starting cities.
In the third test case, the only good starting city is city 5." "1900  x3902"
    
2018A "Cards Partition" "2-sat, brute force, greedy, implementation, math" "You have some cards. An integer between 1 and n is written on each card: specifically, for each i from 1 to n, you have ai cards which have the number i written on them.
There is also a shop which contains unlimited cards of each type. You have k coins, so you can buy at most k new cards in total, and the cards you buy can contain any integer between 1 and n, inclusive.
After buying the new cards, you must partition all your cards into decks, according to the following rules: 
Find the maximum possible size of a deck after buying cards and partitioning them optimally.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n, k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4k\xe2\x89\xa41016)ï¿½\xe2\x80\x94 the number of distinct types of cards and the number of coins.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa41010, \xe2\x88\x91ai\xe2\x89\xa51)ï¿½\xe2\x80\x94 the number of cards of type i you have at the beginning, for each 1\xe2\x89\xa4i\xe2\x89\xa4n.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer: the maximum possible size of a deck if you operate optimally.
In the first test case, you can buy one card with the number 1, and your cards become [1,1,1,1,2,2,3,3]. You can partition them into the decks [1,2],[1,2],[1,3],[1,3]: they all have size 2, and they all contain distinct values. You can show that you cannot get a partition with decks of size greater than 2, so the answer is 2.
In the second test case, you can buy two cards with the number 1 and one card with the number 3, and your cards become [1,1,1,1,2,2,2,2,2,2,3,3,4,4,5,5,5,5], which can be partitioned into [1,2,3],[1,2,4],[1,2,5],[1,2,5],[2,3,5],[2,4,5]. You can show that you cannot get a partition with decks of size greater than 3, so the answer is 3." "1600  x10074"
    
2014H "Robin Hood Archery" "data structures, divide and conquer, greedy, hashing" "Sheriff of Nottingham has organized a tournament in archery. It\'s the final round and Robin Hood is playing against Sheriff!
There are n targets in a row numbered from 1 to n. When a player shoots target i, their score increases by ai and the target i is destroyed. The game consists of turns and players alternate between whose turn it is. Robin Hood always starts the game, then Sheriff and so on. The game continues until all targets are destroyed. Both players start with score 0.
At the end of the game, the player with most score wins and the other player loses. If both players have the same score, it\'s a tie and no one wins or loses. In each turn, the player can shoot any target that wasn\'t shot before. Both play optimally to get the most score possible.
Sheriff of Nottingham has a suspicion that he might lose the game! This cannot happen, you must help Sheriff. Sheriff will pose q queries, each specifying l and r. This means that the game would be played only with targets l,l+1,\xe2\x80\xa6,r, as others would be removed by Sheriff before the game starts.
For each query l, r, determine whether the Sheriff can not lose the game when only considering the targets l,l+1,\xe2\x80\xa6,r.
The first line of input contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n, q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of targets and the queries Sheriff will pose.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the points for hitting each target.
Then follow q lines, each with two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the range of the targets that is considered for each query.
It is guaranteed that the sum of both n and q across all test cases does not exceed 2\xe2\x8b\x85105.
For each query, output ""YES"", if the Sheriff does not lose the game when only considering the targets l,l+1,\xe2\x80\xa6,r, and ""NO"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses." "1900  x3457"
    
2014G "Milky Days" "brute force, data structures, greedy, implementation" "Little John is as little as night is day \xe2\x80\x94 he was known to be a giant, at possibly 2.1 metres tall. It has everything to do with his love for milk.
His dairy diary has n entries, showing that he acquired ai pints of fresh milk on day di. Milk declines in freshness with time and stays drinkable for a maximum of k days. In other words, fresh milk acquired on day di will be drinkable between days di and di+k\xe2\x88\x921 inclusive.
Every day, Little John drinks drinkable milk, up to a maximum of m pints. In other words, if there are less than m pints of milk, he will drink them all and not be satisfied; if there are at least m pints of milk, he will drink exactly m pints and be satisfied, and it\'s a milk satisfaction day.
Little John always drinks the freshest drinkable milk first.
Determine the number of milk satisfaction days for Little John.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104), the number of test cases.
The first line of each test case consists of three integers n, m, k (1\xe2\x89\xa4n, m, k\xe2\x89\xa4105), the number of diary entries, the maximum pints needed for a milk satisfaction day, and the duration of milk\'s freshness.
Then follow n lines of each test case, each with two integers di and ai (1\xe2\x89\xa4di, ai\xe2\x89\xa4106), the day on which the milk was acquired and the number of pints acquired. They are sorted in increasing values of di, and all values of di are distinct.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer, the number of milk satisfaction days.
In the first test case, 5 pints of milk are good for 3 days before spoiling.
In the second test case, the following will happen: " "2200  x1259"
    
2014F "Sheriff's Defense" "dfs and similar, dp, greedy, trees" "The folk hero Robin Hood has been troubling Sheriff of Nottingham greatly. Sheriff knows that Robin Hood is about to attack his camps and he wants to be prepared.
Sheriff of Nottingham built the camps with strategy in mind and thus there are exactly n camps numbered from 1 to n and n\xe2\x88\x921 trails, each connecting two camps. Any camp can be reached from any other camp. Each camp i has initially ai gold. 
As it is now, all camps would be destroyed by Robin. Sheriff can strengthen a camp by subtracting exactly c gold from each of its neighboring camps and use it to build better defenses for that camp. Strengthening a camp doesn\'t change its gold, only its neighbors\' gold. A camp can have negative gold. 
After Robin Hood\'s attack, all camps that have been strengthened survive the attack, all others are destroyed.
What\'s the maximum gold Sheriff can keep in his surviving camps after Robin Hood\'s attack if he strengthens his camps optimally? 
Camp a is neighboring camp b if and only if there exists a trail connecting a and b. Only strengthened camps count towards the answer, as others are destroyed.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case begins with two integers n, c (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4c\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of camps and the gold taken from each neighboring camp for strengthening.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x92109\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial gold of each camp.
Then follow n\xe2\x88\x921 lines, each with integers u, v (1\xe2\x89\xa4u,v\xe2\x89\xa4n, u\xe2\x89\xa0v)ï¿½\xe2\x80\x94 meaning that there is a trail between u and v.
The sum of n over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
It is guaranteed that any camp is reachable from any other camp.
Output a single integer, the maximum gold Sheriff of Nottingham can keep in his surviving camps after Robin Hood\'s attack.
In the first test case, it is optimal to strengthen the second base. The final gold at each base is [1,3,0].
In the second test case, it is optimal to strengthen all bases. The final gold at each base is [2,4,2].
In the third test case, it is optimal to not strengthen any base." "2000  x3525"
    
2014E "Rendez-vous de Marian et Robin" "dfs and similar, graphs, shortest paths" "Absence makes the heart grow fonder. Marian sold her last ware at the Market at the same time Robin finished training at the Major Oak. They couldn\'t wait to meet, so they both start without delay.
The travel network is represented as n vertices numbered from 1 to n and m edges. The i-th edge connects vertices ui and vi, and takes wi seconds to travel (all wi are even). Marian starts at vertex 1 (Market) and Robin starts at vertex n (Major Oak).
In addition, h of the n vertices each has a single horse available. Both Marian and Robin are capable riders, and could mount horses in no time (i.e. in 0 seconds). Travel times are halved when riding. Once mounted, a horse lasts the remainder of the travel. Meeting must take place on a vertex (i.e. not on an edge). Either could choose to wait on any vertex.
Output the earliest time Robin and Marian can meet. If vertices 1 and n are disconnected, output \xe2\x88\x921 as the meeting is cancelled.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case consists of three integers n, m, h (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4h\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the number of vertices, the number of edges and the number of vertices that have a single horse.
The second line of each test case contains h distinct integers a1,a2,\xe2\x80\xa6,ah (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the vertices that have a single horse available.
Then follow m lines of each test case, each with three integers ui, vi, wi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n,2\xe2\x89\xa4wi\xe2\x89\xa4106)ï¿½\xe2\x80\x94 meaning that there is an edge between vertices ui and vi with travel cost wi seconds without a horse.
There are no self loops or multiple edges. By good fortune, all wi are even integers.
It is guaranteed that the sums of both n and m over all test cases do not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer, the earliest time Robin and Marian can meet. If it is impossible for them to meet, output \xe2\x88\x921.
In the first test case, Marian rides from vertex 1 to vertex 2, Robin waits.
In the second test case, vertices 1 and 3 are not connected.
In the third test case, both Marian and Robin travel to vertex 2 to meet.
In the fourth test case, Marian travels to vertex 2 without a horse, mounts the horse at vertex 2 and rides to vertex 3 to meet Robin.
In the fifth test case, Marian travels to vertex 2 without a horse, mounts the horse at vertex 2 and rides back to vertex 1 and then to vertex 3. Robin waits." "1800  x5546"
    
2014D "Robert Hood and Mrs Hood" "brute force, data structures, greedy, sortings" "Robin\'s brother and mother are visiting, and Robin gets to choose the start day for each visitor.
All days are numbered from 1 to n. Visitors stay for d continuous days, all of those d days must be between day 1 and n inclusive.
Robin has a total of k risky \'jobs\' planned. The i-th job takes place between days li and ri inclusive, for 1\xe2\x89\xa4i\xe2\x89\xa4k. If a job takes place on any of the d days, the visit overlaps with this job (the length of overlap is unimportant).
Robin wants his brother\'s visit to overlap with the maximum number of distinct jobs, and his mother\'s the minimum.
Find suitable start days for the visits of Robin\'s brother and mother. If there are multiple suitable days, choose the earliest one.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case consists of three integers n, d, k (1\xe2\x89\xa4n\xe2\x89\xa4105,1\xe2\x89\xa4d,k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the number of total days, duration of the visits, and the number of jobs. 
Then follow k lines of each test case, each with two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the start and end day of each job.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output two integers, the best starting days of Robin\'s brother and mother respectively. Both visits must fit between day 1 and n inclusive.
In the first test case, the only job fills all 2 days, both should visit on day 1.
In the second test case, day 2 overlaps with 2 jobs and day 1 overlaps with only 1.
In the third test case, Robert visits for days [1,2], Mrs. Hood visits for days [4,5]." "1400  x11972"
    
2014C "Robin Hood in Town" "binary search, greedy, math" "Look around, the rich are getting richer, and the poor are getting poorer. We need to take from the rich and give to the poor. We need Robin Hood!
There are n people living in the town. Just now, the wealth of the i-th person was ai gold. But guess what? The richest person has found an extra pot of gold! 
More formally, find an aj=max(a1,a2,\xe2\x80\xa6,an), change aj to aj+x, where x is a non-negative integer number of gold found in the pot. If there are multiple maxima, it can be any one of them.
A person is unhappy if their wealth is strictly less than half of the average wealth\xe2\x88\x97. 
If strictly more than half of the total population n are unhappy, Robin Hood will appear by popular demand.
Determine the minimum value of x for Robin Hood to appear, or output \xe2\x88\x921 if it is impossible.
\xe2\x88\x97The average wealth is defined as the total wealth divided by the total population n, that is, \xe2\x88\x91ain, the result is a real number.
The first line of input contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the total population.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the wealth of each person.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output one integerï¿½\xe2\x80\x94 the minimum number of gold that the richest person must find for Robin Hood to appear. If it is impossible, output \xe2\x88\x921 instead.
In the first test case, it is impossible for a single person to be unhappy.
In the second test case, there is always 1 happy person (the richest).
In the third test case, no additional gold are required, so the answer is 0.
In the fourth test case, after adding 15 gold, the average wealth becomes 254, and half of this average is 258, resulting in 3 people being unhappy.
In the fifth test case, after adding 16 gold, the average wealth becomes 315, resulting in 3 people being unhappy." "1100  x21359"
    
2014B "Robin Hood and the Major Oak" math "The Major Oak in Sherwood is known for its majestic foliage, which provided shelter to Robin Hood and his band of merry men and women.
The Major Oak grows ii new leaves in the i-th year. It starts with 1 leaf in year 1.
Leaves last for k years on the tree. In other words, leaves grown in year i last between years i and i+k\xe2\x88\x921 inclusive.
Robin considers even numbers lucky. Help Robin determine whether the Major Oak will have an even number of leaves in year n.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case consists of two integers n, k (1\xe2\x89\xa4n\xe2\x89\xa4109, 1\xe2\x89\xa4k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the requested year and the number of years during which the leaves remain.
For each test case, output one line, ""YES"" if in year n the Major Oak will have an even number of leaves and ""NO"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, there is only 1 leaf.
In the second test case, k=1, so in the 2-nd year there will be 22=4 leaves.
In the third test case, k=2, so in the 2-nd year there will be 1+22=5 leaves.
In the fourth test case, k=2, so in the 3-rd year there will be 22+33=4+27=31 leaves." "800  x28050"
    
2014A "Robin Helps" "greedy, implementation" "The heroic outlaw Robin Hood is famous for taking from the rich and giving to the poor.
Robin encounters n people starting from the 1-st and ending with the n-th. The i-th person has ai gold. If ai\xe2\x89\xa5k, Robin will take all ai gold, and if ai=0, Robin will give 1 gold if he has any. Robin starts with 0 gold.
Find out how many people Robin gives gold to.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n, k (1\xe2\x89\xa4n\xe2\x89\xa450,1\xe2\x89\xa4k\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of people and the threshold at which Robin Hood takes the gold.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the gold of each person.
For each test case, output a single integer, the number of people that will get gold from Robin Hood.
In the first test case, Robin takes 2 gold from the first person and gives a gold to the second person.
In the second test case, Robin takes 3 gold and gives 1 gold to each of the next 2 people.
In the third test case, Robin takes 3 gold and so only gives gold to 3 other people." "800  x36698"
    
2013F2 "Game in Tree (Hard Version)" "binary search, data structures, trees" "This is the hard version of the problem. In this version, it is not guaranteed that u=v. You can make hacks only if both versions of the problem are solved.
Alice and Bob are playing a fun game on a tree. This game is played on a tree with n vertices, numbered from 1 to n. Recall that a tree with n vertices is an undirected connected graph with n\xe2\x88\x921 edges.
Alice and Bob take turns, with Alice going first. Each player starts at some vertex.
On their turn, a player must move from the current vertex to a neighboring vertex that has not yet been visited by anyone. The first player who cannot make a move loses.
You are given two vertices u and v. Represent the simple path from vertex u to v as an array p1,p2,p3,\xe2\x80\xa6,pm, where p1=u, pm=v, and there is an edge between pi and pi+1 for all i (1\xe2\x89\xa4i<m).
You need to determine the winner of the game if Alice starts at vertex 1 and Bob starts at vertex pj for each j (where 1\xe2\x89\xa4j\xe2\x89\xa4m).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of vertices in the tree.
Each of the following n\xe2\x88\x921 lines contains two integers a and b (1\xe2\x89\xa4a,b\xe2\x89\xa4n), denoting an undirected edge between vertices a and b. It is guaranteed that these edges form a tree.
The last line of each test case contains two integers u and v (2\xe2\x89\xa4u,v\xe2\x89\xa4n).
It is guaranteed that the path from u to v does not pass through vertex 1.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output m lines.
In the i-th line, print the winner of the game if Alice starts at vertex 1 and Bob starts at vertex pi. Print ""Alice"" (without quotes) if Alice wins, or ""Bob"" (without quotes) otherwise.
In the first test case, the path will be (2,3). If Bob starts at vertex 2, Alice will not be able to move anywhere on her first turn and will lose.
However, if Bob starts at vertex 3, Alice will move to vertex 2, and Bob will have no remaining vertices to visit and will lose." "3500  x102"
    
2013F1 "Game in Tree (Easy Version)" "binary search, brute force, data structures, dp, games, greedy, implementation, trees" "This is the easy version of the problem. In this version, u=v. You can make hacks only if both versions of the problem are solved.
Alice and Bob are playing a fun game on a tree. This game is played on a tree with n vertices, numbered from 1 to n. Recall that a tree with n vertices is an undirected connected graph with n\xe2\x88\x921 edges.
Alice and Bob take turns, with Alice going first. Each player starts at some vertex.
On their turn, a player must move from the current vertex to a neighboring vertex that has not yet been visited by anyone. The first player who cannot make a move loses.
You are given two vertices u and v. Represent the simple path from vertex u to v as an array p1,p2,p3,\xe2\x80\xa6,pm, where p1=u, pm=v, and there is an edge between pi and pi+1 for all i (1\xe2\x89\xa4i<m).
You need to determine the winner of the game if Alice starts at vertex 1 and Bob starts at vertex pj for each j (where 1\xe2\x89\xa4j\xe2\x89\xa4m).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of vertices in the tree.
Each of the following n\xe2\x88\x921 lines contains two integers a and b (1\xe2\x89\xa4a,b\xe2\x89\xa4n), denoting an undirected edge between vertices a and b. It is guaranteed that these edges form a tree.
The last line of each test case contains two integers u and v (2\xe2\x89\xa4u,v\xe2\x89\xa4n, u=v).
It is guaranteed that the path from u to v does not pass through vertex 1.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output m lines.
In the i-th line, print the winner of the game if Alice starts at vertex 1 and Bob starts at vertex pi. Print ""Alice"" (without quotes) if Alice wins, or ""Bob"" (without quotes) otherwise.
In the first test case, the path will be (2,2). Bob starts at vertex 2, Alice will not be able to move anywhere on her first turn and will lose.
In the second test case, the path will be (3,3). Bob starts at vertex 3, Alice will move to vertex 2, and Bob will have no remaining vertices to visit and will lose." "2700  x470"
    
2013E "Prefix GCD" "brute force, dp, greedy, math, number theory" "Since Mansur is tired of making legends, there will be no legends for this task.
You are given an array of positive integer numbers a1,a2,\xe2\x80\xa6,an. The elements of the array can be rearranged in any order. You need to find the smallest possible value of the expression gcd(a1)+gcd(a1,a2)+\xe2\x80\xa6+gcd(a1,a2,\xe2\x80\xa6,an), where gcd(a1,a2,\xe2\x80\xa6,an) denotes the greatest common divisor (GCD) of a1,a2,\xe2\x80\xa6,an.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single number n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the size of the array.
The second line of each test case contains n numbers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the initial array.
The sum of n over all test cases does not exceed 105.
The sum of max(a1,a2,\xe2\x80\xa6,an) over all test cases does not exceed 105.
For each test case, output a single number on a separate lineï¿½\xe2\x80\x94 the answer to the problem.
In the first test case, the elements can be rearranged as follows: [2,4,2]. Then the answer will be gcd(2)+gcd(2,4)+gcd(2,4,2)=2+2+2=6.
In the third test case, the elements can be rearranged as follows: [6,10,15]. Then the answer will be gcd(6)+gcd(6,10)+gcd(6,10,15)=6+2+1=9." "2200  x3159"
    
2013D "Minimize the Difference" "binary search, greedy" "Zhan, tired after the contest, gave the only task that he did not solve during the contest to his friend, Sungat. However, he could not solve it either, so we ask you to try to solve this problem.
You are given an array a1,a2,\xe2\x80\xa6,an of length n. We can perform any number (possibly, zero) of operations on the array.
In one operation, we choose a position i (1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921) and perform the following action: 
Find the minimum possible value of max(a1,a2,\xe2\x80\xa6,an)\xe2\x88\x92min(a1,a2,\xe2\x80\xa6,an).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41012).
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer: the minimum possible value of max(a1,a2,\xe2\x80\xa6,an)\xe2\x88\x92min(a1,a2,\xe2\x80\xa6,an).
In the third testcase, you can perform the operation twice with i=1.
After that, the array is a=[2,3,2,3], and max(2,3,2,3)\xe2\x88\x92min(2,3,2,3)=3\xe2\x88\x922=1." "1900  x5970"
    
2013C "Password Cracking" "constructive algorithms, interactive, strings" "Dimash learned that Mansur wrote something very unpleasant about him to a friend, so he decided to find out his password at all costs and discover what exactly he wrote.
Believing in the strength of his password, Mansur stated that his passwordï¿½\xe2\x80\x94 is a binary string of length n. He is also ready to answer Dimash\'s questions of the following type:
Dimash says a binary string t, and Mansur replies whether it is true that t is a substring of his password.
Help Dimash find out the password in no more than 2n operations; otherwise, Mansur will understand the trick and stop communicating with him.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
At the beginning of each test case, first read n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the size of the binary string. Then proceed to guessing it.
To guess each string s, you can make no more than 2n queries of the following type:
In response to this query, you will receive 1 if t is a substring of s, and 0 otherwise.
Once you receive the answer, output a single string in the following format:
After that, proceed to solve the next test case.
If you make an incorrect attempt or exceed the limit of 2n attempts, you will receive \xe2\x88\x921 instead of an answer and get the verdict Wrong answer. In this case, your program should terminate immediately to avoid undefined verdicts.
After outputting the queries, do not forget to output a newline character and flush the output buffer. Otherwise, you will receive the verdict Solution ""hung"". To flush the buffer, use: 
Hacks:
To use hacks, use the following format of tests:
The first line should contain a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case should contain a single number n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the length of the string. The second line should contain a binary string of size n.
In the first example, the string 010 is given. Therefore, the answers to the queries are as follows:
""? 00"" 00 is not a substring of 010, so the answer is 0.
""? 000"" 000 is not a substring, so the answer is 0.
""? 010"" 010 is a substring, so the answer is 1.
In the second example, the string is 1100, in the third 0110, and in the fourth 10." "1400  x11546"
    
2013B "Battle for Survive" "constructive algorithms, greedy, math" "Eralim, being the mafia boss, manages a group of n fighters. Fighter i has a rating of ai.
Eralim arranges a tournament of n\xe2\x88\x921 battles, in each of which two not yet eliminated fighters i and j (1\xe2\x89\xa4i<j\xe2\x89\xa4n) are chosen, and as a result of the battle, fighter i is eliminated from the tournament, and the rating of fighter j is reduced by the rating of fighter i. That is, aj is decreased by ai. Note that fighter j\'s rating can become negative. The fighters indexes do not change.
Eralim wants to know what maximum rating the last remaining fighter can preserve if he chooses the battles optimally.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of fighters.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the ratings of the fighters.
The sum of n over all testcases does not exceed 2\xe2\x8b\x85105.
For each testcase, output a single integerï¿½\xe2\x80\x94 the maximum rating that the last remaining fighter can preserve.
In the first example, you can arrange a fight between fighters with indices 1 and 2, where the fighter with index 2 will win. The rating of the last fighter, that is, the fighter with index 2, will be 1\xe2\x88\x922=\xe2\x88\x921.
In the second example, you can first conduct a fight between fighters with indices 1 and 2, where the fighter with index 2 will win, and then conduct a fight between fighters with indices 2 and 3, where the fighter with index 3 will win.
The rating of the fighter with index 2 after the first fight will be 2\xe2\x88\x922=0. The rating of the fighter with index 3 after the second fight will be 8\xe2\x88\x920=8." "900  x22834"
    
2013A "Zhan's Blender" "constructive algorithms, math" "Today, a club fair was held at ""NSPhM"". In order to advertise his pastry club, Zhan decided to demonstrate the power of his blender.
To demonstrate the power of his blender, Zhan has n fruits.
The blender can mix up to x fruits per second.
In each second, Zhan can put up to y fruits into the blender. After that, the blender will blend min(x,c) fruits, where c is the number of fruits inside the blender. After blending, blended fruits are removed from the blender.
Help Zhan determine the minimum amount of time required for Zhan to blend all fruits.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains one integer n (0\xe2\x89\xa4n\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of fruits Zhan has.
The second line of each test case contains two integers x and y (1\xe2\x89\xa4x,y\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of fruits the blender can blend per second and the number of fruits Zhan can put into the blender per second.
For each testcase, output a single integerï¿½\xe2\x80\x94 the minimum number of seconds to blend all fruits.
In the first example, you can first put 2 fruits in the blender. After that, the blender will mix these 2 fruits, and in the end, there will be 0 fruits left in the blender. Then you can put 3 fruits into the blender, after which the blender will mix these 3 fruits.
In the second example, you can put 1 fruit into the blender 3 times.
In the third example, you can first put 3 fruits into the blender, then add another 3 fruits." "800  x26957"
    
2011I "Stack and Queue" "*special problem, data structures, divide and conquer" "There are 2 queues of patients at the doors of two doctors. The first doctor sees patients in the usual order of the queueï¿½\xe2\x80\x94 whoever arrived first will be seen first. The second doctor does the oppositeï¿½\xe2\x80\x94 he sees those who arrived last first. Thus, there is a queue for the first doctor and a stack for the second doctor. A patient can be in both the queue and the stack. Each patient is characterized by the time their visit to the doctor will take (the time is the same for both doctors).
When the appointments begin, the doctors will see patients in the order of the queue and stack, respectively. As soon as a doctor finishes with one patient, he will call the next one.
But there is one problem: if a patient is in both the queue and the stack, and he is called to one doctor first and then to the other, while he has not yet finished with the first one, confusion will arise. It is allowed for a patient to go to the second doctor at the exact moment he finishes with the first doctor.
The current configuration of the queue and stack is called good if the doctors can see all the patients without any confusion arising.
Initially, both the queue and the stack are empty. There are three types of queries: 
It is guaranteed that after each query, each patient is no more than once in the queue and no more than once in the stack.
After each query, you need to determine if the current configuration is good.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of requests.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 for each patient, the time their visit to the doctor will take.
Each of the following n lines contains two integers t and x (1\xe2\x89\xa4t\xe2\x89\xa43; 1\xe2\x89\xa4x\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the type of query and the patient\'s index. It is guaranteed that: 
After each query, print ""YES"", if the current configuration is good, and ""NO"" otherwise.
In the first test, there are the following configurations: 
In the second test, the configuration after query 4 is as follows: 
After request 5, the next configuration is: 
After request 6, the next configuration is: 
Patient 2 must be at both doctors at the same time.
After request 7, the next configuration is: 
Patient 2 must be at both doctors at the same time." " x14"
    
2011H "Strange Matrix" "*special problem, graphs, greedy" "You are given a matrix a of size n\xc3\x97m, consisting of integers from 0 to 31 inclusive.
Let\'s call the matrix strange if for every two distinct rows i and j, both of the following conditions hold: 
You can perform the following operation any number of times: take any row of the matrix and a number y from 0 to 31 inclusive; then apply the bitwise XOR with the number y to all elements of the selected row. The cost of such an operation is equal to y.
Your task is to calculate the minimum cost to make the matrix strange, or report that it is impossible.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, m, and k (1\xe2\x89\xa4n,m\xe2\x89\xa450; 1\xe2\x89\xa4k\xe2\x89\xa4m).
Next, there are n lines, the i-th of which contains m integers ai,1,ai,2,\xe2\x80\xa6,ai,m (0\xe2\x89\xa4ai,j\xe2\x89\xa431).
For each test case, output one integerï¿½\xe2\x80\x94 the minimum cost to make the matrix strange, or -1 if it is impossible to make the matrix strange." " x45"
    
2011G "Removal of a Permutation" "*special problem" "You are given a permutation p of length n.
You can perform operations of two types: 
For each integer from 1 to (n\xe2\x88\x921), calculate the minimum number of operations required to remove that integer from the permutation.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4250000).
The second line of each test case contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n). The array p is a permutation.
Additional constraints on the input: the sum of n over all test cases does not exceed 250000.
For each test case, print (n\xe2\x88\x921) integers. The i-th of them should be equal to the minimum number of operations required to remove i from the permutation." " x38"
    
2011F "Good Subarray" "*special problem, data structures, greedy" "You are given an integer array a of size n.
Let\'s call an array good if it can be obtained using the following algorithm: create an array consisting of any single integer; and then perform the following operation an arbitrary number of times: choose an element from the already existing array (let\'s call it x) and add x, (x\xe2\x88\x921), or (x+1) to the end of the array.
For example, the arrays [1,2,1], [5] and [3,2,1,4] are good, while [2,4] and [3,1,2] are not.
Your task is to count the number of good contiguous subarrays of the array a. Two subarrays that have the same elements but are in different positions of the array a are considered different.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
Additional constraint on the input: the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the number of good contiguous subarrays of the array a.
In the first example, the following four subarrays are good:
In the second example, the only subarray which is not good is the subarray from the 3-rd element to the 4-th element." " x114"
    
2011E "Rock-Paper-Scissors Bot" "*special problem, greedy, strings" "Rock-Paper-Scissors is a game for two players. It is played in rounds. During each round, every player chooses one of three moves: Rock, Paper, or Scissors. Depending on the chosen moves, the following happens:
Monocarp decided to play against a bot. During the game, Monocarp noticed that the bot\'s behavior is very predictable: 
Monocarp has a favorite string s, consisting of the characters R, P, and/or S. Monocarp decided to play a series of rounds against the bot. However, he wants both of the following conditions to be met: 
Help Monocarp and calculate the minimum number of rounds he needs to play against the bot to satisfy both of the aforementioned conditions.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a string s (1\xe2\x89\xa4|s|\xe2\x89\xa42\xe2\x8b\x85105), consisting of the characters R, P, and/or S.
Additional constraint on the input: the sum of the lengths of the strings s over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum number of rounds Monocarp needs to play against the bot to satisfy both of the aforementioned conditions.
In the first example, Monocarp can play PPR, then the bot\'s moves are RSS, and the score is 2:1 in favor of Monocarp.
In the second example, Monocarp can play P, then the bot\'s moves are R, and the score is 1:0 in favor of Monocarp.
In the third example, Monocarp can play RPR, then the bot\'s moves are RPS, and the score is 1:0 in favor of Monocarp.
In the fourth example, Monocarp can play RRRSPR, then the bot\'s moves are RPPPRS, and the score is 3:2 in favor of Monocarp.
In the fifth example, Monocarp can play PRRSPRS, then the bot\'s moves are RSPPRSP, and the score is 6:1 in favor of Monocarp.
In the sixth example, Monocarp can play PRRRS, then the bot\'s moves are RSPPP, and the score is 3:2 in favor of Monocarp.
In the seventh example, Monocarp can play RSR, then the bot\'s moves are RPR, and the score is 1:0 in favor of Monocarp." " x159"
    
2011D "Among Wolves" "*special problem" "In a game you started playing recently, there is a field that can be represented as a rectangular grid. The field has 2 rows and n columnsï¿½\xe2\x80\x94 2n cells in total.
Some cells are empty, but some are occupied by wolves. In the beginning of the game, you have one sheep in some cell, and you\'d like to save it from wolves.
Wolves will attack you at night, so you still have some time for preparation. You have two ways to deal with wolves: 
Let\'s say that a wolf can reach the sheep if there is a path that starts at the wolf\'s cell and finishes at the sheep\'s cell. This path shouldn\'t contain any cells with trenches, and each two consecutive cells in the path should be neighbors (share a side).
What is the minimum total amount of money you should pay to ensure that none of the wolves can reach the sheep?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41200)ï¿½\xe2\x80\x94 the number of test cases. Next, t independent cases follow.
The first line of each test case contains three integers n, h, and b (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4h,b\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the size of the grid and corresponding costs.
The next two lines contain a description of the grid. The j-th character in the i-th line is either \'.\', \'S\' or \'W\': 
Additional constraints: 
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum total amount of money you should pay to save your sheep.
One of the optimal strategies in the first test case of the second test can be shown like this: " " x257"
    
2011C "Split the Expression" "*special problem" "You are given a string s of the form <block of digits>+<block of digits>+...+<block of digits>. Every block of digits consists of at least 2 and at most 13 digits; every digit is from 1 to 9.
You have to split this string into expressions of the form <integer>+<integer>. Every expression must be a contiguous part of the given string, and every character of the given string must belong to exactly one expression. For example, if you have a string 123+456+789+555, then:
Among all allowed ways to split the string, find one which maximizes the sum of results of all expressions you get, and print this sum.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x94 the number of test cases.
Each test case consists of one line containing the string s (5\xe2\x89\xa4|s|\xe2\x89\xa41000) of the form <block of digits>+<block of digits>+...+<block of digits>. The string contains at least one \'+\' sign. Every block of digits consists of at least 2 and at most 13 digits; every digit is from 1 to 9.
For each test case, print one integer \xe2\x80\x94 the maximum possible sum of results of all expressions you get after splitting the string.
In the first test case of the example, you should split the string into expressions 123+4, 56+7 and 89+555. The sum of results of these expressions is 834.
In the second test case of the example, the given string is already a valid expression and cannot be split any further." " x344"
    
2011B Shuffle "*special problem" "Yes, this is another one of those constructive permutation problems.
You are given an integer n. You have to construct a permutation p of size n, i.\xe2\x80\x89e. an array of n integers, where every integer from 1 to n appears exactly once.
Every pair of adjacent elements in the permutation (pi and pi+1) must meet the following condition:
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa499) \xe2\x80\x94 the number of test cases.
Each test case consists of one line, containing one integer n (2\xe2\x89\xa4n\xe2\x89\xa4100).
For each test case, print the answer as follows:" " x619"
    
2011A "Problem Solving" "*special problem" "Jane has decided to solve a list of n problems on Codeforces. The i-th problem in her list has difficulty di, and the last problem in the list is the hardest one (for every problem j<n, dj<dn).
Jane\'s problem-solving skill is some integer x (unknown to you). If a problem\'s difficulty is greater than x, then Jane cannot solve it, otherwise she can solve it.
Jane has solved all problems form the list, except for the last one \xe2\x80\x94 she found out that it was too difficult for her. Can you uniquely determine the value of x \xe2\x80\x94 Jane\'s problem solving skill?
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
Each test case consists of two lines:
Additional constraint on the input: in every test case, the last problem is more difficult than every other problem (i.\xe2\x80\x89e. dn>dj for every j<n). This means that at least one possible value of x exists.
For each test case, print one line:
In the second test case of the example, the value of x could be 11, but it also could be 10 (other possible values for x also exist)." " x1007"
    
2010C2 "Message Transmission Error (hard version)" "hashing, string suffix structures, strings, two pointers" "This is a more difficult version of the problem. It differs from the easy one only by the constraints.
At the Berland State University, the local network between servers does not always operate without errors. When transmitting two identical messages consecutively, an error may occur, resulting in the two messages merging into one. In this merging, the end of the first message coincides with the beginning of the second. Of course, the merging can only occur at identical characters. The length of the merging must be a positive number less than the length of the message text.
For example, when transmitting two messages ""abrakadabra"" consecutively, it is possible that it will be transmitted with the described type of error, resulting in a message like ""abrakadabrabrakadabra"" or ""abrakadabrakadabra\' (in the first case, the merging occurred at one character, and in the second case, at four).
Given the received message t, determine if it is possible that this is the result of an error of the described type in the operation of the local network, and if so, determine a possible value of s.
A situation where two messages completely overlap each other should not be considered an error. For example, if the received message is ""abcd"", it should be considered that there is no error in it. Similarly, simply appending one message after another is not a sign of an error. For instance, if the received message is ""abcabc"", it should also be considered that there is no error in it.
The input consists of a single non-empty string t, consisting of lowercase letters of the Latin alphabet. The length of the string t does not exceed 4\xc2\xb7105 characters.
If the message t cannot contain an error, output ""NO"" (without quotes) in a single line of output.
Otherwise, in the first line, output ""YES"" (without quotes), and in the next line, output the string s \xe2\x80\x94 a possible message that could have led to the error. If there are multiple possible answers, any of them is acceptable.
In the second example, a suitable answer could also be the string ""acacaca""." "1700  x3087"
    
2010C1 "Message Transmission Error (easy version)" "brute force, strings" "This is a simplified version of the problem. It differs from the difficult one only in its constraints.
At the Berland State University, the local network between servers does not always operate without errors. When transmitting two identical messages consecutively, an error may occur, resulting in the two messages merging into one. In this merging, the end of the first message coincides with the beginning of the second. Of course, the merging can only occur at identical characters. The length of the merging must be a positive number less than the length of the message text.
For example, when transmitting two messages ""abrakadabra"" consecutively, it is possible that it will be transmitted with the described type of error, resulting in a message like ""abrakadabrabrakadabra"" or ""abrakadabrakadabra\' (in the first case, the merging occurred at one character, and in the second case, at four).
Given the received message t, determine if it is possible that this is the result of an error of the described type in the operation of the local network, and if so, determine a possible value of s.
A situation where two messages completely overlap each other should not be considered an error. For example, if the received message is ""abcd"", it should be considered that there is no error in it. Similarly, simply appending one message after another is not a sign of an error. For instance, if the received message is ""abcabc"", it should also be considered that there is no error in it.
The input consists of a single non-empty string t, consisting of lowercase letters of the Latin alphabet. The length of the string t does not exceed 100 characters.
If the message t cannot contain an error, output ""NO"" (without quotes) in a single line of output.
Otherwise, in the first line, output ""YES"" (without quotes), and in the next line, output the string s \xe2\x80\x94 a possible message that could have led to the error. If there are multiple possible answers, any of them is acceptable.
In the second example, a suitable answer could also be the string ""acacaca""." "1400  x6948"
    
2010B "Three Brothers" "brute force, implementation, math" "Three brothers agreed to meet. Let\'s number the brothers as follows: the oldest brother is number 1, the middle brother is number 2, and the youngest brother is number 3.
When it was time for the meeting, one of the brothers was late. Given the numbers of the two brothers who arrived on time, you need to determine the number of the brother who was late.
The first line of input contains two different integers a and b (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89a,\xe2\x80\x89b\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x893, a\xe2\x80\x89\xe2\x89\xa0\xe2\x80\x89b)ï¿½\xe2\x80\x94 the numbers of the brothers who arrived on time. The numbers are given in arbitrary order.
Output a single integerï¿½\xe2\x80\x94 the number of the brother who was late to the meeting." "800  x19662"
    
2010A "Alternating Sum of Numbers" "brute force, implementation, math" "You are given a sequence of integers. Output the alternating sum of this sequence. In other words, output a1\xe2\x88\x92a2+a3\xe2\x88\x92a4+a5\xe2\x88\x92\xe2\x80\xa6. That is, the signs of plus and minus alternate, starting with a plus.
The first line of the test contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases. Then follow t test cases.
The first line of each test case contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa450) \xe2\x80\x94 the length of the sequence. The second line of the test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4100).
Output t lines. For each test case, output the required alternating sum of the numbers." "800  x16649"
    
2009G3 "Yunli's Subarray Queries (extreme version)" "data structures, dp, implementation" "This is the extreme version of the problem. In this version, the output of each query is different from the easy and hard versions. It is also guaranteed that r\xe2\x89\xa5l+k\xe2\x88\x921 for all queries.
For an arbitrary array b, Yunli can perform the following operation any number of times:
Denote f(b) as the minimum number of operations she needs to perform until there exists a consecutive subarray\xe2\x88\x97 of length at least k in b.
Yunli is given an array a of size n and asks you q queries. In each query, you must output \xe2\x88\x91r\xe2\x88\x92k+1i=l\xe2\x88\x91rj=i+k\xe2\x88\x921f([ai,ai+1,\xe2\x80\xa6,aj]).
\xe2\x88\x97If there exists a consecutive subarray of length k that starts at index i (1\xe2\x89\xa4i\xe2\x89\xa4|b|\xe2\x88\x92k+1), then bj=bj\xe2\x88\x921+1 for all i<j\xe2\x89\xa4i+k\xe2\x88\x921.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, k, and q (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the array, the length of the consecutive subarray, and the number of queries.
The following line contains n integers a1,a2,...,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
The following q lines contain two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n, r\xe2\x89\xa5l+k\xe2\x88\x921) \xe2\x80\x94 the bounds of the query.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105 and the sum of q over all test cases does not exceed 2\xe2\x8b\x85105.
Output \xe2\x88\x91r\xe2\x88\x92k+1i=l\xe2\x88\x91rj=i+k\xe2\x88\x921f([ai,ai+1,\xe2\x80\xa6,aj]) for each query on a new line.
In the first query of the first testcase, we can calculate the answer for the query through the following: 
The answer to this query is 1+0+0=1." "2700  x328"
    
2009G2 "Yunli's Subarray Queries (hard version)" "binary search, data structures, dp" "This is the hard version of the problem. In this version, it is guaranteed that r\xe2\x89\xa5l+k\xe2\x88\x921 for all queries.
For an arbitrary array b, Yunli can perform the following operation any number of times:
Denote f(b) as the minimum number of operations she needs to perform until there exists a consecutive subarray\xe2\x88\x97 of length at least k in b.
Yunli is given an array a of size n and asks you q queries. In each query, you must output \xe2\x88\x91rj=l+k\xe2\x88\x921f([al,al+1,\xe2\x80\xa6,aj]).
\xe2\x88\x97If there exists a consecutive subarray of length k that starts at index i (1\xe2\x89\xa4i\xe2\x89\xa4|b|\xe2\x88\x92k+1), then bj=bj\xe2\x88\x921+1 for all i<j\xe2\x89\xa4i+k\xe2\x88\x921.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, k, and q (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the array, the length of the consecutive subarray, and the number of queries.
The following line contains n integers a1,a2,...,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
The following q lines contain two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n, r\xe2\x89\xa5l+k\xe2\x88\x921) \xe2\x80\x94 the bounds of the query.
It is guaranteed the sum of n over all test cases does not exceed 2\xe2\x8b\x85105 and the sum of q over all test cases does not exceed 2\xe2\x8b\x85105.
Output \xe2\x88\x91rj=l+k\xe2\x88\x921f([al,al+1,\xe2\x80\xa6,aj]) for each query on a new line.
In the second query of the first testcase, we calculate the following function values: 
The answer to this query is 3+2=5." "2200  x1196"
    
2009G1 "Yunli's Subarray Queries (easy version)" "binary search, data structures, two pointers" "This is the easy version of the problem. In this version, it is guaranteed that r=l+k\xe2\x88\x921 for all queries.
For an arbitrary array b, Yunli can perform the following operation any number of times:
Denote f(b) as the minimum number of operations she needs to perform until there exists a consecutive subarray\xe2\x88\x97 of length at least k in b.
Yunli is given an array a of size n and asks you q queries. In each query, you must output \xe2\x88\x91rj=l+k\xe2\x88\x921f([al,al+1,\xe2\x80\xa6,aj]). Note that in this version, you are only required to output f([al,al+1,\xe2\x80\xa6,al+k\xe2\x88\x921]).
\xe2\x88\x97If there exists a consecutive subarray of length k that starts at index i (1\xe2\x89\xa4i\xe2\x89\xa4|b|\xe2\x88\x92k+1), then bj=bj\xe2\x88\x921+1 for all i<j\xe2\x89\xa4i+k\xe2\x88\x921.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, k, and q (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the array, the length of the consecutive subarray, and the number of queries.
The following line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
The following q lines contain two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n, r=l+k\xe2\x88\x921) \xe2\x80\x94 the bounds of the query.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105 and the sum of q over all test cases does not exceed 2\xe2\x8b\x85105.
Output \xe2\x88\x91rj=l+k\xe2\x88\x921f([al,al+1,\xe2\x80\xa6,aj]) for each query on a new line.
In the first query of the first testcase, b=[1,2,3,2,1]. Yunli can make a consecutive subarray of length 5 in 2 moves: 
In the second query of the first testcase, b=[2,3,2,1,2]. Yunli can make a consecutive subarray of length 5 in 3 moves: " "1900  x3756"
    
2009F "Firefly's Queries" "bitmasks, data structures, flows, math" "Firefly is given an array a of length n. Let ci denote the i\'th cyclic shift\xe2\x88\x97 of a. She creates a new array b such that b=c1+c2+\xe2\x8b\xaf+cn where + represents concatenation\xe2\x80\xa0. 
Then, she asks you q queries. For each query, output the sum of all elements in the subarray of b that starts from the l-th element and ends at the r-th element, inclusive of both ends.
\xe2\x88\x97The x-th (1\xe2\x89\xa4x\xe2\x89\xa4n) cyclic shift of the array a is ax,ax+1\xe2\x80\xa6an,a1,a2\xe2\x80\xa6ax\xe2\x88\x921. Note that the 1-st shift is the initial a.
\xe2\x80\xa0The concatenation of two arrays p and q of length n (in other words, p+q) is p1,p2,...,pn,q1,q2,...,qn.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the array and the number of queries.
The following line contains n integers a1,a2,...,an (1\xe2\x89\xa4ai\xe2\x89\xa4106).
The following q lines contain two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n2) \xe2\x80\x94 the left and right bounds of the query.
Note that the large inputs may require the use of 64-bit integers.
It is guaranteed that the sum of n does not exceed 2\xe2\x8b\x85105 and the sum of q does not exceed 2\xe2\x8b\x85105.
For each query, output the answer on a new line.
For the first test case, b=[1,2,3,2,3,1,3,1,2]." "1700  x6447"
    
2009E "Klee's SUPER DUPER LARGE Array!!!" "binary search, math, ternary search" "Klee has an array a of length n containing integers [k,k+1,...,k+n\xe2\x88\x921] in that order. Klee wants to choose an index i (1\xe2\x89\xa4i\xe2\x89\xa4n) such that x=|a1+a2+\xe2\x8b\xaf+ai\xe2\x88\x92ai+1\xe2\x88\x92\xe2\x8b\xaf\xe2\x88\x92an| is minimized. Note that for an arbitrary integer z, |z| represents the absolute value of z. 
Output the minimum possible value of x.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
Each test case contains two integers n and k (2\xe2\x89\xa4n,k\xe2\x89\xa4109) \xe2\x80\x94 the length of the array and the starting element of the array.
For each test case, output the minimum value of x on a new line.
In the first sample, a=[2,3]. When i=1 is chosen, x=|2\xe2\x88\x923|=1. It can be shown this is the minimum possible value of x.
In the third sample, a=[3,4,5,6,7]. When i=3 is chosen, x=|3+4+5\xe2\x88\x926\xe2\x88\x927|=1. It can be shown this is the minimum possible value of x." "1400  x13078"
    
2009D "Satyam and Counting" "geometry, math" "Satyam is given n distinct points on the 2D coordinate plane. It is guaranteed that 0\xe2\x89\xa4yi\xe2\x89\xa41 for all given points (xi,yi). How many different nondegenerate right triangles\xe2\x88\x97 can be formed from choosing three different points as its vertices?
Two triangles a and b are different if there is a point v such that v is a vertex of a but not a vertex of b.
\xe2\x88\x97A nondegenerate right triangle has positive area and an interior 90\xe2\x88\x98 angle.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of points.
The following n lines contain two integers xi and yi (0\xe2\x89\xa4xi\xe2\x89\xa4n, 0\xe2\x89\xa4yi\xe2\x89\xa41) \xe2\x80\x94 the i\'th point that Satyam can choose from. It is guaranteed that all (xi,yi) are pairwise distinct.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
Output an integer for each test case, the number of distinct nondegenerate right triangles that can be formed from choosing three points.
The four triangles in question for the first test case: " "1400  x14196"
    
2009C "The Legend of Freya the Frog" "implementation, math" "Freya the Frog is traveling on the 2D coordinate plane. She is currently at point (0,0) and wants to go to point (x,y). In one move, she chooses an integer d such that 0\xe2\x89\xa4d\xe2\x89\xa4k and jumps d spots forward in the direction she is facing. 
Initially, she is facing the positive x direction. After every move, she will alternate between facing the positive x direction and the positive y direction (i.e., she will face the positive y direction on her second move, the positive x direction on her third move, and so on). 
What is the minimum amount of moves she must perform to land on point (x,y)?
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
Each test case contains three integers x, y, and k (0\xe2\x89\xa4x,y\xe2\x89\xa4109,1\xe2\x89\xa4k\xe2\x89\xa4109).
For each test case, output the number of jumps Freya needs to make on a new line.
In the first sample, one optimal set of moves is if Freya jumps in the following way: (0,0) \xe2\x86\x92 (2,0) \xe2\x86\x92 (2,2) \xe2\x86\x92 (3,2) \xe2\x86\x92 (3,5) \xe2\x86\x92 (6,5) \xe2\x86\x92 (6,8) \xe2\x86\x92 (9,8) \xe2\x86\x92 (9,11). This takes 8 jumps." "1100  x25601"
    
2009B osu!mania "brute force, implementation" "You are playing your favorite rhythm game, osu!mania. The layout of your beatmap consists of n rows and 4 columns. Because notes at the bottom are closer, you will process the bottommost row first and the topmost row last. Each row will contain exactly one note, represented as a \'#\'.
For each note 1,2,\xe2\x80\xa6,n, in the order of processing, output the column in which the note appears.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x94 the number of test cases.
For each test case, the first line contains n (1\xe2\x89\xa4n\xe2\x89\xa4500) \xe2\x80\x94 the number of rows of the beatmap.
The following n lines contain 4 characters. The i-th line represents the i-th row of the beatmap from the top. It is guaranteed that the characters are either \'.\' or \'#\', and exactly one of the characters is \'#\'. 
It is guaranteed that the sum of n over all test cases does not exceed 500.
For each test case, output n integers on a new line, the column that the i-th note appears in for all i from 1 to n." "800  x41341"
    
2009A Minimize! "brute force, math" "You are given two integers a and b (a\xe2\x89\xa4b). Over all possible integer values of c (a\xe2\x89\xa4c\xe2\x89\xa4b), find the minimum value of (c\xe2\x88\x92a)+(b\xe2\x88\x92c).
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa455) \xe2\x80\x94 the number of test cases. 
Each test case contains two integers a and b (1\xe2\x89\xa4a\xe2\x89\xa4b\xe2\x89\xa410).
For each test case, output the minimum possible value of (c\xe2\x88\x92a)+(b\xe2\x88\x92c) on a new line.
In the first test case, you can choose c=1 and obtain an answer of (1\xe2\x88\x921)+(2\xe2\x88\x921)=1. It can be shown this is the minimum value possible.
In the second test case, you can choose c=6 and obtain an answer of (6\xe2\x88\x923)+(10\xe2\x88\x926)=7. It can be shown this is the minimum value possible." "800  x50540"
    
2008H "Sakurako's Test" "binary search, brute force, greedy, math, number theory" "Sakurako will soon take a test. The test can be described as an array of integers n and a task on it:
Given an integer x, Sakurako can perform the following operation any number of times:
Using this operation any number of times, she must find the minimum possible median\xe2\x88\x97 of the array a.
Sakurako knows the array but does not know the integer x. Someone let it slip that one of the q values of x will be in the next test, so Sakurako is asking you what the answer is for each such x.
\xe2\x88\x97The median of an array of length n is the element that stands in the middle of the sorted array (at the n+22-th position for even n, and at the n+12-th for odd)
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa4105) ï¿½\xe2\x80\x94 the number of elements in the array and the number of queries.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n) ï¿½\xe2\x80\x94 the elements of the array.
The following q lines each contain one integer x (1\xe2\x89\xa4x\xe2\x89\xa4n).
It is guaranteed that the sum of n across all test cases does not exceed 105. The same guarantee applies to the sum of q across all test cases.
For each test case, output q integers ï¿½\xe2\x80\x94 the answer for each query." "2100  x2881"
    
2008G "Sakurako's Task" "binary search, greedy, math, number theory" "Sakurako has prepared a task for you:
She gives you an array of n integers and allows you to choose i and j such that i\xe2\x89\xa0j and ai\xe2\x89\xa5aj, and then assign ai=ai\xe2\x88\x92aj or ai=ai+aj. You can perform this operation any number of times for any i and j, as long as they satisfy the conditions.
Sakurako asks you what is the maximum possible value of mexk\xe2\x88\x97 of the array after any number of operations.
\xe2\x88\x97mexk is the k-th non-negative integer that is absent in the array. For example, mex1({1,2,3})=0, since 0 is the first element that is not in the array, and mex2({0,2,4})=3, since 3 is the second element that is not in the array.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4k\xe2\x89\xa4109) ï¿½\xe2\x80\x94 the number of elements in the array and the value k for mexk.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109) ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the maximum mexk that can be achieved through the operations." "1800  x5111"
    
2008F "Sakurako's Box" "combinatorics, math, number theory" "Sakurako has a box with n balls. Each ball has it\'s value. She wants to bet with her friend that if the friend randomly picks two balls from the box (it could be two distinct balls, but they may have the same value), the product of their values will be the same as the number that Sakurako guessed.
Since Sakurako has a PhD in probability, she knows that the best number to pick is the expected value, but she forgot how to calculate it. Help Sakurako and find the expected value of the product of two elements from the array.
It can be shown that the expected value has the form PQ, where P and Q are non-negative integers, and Q\xe2\x89\xa00. Report the value of P\xe2\x8b\x85Q\xe2\x88\x921(mod109+7).
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) ï¿½\xe2\x80\x94 the number of elements in the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109) ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the value of P\xe2\x8b\x85Q\xe2\x88\x921(mod109+7).
For the first test, Sakurako\'s friend can pick these pairs of balls: (a1,a2), (a1,a3), (a2,a3). Their products equal to 3\xe2\x8b\x852=6 , 3\xe2\x8b\x853=9 , 3\xe2\x8b\x852=6 respectively, so the expected value is 6+9+63=7.
For the second test, Sakurako\'s friend can pick these pairs of balls: (a1,a2), (a1,a3), (a1,a4), (a2,a3), (a2,a4), (a3,a4). Their products equal to 2\xe2\x8b\x852=4 , 2\xe2\x8b\x852=4 , 2\xe2\x8b\x854=8, 2\xe2\x8b\x852=4, 2\xe2\x8b\x854=8, 2\xe2\x8b\x854=8 respectively, so the expected value is 4+4+8+4+8+86=366=6." "1400  x12435"
    
2008E "Alternating String" "brute force, data structures, dp, greedy, implementation, strings" "Sakurako really loves alternating strings. She calls a string s of lowercase Latin letters an alternating string if characters in the even positions are the same, if characters in the odd positions are the same, and the length of the string is even.
For example, the strings \'abab\' and \'gg\' are alternating, while the strings \'aba\' and \'ggwp\' are not.
As a good friend, you decided to gift such a string, but you couldn\'t find one. Luckily, you can perform two types of operations on the string: 
Since you are in a hurry, you need to determine the minimum number of operations required to make the string an alternating one.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single number n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) ï¿½\xe2\x80\x94 the length of the string.
The second line of each test case contains a string s, consisting of lowercase Latin letters.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of operations required to turn the string s into an alternating one.
For the string ababa, you can delete the first character to get baba, which is an alternating string.
For the string acdada, you can change the first two characters to get dadada, which is an alternating string." "1500  x9914"
    
2008D "Sakurako's Hobby" "dp, dsu, graphs, math" "For a certain permutation p\xe2\x88\x97 Sakurako calls an integer j reachable from an integer i if it is possible to make i equal to j by assigning i=pi a certain number of times.
If p=[3,5,6,1,2,4], then, for example, 4 is reachable from 1, because: i=1 \xe2\x86\x92 i=p1=3 \xe2\x86\x92 i=p3=6 \xe2\x86\x92 i=p6=4. Now i=4, so 4 is reachable from 1.
Each number in the permutation is colored either black or white.
Sakurako defines the function F(i) as the number of black integers that are reachable from i.
Sakurako is interested in F(i) for each 1\xe2\x89\xa4i\xe2\x89\xa4n, but calculating all values becomes very difficult, so she asks you, as her good friend, to compute this.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (the number 2 appears twice in the array), and [1,3,4] is also not a permutation (n=3, but the array contains 4).
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) ï¿½\xe2\x80\x94 the number of elements in the array.
The second line of each test case contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n) ï¿½\xe2\x80\x94 the elements of the permutation.
The third line of each test case contains a string s of length n, consisting of \'0\' and \'1\'. If si=0, then the number pi is colored black; if si=1, then the number pi is colored white.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output n integers F(1),F(2),\xe2\x80\xa6,F(n)." "1100  x19022"
    
2008C "Longest Good Array" "binary search, brute force, math" "Today, Sakurako was studying arrays. An array a of length n is considered good if and only if:
Sakurako has come up with boundaries l and r and wants to construct a good array of maximum length, where l\xe2\x89\xa4ai\xe2\x89\xa4r for all ai.
Help Sakurako find the maximum length of a good array for the given l and r.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4109).
For each test case, output a single integer ï¿½\xe2\x80\x94 the length of the longest good array Sakurako can form given l and r.
For l=1 and r=5, one possible array could be (1,2,5). It can be proven that an array of length 4 does not exist for the given l and r.
For l=2 and r=2, the only possible array is (2).
For l=10 and r=20, the only possible array is (10,11,13,16,20)." "800  x30132"
    
2008B "Square or Not" "brute force, math, strings" "A beautiful binary matrix is a matrix that has ones on its edges and zeros inside.
Today, Sakurako was playing with a beautiful binary matrix of size r\xc3\x97c and created a binary string s by writing down all the rows of the matrix, starting from the first and ending with the r-th. More formally, the element from the matrix in the i-th row and j-th column corresponds to the ((i\xe2\x88\x921)\xe2\x88\x97c+j)-th element of the string.
You need to check whether the beautiful matrix from which the string s was obtained could be squared. In other words, you need to check whether the string s could have been build from a square beautiful binary matrix (i.e., one where r=c).
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the string.
The second line of each test case contains the string s of length n. The string is always the result of writing out the strings of a beautiful matrix.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105.
Print ""Yes"", if the original matrix could have been square, and ""No"" otherwise.
For the second test case, string 1111 can be obtained from the matrix:
For the third test case, string 111101111 can be obtained from the matrix:
There is no square matrix in the fourth case, such that the string can be obtained from it." "800  x28360"
    
2008A "Sakurako's Exam" "brute force, constructive algorithms, greedy, math" "Today, Sakurako has a math exam. The teacher gave the array, consisting of a ones and b twos.
In an array, Sakurako must place either a \'+\' or a \'-\' in front of each element so that the sum of all elements in the array equals 0.
Sakurako is not sure if it is possible to solve this problem, so determine whether there is a way to assign signs such that the sum of all elements in the array equals 0.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains two integers a and b (0\xe2\x89\xa4a,b<10) ï¿½\xe2\x80\x94 the number of \'1\'s and the number of \'2\'s in the array.
For each test case, output ""Yes"" if you can make the sum of the entire array equal to 0, and ""No"" otherwise.
You can output each letter in any case (lowercase or uppercase). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive answer." "800  x35016"
    
2007C "Dora and C++" "math, number theory" "Dora has just learned the programming language C++!
However, she has completely misunderstood the meaning of C++. She considers it as two kinds of adding operations on the array c with n elements. Dora has two integers a and b. In one operation, she can choose one of the following things to do.
Note that a and b are constants, and they can be the same.
Let\'s define a range of array d as max(di)\xe2\x88\x92min(di). For instance, the range of the array [1,2,3,4] is 4\xe2\x88\x921=3, the range of the array [5,2,8,2,2,1] is 8\xe2\x88\x921=7, and the range of the array [3,3,3] is 3\xe2\x88\x923=0.
After any number of operations (possibly, 0), Dora calculates the range of the new array. You need to help Dora minimize this value, but since Dora loves exploring all by herself, you only need to tell her the minimized value.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains three integers n, a, and b (1\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4a,b\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the length of the array c and the constant values, respectively.
The second line of each test case contains n integers c1,c2,\xe2\x80\xa6,cn (1\xe2\x89\xa4ci\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial elements of the array c.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integer \xe2\x80\x94 the minimum possible range of the array after any number of operations.
In the first test case, we can increase c1=1 by a=5. The array c will become [6,3,4,4], and the range is 3. Note that there is more than one way to reach the answer.
In the second test case, we can increase c1=1 by a=2 and then increase c1=3 by b=3. Also, we can increase c2=3 by b=3 and increase c3=4 by a=2. The array c will become [6,6,6,6], and the range is 0." "1500  x12161"
    
2007B "Index and Maximum Value" "data structures, greedy" "After receiving yet another integer array a1,a2,\xe2\x80\xa6,an at her birthday party, Index decides to perform some operations on it.
Formally, there are m operations that she is going to perform in order. Each of them belongs to one of the two types:
For example, if the initial array a=[7,1,3,4,3], after performing the operation +ï¿½2ï¿½4, the array a=[7,1,4,5,4]. Then, after performing the operation -ï¿½1ï¿½10, the array a=[6,0,3,4,3].
Index is curious about the maximum value in the array a. Please help her find it after each of the m operations.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4m\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array and the number of operations.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial array a.
Then m lines follow, each line corresponds to the operation, in the following format: c l r (c\xe2\x88\x88{+,-}, l and r are integers, 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the description of the operation.
Note that the elements ai may not satisfy 1\xe2\x89\xa4ai\xe2\x89\xa4109 after some operations, as it is shown in the example.
It is guaranteed that the sum of n over all test cases does not exceed 105, and the sum of m over all test cases does not exceed 105.
For each test case, output one single line containing m integers, with the i-th of them describing the maximum value of the array after the i-th operation.
In the first test case, the process of the operations is listed below:
In the second test case, the process of the operations is listed below:" "900  x21092"
    
2007A "Dora's Set" "greedy, math, number theory" "Dora has a set s containing integers. In the beginning, she will put all integers in [l,r] into the set s. That is, an integer x is initially contained in the set if and only if l\xe2\x89\xa4x\xe2\x89\xa4r. Then she allows you to perform the following operations:
What is the maximum number of operations you can perform?
\xe2\x80\xa0Recall that gcd(x,y) means the greatest common divisor of integers x and y.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the range of integers in the initial set.
For each test case, output a single integer \xe2\x80\x94 the maximum number of operations you can perform.
In the first test case, you can choose a=1, b=2, c=3 in the only operation, since gcd(1,2)=gcd(2,3)=gcd(1,3)=1, and then there are no more integers in the set, so no more operations can be performed.
In the second test case, you can choose a=3, b=5, c=7 in the only operation.
In the third test case, you can choose a=11, b=19, c=20 in the first operation, a=13, b=14, c=15 in the second operation, and a=10, b=17, c=21 in the third operation. After the three operations, the set s contains the following integers: 12, 16, 18. It can be proven that it\'s impossible to perform more than 3 operations." "800  x22573"
    
2006F "Dora's Paint" "brute force, combinatorics, constructive algorithms, graphs, implementation" "Sadly, Dora poured the paint when painting the class mural. Dora considers the mural as the matrix b of size n\xc3\x97n. Initially, bi,j=0 for all 1\xe2\x89\xa4i,j\xe2\x89\xa4n.
Dora has only two brushes which have two different colors. In one operation, she can paint the matrix with one of two brushes:
Dora paints the matrix so that the resulting matrix b contains only 1 and 2.
For a matrix b, let f(b) denote the minimum number of operations needed to turn the initial matrix (containing only 0) into b. The beauty of a matrix b is the number of ways to paint the initial matrix in exactly f(b) operations to turn it into b. If there\'s no way to turn the initial matrix into b, the beauty of b is 0.
However, Dora made a uniformly random mistake; there\'s exactly one element different in the matrix a given to you from the real matrix b. That is, there is exactly one pair (i,j) such that ai,j=3\xe2\x88\x92bi,j.
Please help Dora compute the expected beauty of the real matrix b modulo 998244353 (all possible n2 mistakes have equal probability).
Since the size of the matrix is too large, Dora will only tell you the positions of m elements of color 1, and the remaining n2\xe2\x88\x92m elements have color 2.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and m (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4m\xe2\x89\xa4min(106,n2))ï¿½\xe2\x80\x94 the size of the matrix and the number of elements of color 1.
Then m lines follow, each containing two positive integers xi and yi (1\xe2\x89\xa4xi,yi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 denoting that axi,yi=1.
It is guaranteed that if i\xe2\x89\xa0j, then (xi,yi)\xe2\x89\xa0(xj,yj).
It is also guaranteed that the sum of n over all test cases does not exceed 4\xe2\x8b\x85105, and the sum of m over all test cases does not exceed 106.
For each test case, output a single integer \xe2\x80\x94 the expected beauty of the real matrix b, modulo 998244353.
In the first test case, the matrix a=[1122]. Let\'s consider changing the element (1,1) to calculate the answer.
It can be proved that the minimum steps to paint the initial matrix into [2122] is 3. We can first paint the first row into color 2, then paint the second column into color 1, and finally paint the second row into color 2. The process is listed below:
[0000]\xe2\x87\x92[2200]\xe2\x87\x92[2101]\xe2\x87\x92[2122]
It can be proved that this is the only way to paint the matrix in 3 steps. So the beauty of the matrix [2122] is 1. Similarly, if any other element of the matrix is changed, the beauty is always 1, so the expected beauty of the real matrix b is 1.
In the second test case, the matrix a=[1222]. Let\'s consider changing the element (2,2) to calculate the answer.
It can be proven that it\'s impossible to paint the initial matrix into [1221], so its beauty is 0. If any other element of the matrix is changed, the beauty is always 2, so the expected beauty is 0+2+2+24=64\xe2\x89\xa1499122178(mod998244353)." "3500  x116"
    
2006E "Iris's Full Binary Tree" "brute force, data structures, dfs and similar, trees" "Iris likes full binary trees.
Let\'s define the depth of a rooted tree as the maximum number of vertices on the simple paths from some vertex to the root. A full binary tree of depth dd is a binary tree of depth dd with exactly 2d\xe2\x88\x9212d\xe2\x88\x921 vertices.
Iris calls a tree a dd-binary tree if some vertices and edges can be added to it to make it a full binary tree of depth dd. Note that any vertex can be chosen as the root of a full binary tree.
Since performing operations on large trees is difficult, she defines the binary depth of a tree as the minimum dd satisfying that the tree is dd-binary. Specifically, if there is no integer d\xe2\x89\xa51d\xe2\x89\xa51 such that the tree is dd-binary, the binary depth of the tree is \xe2\x88\x921\xe2\x88\x921.
Iris now has a tree consisting of only vertex 11. She wants to add n\xe2\x88\x921n\xe2\x88\x921 more vertices to form a larger tree. She will add the vertices one by one. When she adds vertex ii (2\xe2\x89\xa4i\xe2\x89\xa4n2\xe2\x89\xa4i\xe2\x89\xa4n), she\'ll give you an integer pipi (1\xe2\x89\xa4pi<i1\xe2\x89\xa4pi<i), and add a new edge connecting vertices ii and pipi.
Iris wants to ask you the binary depth of the tree formed by the first ii vertices for each 1\xe2\x89\xa4i\xe2\x89\xa4n1\xe2\x89\xa4i\xe2\x89\xa4n. Can you tell her the answer?
Each test consists of multiple test cases. The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the final size of the tree.
The second line of each test case contains n\xe2\x88\x921n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6,pnp2,p3,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi<i1\xe2\x89\xa4pi<i)ï¿½\xe2\x80\x94 descriptions of all edges of the tree.
It is guaranteed that the sum of nn over all test cases does not exceed 5\xe2\x8b\x851055\xe2\x8b\x85105.
For each test case output nn integers, ii-th of them representing the binary depth of the tree formed by the first ii vertices.
In the first test case, the final tree is shown below:
In the second test case, the formed full binary tree after adding some vertices to the tree consisting of nn vertices is shown below (bolded vertices are added):
The depth of the formed full binary tree is 44.
In the fifth test case, the final tree is shown below:
It can be proved that Iris can\'t form any full binary tree by adding vertices and edges, so the binary depth is \xe2\x88\x921\xe2\x88\x921." "3100  x218"
    
2006D "Iris and Adjacent Products" "data structures, greedy, implementation, math" "Iris has just learned multiplication in her Maths lessons. However, since her brain is unable to withstand too complex calculations, she could not multiply two integers with the product greater than k together. Otherwise, her brain may explode!
Her teacher sets a difficult task every day as her daily summer holiday homework. Now she is given an array a consisting of n elements, and she needs to calculate the product of each two adjacent elements (that is, a1\xe2\x8b\x85a2, a2\xe2\x8b\x85a3, and so on). Iris wants her brain to work safely, and in order to do that, she would like to modify the array a in such a way that ai\xe2\x8b\x85ai+1\xe2\x89\xa4k holds for every 1\xe2\x89\xa4i<n. There are two types of operations she can perform:
Iris wants to minimize the number of operations of type 2 that she uses.
However, that\'s completely not the end of the summer holiday! Summer holiday lasts for q days, and on the i-th day, Iris is asked to solve the Math homework for the subarray bli,bli+1,\xe2\x80\xa6,bri. Help Iris and tell her the minimum number of type 2 operations she needs to perform for each day. Note that the operations are independent for each day, i.e. the array b is not changed.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains three integers n, q and k (2\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4q\xe2\x89\xa4105, 1\xe2\x89\xa4k\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the length of array b, the number of days, and the upper bound for the multiplication calculation.
The second line of each test case contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4k)ï¿½\xe2\x80\x94 the elements of the array b.
Then q lines follow, the i-th of them contains two integers li and ri (1\xe2\x89\xa4li<ri\xe2\x89\xa4n) \xe2\x80\x94 the boundaries of the subarray on the i-th day. 
It is guaranteed that the sum of n over all test cases does not exceed 105, and the sum of q over all test cases does not exceed 105.
For each test, output a single line containing q integers \xe2\x80\x94 the minimum number of operations of type 2 needed for each day.
In the first test case, as Iris can always multiply 1 and 1 together, no operations are needed, so the answer is 0.
In the second test case, the first day\'s homework is [1,10,9]. Iris can rearrange its elements to get [9,1,10], so no operations of type 2 are needed. The second day\'s homework is [10,9], and she can change one element to get the array [1,9], so one operation of type 2 is needed." "2600  x669"
    
2006C "Eri and Expanded Sets" "data structures, divide and conquer, math, number theory, two pointers" "Let there be a set that contains distinct positive integers. To expand the set to contain as many integers as possible, Eri can choose two integers x\xe2\x89\xa0y from the set such that their average x+y2 is still a positive integer and isn\'t contained in the set, and add it to the set. The integers x and y remain in the set.
Let\'s call the set of integers consecutive if, after the elements are sorted, the difference between any pair of adjacent elements is 1. For example, sets {2}, {2,5,4,3}, {5,6,8,7} are consecutive, while {2,4,5,6}, {9,7} are not.
Eri likes consecutive sets. Suppose there is an array b, then Eri puts all elements in b into the set. If after a finite number of operations described above, the set can become consecutive, the array b will be called brilliant.
Note that if the same integer appears in the array multiple times, we only put it into the set once, as a set always contains distinct positive integers.
Eri has an array a of n positive integers. Please help him to count the number of pairs of integers (l,r) such that 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n and the subarray al,al+1,\xe2\x80\xa6,ar is brilliant.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa44\xe2\x8b\x85105)ï¿½\xe2\x80\x94 length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases doesn\'t exceed 4\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the number of brilliant subarrays.
In the first test case, the array a=[2,2] has 3 subarrays: [2], [2], and [2,2]. For all of them, the set only contains a single integer 2, therefore it\'s always consecutive. All these subarrays are brilliant, so the answer is 3.
In the second test case, let\'s consider the subarray [3,6,10]. We can do operations as follows:
{3,4,5,6,7,8,9,10} is a consecutive set, so the subarray [3,6,10] is brilliant." "2300  x1625"
    
2006B "Iris and the Tree" "brute force, data structures, dfs and similar, dsu, math, trees" "Given a rooted tree with the root at vertex 1. For any vertex i (1<i\xe2\x89\xa4n) in the tree, there is an edge connecting vertices i and pi (1\xe2\x89\xa4pi<i), with a weight equal to ti.
Iris does not know the values of ti, but she knows that n\xe2\x88\x91i=2ti=w and each of the ti is a non-negative integer.
The vertices of the tree are numbered in a special way: the numbers of the vertices in each subtree are consecutive integers. In other words, the vertices of the tree are numbered in the order of a depth-first search.
We define dist(u,v) as the length of the simple path between vertices u and v in the tree.
Next, there will be n\xe2\x88\x921 events:
After each event, Iris wants to know the maximum possible value of dist(i,imodn+1) independently for each i (1\xe2\x89\xa4i\xe2\x89\xa4n). She only needs to know the sum of these n values. Please help Iris quickly get the answers.
Note that when calculating the maximum possible values of dist(i,imodn+1) and dist(j,jmodn+1) for i\xe2\x89\xa0j, the unknown edge weights may be different.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and w (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4w\xe2\x89\xa41012)ï¿½\xe2\x80\x94 the number of vertices in the tree and the sum of the edge weights.
The second line of each test case contains n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi<i)ï¿½\xe2\x80\x94 the description of the edges of the tree.
Then follow n\xe2\x88\x921 lines indicating the events. Each line contains two integers x and y (2\xe2\x89\xa4x\xe2\x89\xa4n, 0\xe2\x89\xa4y\xe2\x89\xa4w), indicating that tx=y.
It is guaranteed that all x in the events are distinct. It is also guaranteed that the sum of all y equals w.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output one line containing n\xe2\x88\x921 integers, each representing the answer after each event.
In the first test case, dist(1,2)=dist(2,1)=t2=w=1012, so dist(1,2)+dist(2,1)=2\xe2\x8b\x851012.
In the second test case, the tree after Iris found out all tx is shown below:
dist(1,2)=t2, dist(2,3)=t2+t3, dist(3,4)=t3+t4, dist(4,1)=t4. After the first event, she found out that t2=2, so dist(1,2)=2. At the same time:
Thus, the answer is 2+9+7+7=25.
After the second event, she found out that t4=4, then t3=w\xe2\x88\x92t2\xe2\x88\x92t4=4. dist(1,2)=2, dist(2,3)=2+3=5, dist(3,4)=3+4=7, dist(4,1)=4. Thus, the answer is 2+5+7+4=18." "1800  x3296"
    
2006A "Iris and Game on the Tree" "constructive algorithms, dfs and similar, games, graphs, greedy, trees" "Iris has a tree rooted at vertex 11. Each vertex has a value of 00 or 11.
Let\'s consider a leaf of the tree (the vertex 11 is never considered a leaf) and define its weight. Construct a string formed by the values of the vertices on the path starting at the root and ending in this leaf. Then the weight of the leaf is the difference between the number of occurrences of 1010 and 0101 substrings in it.
Take the following tree as an example. Green vertices have a value of 11 while white vertices have a value of 00.
The score of a tree is defined as the number of leaves with non-zero weight in the tree.
But the values of some vertices haven\'t been decided and will be given to you as ??. Filling the blanks would be so boring, so Iris is going to invite Dora to play a game. On each turn, one of the girls chooses any of the remaining vertices with value ?? and changes its value to 00 or 11, with Iris going first. The game continues until there are no vertices with value ?? left in the tree. Iris aims to maximize the score of the tree, while Dora aims to minimize that.
Assuming that both girls play optimally, please determine the final score of the tree.
Each test consists of multiple test cases. The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x851041\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of vertices in the tree.
The following n\xe2\x88\x921n\xe2\x88\x921 lines each contain two integers uu and vv (1\xe2\x89\xa4u,v\xe2\x89\xa4n1\xe2\x89\xa4u,v\xe2\x89\xa4n)ï¿½\xe2\x80\x94 denoting an edge between vertices uu and vv.
It\'s guaranteed that the given edges form a tree.
The last line contains a string ss of length nn. The ii-th character of ss represents the value of vertex ii. It\'s guaranteed that ss only contains characters 00, 11 and ??.
It is guaranteed that the sum of nn over all test cases doesn\'t exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the final score of the tree.
In the first test case, all the values of the vertices have been determined. There are three different paths from the root to a leaf:
Thus, there are two leaves with non-zero weight, so the score of the tree is 22.
In the second test case, one of the sequences of optimal choices for the two players can be:
The final tree is as follows:
The only leaf with non-zero weight is 33, so the score of the tree is 11. Note that this may not be the only sequence of optimal choices for Iris and Dora." "1700  x6715"
    
2.01E+05 "Subtangle Game (Hard Version)" "data structures, dp, games, greedy, implementation" "This is the hard version of the problem. The differences between the two versions are the constraints on all the variables. You can make hacks only if both versions of the problem are solved.
Tsovak and Narek are playing a game. They have an array a and a matrix b of integers with n rows and m columns, numbered from 1. The cell in the i-th row and the j-th column is (i,j).
They are looking for the elements of a in turns; Tsovak starts first. Each time a player looks for a cell in the matrix containing the current element of a (Tsovak looks for the first, then Narek looks for the second, etc.). Let\'s say a player has chosen the cell (r,c). The next player has to choose his cell in the submatrix starting at (r+1,c+1) and ending in (n,m) (the submatrix can be empty if r=n or c=m). If a player cannot find such a cell (or the remaining submatrix is empty) or the array ends (the previous player has chosen the last element), then he loses.
Your task is to determine the winner if the players play optimally.
Note: since the input is large, you may need to optimize input/output for this problem.
For example, in C++, it is enough to use the following lines at the start of the main() function: 
The first line of the input contains t (1\xe2\x89\xa4t\xe2\x89\xa41500)ï¿½\xe2\x80\x93 the number of test cases.
The first line of each test case contains three integers l, n, and m (1\xe2\x89\xa4l,n,m\xe2\x89\xa41500)ï¿½\xe2\x80\x93 the size of the array and the sizes of the matrix.
The second line contains l integers a1,a2,a3,\xe2\x80\xa6al (1\xe2\x89\xa4ai\xe2\x89\xa4n\xe2\x8b\x85m)ï¿½\xe2\x80\x93 the elements of the array a.
The i-th of the last n lines contains m integers bi,1,bi,2,bi,3,\xe2\x80\xa6bi,m (1\xe2\x89\xa4bi,j\xe2\x89\xa4n\xe2\x8b\x85m)ï¿½\xe2\x80\x93 representing the i-th row of the matrix.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 3\xe2\x8b\x85106.
It is guaranteed that the sum of l over all test cases does not exceed 1500.
You should output t lines, the i-th of them containing a character representing the answer of the i-th test case: ""T"" if Tsovak wins or ""N"", otherwise (without quotes).
In the first example, Tsovak starts by looking for 1. There is only one occurrence of 1 at (1,1), so he chooses it. Then Narek needs to look for 2 in the submatrix of (2,2), which consists of just the last two elements: 6 and 2. He chooses 2, and then Tsovak loses since the array has ended.
In the second example, Tsovak needs to choose 1. There is a 1 at the cell (n,m), so he chooses that cell. Then, since the submatrix of (n+1,m+1) is empty, Narek cannot find 2, so he loses." "2500  x788"
    
2.01E+04 "Subtangle Game (Easy Version)" "dp, games, greedy, implementation" "This is the easy version of the problem. The differences between the two versions are the constraints on all the variables. You can make hacks only if both versions of the problem are solved.
Tsovak and Narek are playing a game. They have an array a and a matrix b of integers with n rows and m columns, numbered from 1. The cell in the i-th row and the j-th column is (i,j).
They are looking for the elements of a in turns; Tsovak starts first. Each time a player looks for a cell in the matrix containing the current element of a (Tsovak looks for the first, then Narek looks for the second, etc.). Let\'s say a player has chosen the cell (r,c). The next player has to choose his cell in the submatrix starting at (r+1,c+1) and ending in (n,m) (the submatrix can be empty if r=n or c=m). If a player cannot find such a cell (or the remaining submatrix is empty) or the array ends (the previous player has chosen the last element), then he loses.
Your task is to determine the winner if the players play optimally.
The first line of the input contains t (1\xe2\x89\xa4t\xe2\x89\xa4300)ï¿½\xe2\x80\x93 the number of test cases.
The first line of each test case contains three integers l, n, and m (1\xe2\x89\xa4l,n,m\xe2\x89\xa4300)ï¿½\xe2\x80\x93 the size of the array and the sizes of the matrix.
The second line contains l integers a1,a2,a3,\xe2\x80\xa6al (1\xe2\x89\xa4ai\xe2\x89\xa4min(7,n\xe2\x8b\x85m))ï¿½\xe2\x80\x93 the elements of the array a.
The i-th of the last n lines contains m integers bi,1,bi,2,bi,3,\xe2\x80\xa6bi,m (1\xe2\x89\xa4bi,j\xe2\x89\xa4min(7,n\xe2\x8b\x85m))ï¿½\xe2\x80\x93 representing the i-th row of the matrix.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 105.
It is guaranteed that the sum of l over all test cases does not exceed 300.
You should output t lines, the i-th of them containing a character representing the answer of the i-th test case: ""T"" if Tsovak wins or ""N"", otherwise (without quotes).
In the first example, Tsovak starts by looking for 1. There is only one occurrence of 1 at (1,1), so he chooses it. Then Narek needs to look for 2 in the submatrix of (2,2), which consists of just the last two elements: 5 and 2. He chooses 2, and then Tsovak loses since the array has ended.
In the second example, Tsovak needs to choose 1. There is a 1 at the cell (n,m), so he chooses that cell. Then, since the submatrix of (n+1,m+1) is empty, Narek cannot find 2, so he loses." "2100  x2664"
    
2005D "Alter the GCD" "binary search, brute force, data structures, divide and conquer, implementation, number theory" "You are given two arrays a1,a2,\xe2\x80\xa6,an and b1,b2,\xe2\x80\xa6,bn.
You must perform the following operation exactly once:
Find the maximum possible value of gcd(a1,a2,\xe2\x80\xa6,an)+gcd(b1,b2,\xe2\x80\xa6,bn) after performing the operation exactly once. Also find the number of distinct pairs (l,r) which achieve the maximum value.
In the first line of the input, you are given a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105), the number of test cases. Then the description of each test case follows.
In the first line of each test case, you are given a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105), representing the number of integers in each array.
In the next line, you are given n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
In the last line, you are given n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array b.
The sum of values of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output a line with two integers: the maximum value of gcd(a1,a2,\xe2\x80\xa6,an)+gcd(b1,b2,\xe2\x80\xa6,bn) after performing the operation exactly once, and the number of ways.
In the first, third, and fourth test cases, there\'s no way to achieve a higher GCD than 1 in any of the arrays, so the answer is 1+1=2. Any pair (l,r) achieves the same result; for example, in the first test case there are 36 such pairs.
In the last test case, you must choose l=1, r=2 to maximize the answer. In this case, the GCD of the first array is 5, and the GCD of the second array is 1, so the answer is 5+1=6, and the number of ways is 1." "2400  x863"
    
2005C "Lazy Narek" "dp, implementation, strings" "Narek is too lazy to create the third problem of this contest. His friend Artur suggests that he should use ChatGPT. ChatGPT creates n problems, each consisting of m letters, so Narek has n strings. To make the problem harder, he combines the problems by selecting some of the n strings possibly none and concatenating them without altering their order. His chance of solving the problem is defined as scoren\xe2\x88\x92scorec, where scoren is Narek\'s score and scorec is ChatGPT\'s score.
Narek calculates scoren by examining the selected string (he moves from left to right). He initially searches for the letter ""n"", followed by ""a"", ""r"", ""e"", and ""k"". Upon finding all occurrences of these letters, he increments scoren by 5 and resumes searching for ""n"" again (he doesn\'t go back, and he just continues from where he left off). 
After Narek finishes, ChatGPT scans through the array and increments scorec by 1 for each letter ""n"", ""a"", ""r"", ""e"", or ""k"" that Narek fails to utilize (note that if Narek fails to complete the last occurrence by finding all of the 5 letters, then all of the letters he used are counted in ChatGPT\'s score scorec, and Narek doesn\'t get any points if he doesn\'t finish finding all the 5 letters).
Narek aims to maximize the value of scoren\xe2\x88\x92scorec by selecting the most optimal subset of the initial strings.
In the first line of the input, you\'re given a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105), the number of test cases. Then the description of each test case follows.
In the first line of each test case, you\'re given two integers n,m (1\xe2\x89\xa4n,m\xe2\x89\xa4103), the number of strings and the length of each string.
In the next n lines, you\'re given n strings, each having a length of m. The strings only contain lowercase letters of the English alphabet.
The sum of values of n\xe2\x8b\x85m over all test cases does not exceed 106.
For each test case, output a single integer: the maximal possible value of scoren\xe2\x88\x92scorec.
In the first test case, one of the optimal answers is when Narek doesn\'t choose any of the strings, so the answer is 0. He can alternatively choose all the strings. In this case, the full string becomes ""nnaarreekk"". Narek can choose the first appearances of all letters and add 5 to the score. His opponent will add 1 for all second appearances, which will be 5 in total. So the answer will be 5\xe2\x88\x925=0.
In the third test case, the only optimal answer is when Narek doesn\'t choose the string. Note that if he were to choose the string, he wouldn\'t be able to find the last letter ""k"", so his score would stay at 0 instead of becoming 5. Then ChatGPT would add 4 for all of the 4 letters, and the answer would become 0\xe2\x88\x924=\xe2\x88\x924.
In the last test case, Narek needs to choose the first and the last strings. After putting these two next to each other, he gets ""nrrareknkarekz"". Narek can choose the letters marked with red and add 10 to his score. Since the black colored letters Narek left behind are eligible for the opponent to claim (they are used in the word ""narek""), the opponent adds all other letters to the score and gets a score of 3. Therefore, the answer is 10\xe2\x88\x923=7." "1800  x6987"
    
2005B2 "The Strict Teacher (Hard Version)" "binary search, greedy, math, sortings" "This is the hard version of the problem. The only differences between the two versions are the constraints on m and q. In this version, m,q\xe2\x89\xa4105. You can make hacks only if both versions of the problem are solved.
Narek and Tsovak were busy preparing this round, so they have not managed to do their homework and decided to steal David\'s homework. Their strict teacher noticed that David has no homework and now wants to punish him. She hires other teachers to help her catch David. And now m teachers together are chasing him. Luckily, the classroom is big, so David has many places to hide.
The classroom can be represented as a one-dimensional line with cells from 1 to n, inclusive.
At the start, all m teachers and David are in distinct cells. Then they make moves. During each move 
This continues until David is caught. David is caught if any of the teachers (possibly more than one) is located in the same cell as David. Everyone sees others\' moves, so they all act optimally.
Your task is to find how many moves it will take for the teachers to catch David if they all act optimally.
Acting optimally means the student makes his moves in a way that maximizes the number of moves the teachers need to catch him; and the teachers coordinate with each other to make their moves in a way that minimizes the number of moves they need to catch the student.
Also, as Narek and Tsovak think this task is easy, they decided to give you q queries on David\'s position.
In the first line of the input, you are given a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of test cases. The description of each test case follows.
In the first line of each test case, you are given three integers n, m, and q (3\xe2\x89\xa4n\xe2\x89\xa4109, 1\xe2\x89\xa4m,q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of cells on the line, the number of teachers, and the number of queries.
In the second line of each test case, you are given m distinct integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the cell numbers of the teachers.
In the third line of each test case, you are given q integers a1,a2,\xe2\x80\xa6,aq (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 David\'s cell number for every query.
It is guaranteed that for any i, j such that 1\xe2\x89\xa4i\xe2\x89\xa4m and 1\xe2\x89\xa4j\xe2\x89\xa4q, bi\xe2\x89\xa0aj.
It is guaranteed that the sum of values of m over all test cases does not exceed 2\xe2\x8b\x85105.
It is guaranteed that the sum of values of q over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output q lines, the i-th of them containing the answer of the i-th query.
In the only query of the first example, the student can run to cell 1. It will take the teacher five moves to reach from cell 6 to cell 1, so the answer is 5.
In the second query of the second example, the student can just stay at cell 3. The teacher, initially located in cell 4, can reach cell 3 in one move. Therefore, the answer is 1." "1200  x17144"
    
2005B1 "The Strict Teacher (Easy Version)" "greedy, math, sortings" "This is the easy version of the problem. The only differences between the two versions are the constraints on m and q. In this version, m=2 and q=1. You can make hacks only if both versions of the problem are solved.
Narek and Tsovak were busy preparing this round, so they have not managed to do their homework and decided to steal David\'s homework. Their strict teacher noticed that David has no homework and now wants to punish him. She hires other teachers to help her catch David. And now m teachers together are chasing him. Luckily, the classroom is big, so David has many places to hide.
The classroom can be represented as a one-dimensional line with cells from 1 to n, inclusive.
At the start, all m teachers and David are in distinct cells. Then they make moves. During each move 
This continues until David is caught. David is caught if any of the teachers (possibly more than one) is located in the same cell as David. Everyone sees others\' moves, so they all act optimally.
Your task is to find how many moves it will take for the teachers to catch David if they all act optimally.
Acting optimally means the student makes his moves in a way that maximizes the number of moves the teachers need to catch him; and the teachers coordinate with each other to make their moves in a way that minimizes the number of moves they need to catch the student.
Also, as Narek and Tsovak think this task is easy, they decided to give you q queries on David\'s position. Note: this is the easy version, and you are given only one query.
In the first line of the input, you are given a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of test cases. The description of each test case follows.
In the first line of each test case, you are given three integers n, m, and q (3\xe2\x89\xa4n\xe2\x89\xa4109, m=2, q=1)ï¿½\xe2\x80\x94 the number of cells on the line, the number of teachers, and the number of queries.
In the second line of each test case, you are given m distinct integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the cell numbers of the teachers.
In the third line of each test case, you are given q integers a1,a2,\xe2\x80\xa6,aq (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 David\'s cell number for every query.
It is guaranteed that for any i, j such that 1\xe2\x89\xa4i\xe2\x89\xa4m and 1\xe2\x89\xa4j\xe2\x89\xa4q, bi\xe2\x89\xa0aj.
For each test case, output q lines, the i-th of them containing the answer of the i-th query.
In the first example, the student can just stay at cell 2. The teacher, initially located in cell 1, can reach cell 2 in one move. Therefore, the answer is 1.
In the second example, the student should just stay at cell 1. The teacher, initially located in cell 3, can reach cell 1 in two moves. Therefore, the answer is 2." "1000  x19806"
    
2005A "Simple Palindrome" "combinatorics, constructive algorithms, greedy, math" "Narek has to spend 2 hours with some 2-year-old kids at the kindergarten. He wants to teach them competitive programming, and their first lesson is about palindromes.
Narek found out that the kids only know the vowels of the English alphabet (the letters a, e, i, o, and u), so Narek needs to make a string that consists of vowels only. After making the string, he\'ll ask the kids to count the number of subsequences that are palindromes. Narek wants to keep it simple, so he\'s looking for a string such that the amount of palindrome subsequences is minimal.
Help Narek find a string of length n, consisting of lowercase English vowels only (letters a, e, i, o, and u), which minimizes the amount of palindrome\xe2\x80\xa0 subsequences\xe2\x80\xa1 in it.
\xe2\x80\xa0 A string is called a palindrome if it reads the same from left to right and from right to left.
\xe2\x80\xa1 String t is a subsequence of string s if t can be obtained from s by removing several (possibly, zero or all) characters from s and concatenating the remaining ones, without changing their order. For example, odocs is a subsequence of codeforces.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases. Subsequently, the description of each test case follows.
The only line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the size of the string.
For each test case, output any string of length n that satisfies the above conditions.
In the first example, uo has only three palindrome subsequences: u, o, and the empty string. It can be shown that there is no better answer.
In the third example, oeiiua has only eight palindrome subsequences: o, e, i, i, u, a, ii, and the empty string. It can be shown that there is no better answer." "900  x21557"
    
2004G "Substring Compression" "data structures, dp, matrices" "Let\'s define the operation of compressing a string t, consisting of at least 2 digits from 1 to 9, as follows: 
For example, for a string ""12345"", one could do the following: split it into (""1"", ""23"", ""4"", ""5""), and write ""235555"".
Let the function f(t) for a string t return the minimum length of the string that can be obtained as a result of that process.
You are given a string s, consisting of n digits from 1 to 9, and an integer k. Calculate the value of the function f for all contiguous substrings of s of length exactly k.
The first line contains two integers n and k (2\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line contains the string s (|s|=n), consisting only of digits from 1 to 9.
Output n\xe2\x88\x92k+1 integersï¿½\xe2\x80\x94 f(s1,k),f(s2,k+1),\xe2\x80\xa6,f(sn\xe2\x88\x92k+1,n)." "3200  x302"
    
2004F "Make a Palindrome" "binary search, brute force, data structures, greedy, math" "You are given an array a consisting of n integers.
Let the function f(b) return the minimum number of operations needed to make an array b a palindrome. The operations you can make are:
For example, from an array b=[2,1,3], you can obtain the following arrays in one operation: [1,1,1,3], [2,1,1,2], [3,3], [2,4], or [2,1,2,1].
Calculate (\xe2\x88\x911\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4nf(a[l..r])), where a[l..r] is the subarray of a from index l to index r, inclusive. In other words, find the sum of the values of the function f for all subarrays of the array a.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42000).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105).
Additional constraint on the input: the sum of n over all test cases does not exceed 2000.
For each test case, print a single integerï¿½\xe2\x80\x94 the sum of the values of the function f for all subarrays of the array a." "2600  x1167"
    
2004E "Not a Nim Problem" "brute force, games, math, number theory" "Two players, Alice and Bob, are playing a game. They have n piles of stones, with the i-th pile initially containing ai stones.
On their turn, a player can choose any pile of stones and take any positive number of stones from it, with one condition:
The player who cannot make a move loses. Both players play optimally (that is, if a player has a strategy that allows them to win, no matter how the opponent responds, they will win). Alice goes first.
Determine who will win.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
Each test case consists of two lines:
Additional constraint on the input: the sum of n across all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output Alice if Alice wins, or Bob if Bob wins." "2100  x4042"
    
2004D "Colored Portals" "binary search, brute force, data structures, graphs, greedy, implementation, shortest paths" "There are n cities located on a straight line. The cities are numbered from 1 to n.
Portals are used to move between cities. There are 4 colors of portals: blue, green, red, and yellow. Each city has portals of two different colors. You can move from city i to city j if they have portals of the same color (for example, you can move between a ""blue-red"" city and a ""blue-green"" city). This movement costs |i\xe2\x88\x92j| coins.
Your task is to answer q independent queries: calculate the minimum cost to move from city x to city y.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of cities and the number of queries, respectively.
The second line contains n strings of the following types: BG, BR, BY, GR, GY, or RY; the i-th of them describes the portals located in the i-th city; the symbol B indicates that there is a blue portal in the city, Gï¿½\xe2\x80\x94 green, Rï¿½\xe2\x80\x94 red, and Yï¿½\xe2\x80\x94 yellow.
The j-th of the next q lines contains two integers xj and yj (1\xe2\x89\xa4xj,yj\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the description of the j-th query.
Additional constraints on the input: 
For each query, print a single integerï¿½\xe2\x80\x94 the minimum cost to move from city x to city y (or \xe2\x88\x921 if it is impossible)." "1600  x10684"
    
2004C "Splitting Items" "games, greedy, sortings" "Alice and Bob have n items they\'d like to split between them, so they decided to play a game. All items have a cost, and the i-th item costs ai. Players move in turns starting from Alice.
In each turn, the player chooses one of the remaining items and takes it. The game goes on until no items are left.
Let\'s say that A is the total cost of items taken by Alice and B is the total cost of Bob\'s items. The resulting score of the game then will be equal to A\xe2\x88\x92B.
Alice wants to maximize the score, while Bob wants to minimize it. Both Alice and Bob will play optimally.
But the game will take place tomorrow, so today Bob can modify the costs a little. He can increase the costs ai of several (possibly none or all) items by an integer value (possibly, by the same value or by different values for each item). However, the total increase must be less than or equal to k. Otherwise, Alice may suspect something. Note that Bob can\'t decrease costs, only increase.
What is the minimum possible score Bob can achieve?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of test cases. Then t cases follow.
The first line of each test case contains two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 0\xe2\x89\xa4k\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of items and the maximum total increase Bob can make.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial costs of the items.
It\'s guaranteed that the sum of n over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum possible score A\xe2\x88\x92B after Bob increases the costs of several (possibly none or all) items.
In the first test case, Bob can increase a1 by 5, making costs equal to [6,10]. Tomorrow, Alice will take 10 and Bob will take 6. The total score will be equal to 10\xe2\x88\x926=4, and it\'s the minimum possible.
In the second test case, Bob can\'t change costs. So the score will be equal to (15+10)\xe2\x88\x9212=13, since Alice will take 15, Bob will take 12, and Aliceï¿½\xe2\x80\x94 10.
In the third test case, Bob, for example, can increase a1 by 1, a2 by 3, and a3 by 2. The total change is equal to 1+3+2\xe2\x89\xa46 and costs will be equal to [4,4,4,4]. Obviously, the score will be equal to (4+4)\xe2\x88\x92(4+4)=0.
In the fourth test case, Bob can increase a1 by 3, making costs equal to [9,9]. The score will be equal to 9\xe2\x88\x929=0." "1100  x23236"
    
2004B "Game with Doors" "brute force, greedy" "There are 100 rooms arranged in a row and 99 doors between them; the i-th door connects rooms i and i+1. Each door can be either locked or unlocked. Initially, all doors are unlocked.
We say that room x is reachable from room y if all doors between them are unlocked.
You know that: 
However, you don\'t know the exact rooms they are in.
You don\'t want Alice and Bob to be able to reach each other, so you are going to lock some doors to prevent that. What\'s the smallest number of doors you have to lock so that Alice and Bob cannot meet, regardless of their starting positions inside the given segments?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers l and r (1\xe2\x89\xa4l<r\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the bounds of the segment of rooms where Alice is located.
The second line of each test case contains two integers L and R (1\xe2\x89\xa4L<R\xe2\x89\xa4100) \xe2\x80\x94 the bounds of the segment of rooms where Bob is located.
For each test case, print a single integerï¿½\xe2\x80\x94 the smallest number of doors you have to lock so that Alice and Bob cannot meet, regardless of their starting positions inside the given segments.
In the first test case, it is sufficient to lock the door between rooms 2 and 3.
In the second test case, the following doors have to be locked: (2,3), (3,4), (4,5).
In the third test case, the following doors have to be locked: (5,6) and (6,7)." "1000  x25955"
    
2004A "Closest Point" "implementation, math" "Consider a set of points on a line. The distance between two points i and j is |i\xe2\x88\x92j|.
The point i from the set is the closest to the point j from the set, if there is no other point k in the set such that the distance from j to k is strictly less than the distance from j to i. In other words, all other points from the set have distance to j greater or equal to |i\xe2\x88\x92j|.
For example, consider a set of points {1,3,5,8}:
You are given a set of points. You have to add an integer point into this set in such a way that it is different from every existing point in the set, and it becomes the closest point to every point in the set. Is it possible?
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
Each test case consists of two lines:
For each test case, print YES if it is possible to add a new point according to the conditions from the statement. Otherwise, print NO.
In the first example, the point 7 will be the closest to both 3 and 8.
In the second example, it is impossible to add an integer point so that it becomes the closest to both 5 and 6, and is different from both of them." "800  x30194"
    
2003F "Turtle and Three Sequences" "brute force, data structures, dp, greedy, math, probabilities, two pointers" "Piggy gives Turtle three sequences a1,a2,\xe2\x80\xa6,an, b1,b2,\xe2\x80\xa6,bn, and c1,c2,\xe2\x80\xa6,cn.
Turtle will choose a subsequence of 1,2,\xe2\x80\xa6,n of length m, let it be p1,p2,\xe2\x80\xa6,pm. The subsequence should satisfy the following conditions:
Help him find the maximum value of m\xe2\x88\x91i=1cpi, or tell him that it is impossible to choose a subsequence of length m that satisfies the conditions above.
Recall that a sequence a is a subsequence of a sequence b if a can be obtained from b by the deletion of several (possibly, zero or all) elements.
The first line contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa43000, 1\xe2\x89\xa4m\xe2\x89\xa45) \xe2\x80\x94 the lengths of the three sequences and the required length of the subsequence.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n) \xe2\x80\x94 the elements of the sequence a.
The third line contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4n) \xe2\x80\x94 the elements of the sequence b.
The fourth line contains n integers c1,c2,\xe2\x80\xa6,cn (1\xe2\x89\xa4ci\xe2\x89\xa4104) \xe2\x80\x94 the elements of the sequence c.
Output a single integer \xe2\x80\x94 the maximum value of m\xe2\x88\x91i=1cpi. If it is impossible to choose a subsequence of length m that satisfies the conditions above, output \xe2\x88\x921.
In the first example, we can choose p=[1,2], then cp1+cp2=1+4=5. We can\'t choose p=[2,4] since a2>a4, violating the first condition. We can\'t choose p=[2,3] either since b2=b3, violating the second condition. We can choose p=[1,4], but c1+c4=4, which isn\'t maximum.
In the second example, we can choose p=[4,6,7].
In the third example, it is impossible to choose a subsequence of length 3 that satisfies both of the conditions." "2800  x477"
    
2.00E+05 "Turtle and Inversions (Hard Version)" "brute force, data structures, divide and conquer, dp, greedy, math, two pointers" "This is a hard version of this problem. The differences between the versions are the constraint on m and ri<li+1 holds for each i from 1 to m\xe2\x88\x921 in the easy version. You can make hacks only if both versions of the problem are solved.
Turtle gives you m intervals [l1,r1],[l2,r2],\xe2\x80\xa6,[lm,rm]. He thinks that a permutation p is interesting if there exists an integer ki for every interval (li\xe2\x89\xa4ki<ri), and if he lets ai=kimaxj=lipj,bi=riminj=ki+1pj for every integer i from 1 to m, the following condition holds:
mmaxi=1ai<mmini=1bi
Turtle wants you to calculate the maximum number of inversions of all interesting permutations of length n, or tell him if there is no interesting permutation.
An inversion of a permutation p is a pair of integers (i,j) (1\xe2\x89\xa4i<j\xe2\x89\xa4n) such that pi>pj.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4103). The description of the test cases follows.
The first line of each test case contains two integers n,m (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85103,0\xe2\x89\xa4m\xe2\x89\xa45\xe2\x8b\x85103) \xe2\x80\x94 the length of the permutation and the number of intervals.
The i-th of the following m lines contains two integers li,ri (1\xe2\x89\xa4li<ri\xe2\x89\xa4n) \xe2\x80\x94 the i-th interval. Note that there may exist identical intervals (i.e., there may exist two different indices i,j such that li=lj and ri=rj).
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85103 and the sum of m over all test cases does not exceed 5\xe2\x8b\x85103.
For each test case, if there is no interesting permutation, output a single integer \xe2\x88\x921.
Otherwise, output a single integer \xe2\x80\x94 the maximum number of inversions.
In the third test case, the interesting permutation with the maximum number of inversions is [5,2,4,3,1].
In the fourth test case, the interesting permutation with the maximum number of inversions is [4,3,8,7,6,2,1,5]. In this case, we can let [k1,k2,k3]=[2,2,7].
In the fifth and the sixth test case, it can be proven that there is no interesting permutation.
In the seventh test case, the interesting permutation with the maximum number of inversions is [4,7,6,3,2,1,5]. In this case, we can let [k1,k2,k3,k4]=[1,6,1,6].
In the eighth test case, the interesting permutation with the maximum number of inversions is [4,7,3,6,2,5,1]." "2700  x517"
    
2.00E+04 "Turtle and Inversions (Easy Version)" "brute force, divide and conquer, dp, greedy, math" "This is an easy version of this problem. The differences between the versions are the constraint on m and ri<li+1 holds for each i from 1 to m\xe2\x88\x921 in the easy version. You can make hacks only if both versions of the problem are solved.
Turtle gives you m intervals [l1,r1],[l2,r2],\xe2\x80\xa6,[lm,rm]. He thinks that a permutation p is interesting if there exists an integer ki for every interval (li\xe2\x89\xa4ki<ri), and if he lets ai=kimaxj=lipj,bi=riminj=ki+1pj for every integer i from 1 to m, the following condition holds:
mmaxi=1ai<mmini=1bi
Turtle wants you to calculate the maximum number of inversions of all interesting permutations of length n, or tell him if there is no interesting permutation.
An inversion of a permutation p is a pair of integers (i,j) (1\xe2\x89\xa4i<j\xe2\x89\xa4n) such that pi>pj.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4103). The description of the test cases follows.
The first line of each test case contains two integers n,m (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85103,0\xe2\x89\xa4m\xe2\x89\xa4n2) \xe2\x80\x94 the length of the permutation and the number of intervals.
The i-th of the following m lines contains two integers li,ri (1\xe2\x89\xa4li<ri\xe2\x89\xa4n) \xe2\x80\x94 the i-th interval.
Additional constraint on the input in this version: ri<li+1 holds for each i from 1 to m\xe2\x88\x921.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85103.
For each test case, if there is no interesting permutation, output a single integer \xe2\x88\x921.
Otherwise, output a single integer \xe2\x80\x94 the maximum number of inversions.
In the third test case, the interesting permutation with the maximum number of inversions is [5,2,4,3,1].
In the fourth test case, the interesting permutation with the maximum number of inversions is [4,8,7,6,3,2,1,5]. In this case, we can let [k1,k2]=[1,7].
In the fifth test case, the interesting permutation with the maximum number of inversions is [4,7,6,3,2,1,5].
In the sixth test case, the interesting permutation with the maximum number of inversions is [4,7,3,6,2,5,1]." "2600  x722"
    
2003D2 "Turtle and a MEX Problem (Hard Version)" "dfs and similar, dp, graphs, greedy, implementation, math" "The two versions are different problems. In this version of the problem, you can\'t choose the same integer twice or more. You can make hacks only if both versions are solved.
One day, Turtle was playing with n sequences. Let the length of the i-th sequence be li. Then the i-th sequence was ai,1,ai,2,\xe2\x80\xa6,ai,li.
Piggy gave Turtle a problem to solve when Turtle was playing. The statement of the problem was:
Turtle solved the above problem without difficulty. He defined f(k) as the answer to the above problem when the initial value of x was k.
Then Piggy gave Turtle a non-negative integer m and asked Turtle to find the value of m\xe2\x88\x91i=0f(i) (i.e., the value of f(0)+f(1)+\xe2\x80\xa6+f(m)). Unfortunately, he couldn\'t solve this problem. Please help him!
\xe2\x80\xa0mex(c1,c2,\xe2\x80\xa6,ck) is defined as the smallest non-negative integer x which does not occur in the sequence c. For example, mex(2,2,0,3) is 1, mex(1,2) is 0.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n,m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,0\xe2\x89\xa4m\xe2\x89\xa4109).
Each of the following n lines contains several integers. The first integer li (1\xe2\x89\xa4li\xe2\x89\xa42\xe2\x8b\x85105) represents the length of the i-th sequence, and the following li integers ai,1,ai,2,\xe2\x80\xa6,ai,li (0\xe2\x89\xa4ai,j\xe2\x89\xa4109) represent the elements of the i-th sequence.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105 and the sum of \xe2\x88\x91li over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the value of m\xe2\x88\x91i=0f(i).
In the first test case, when x is initially 2, Turtle can choose i=3 and set x to mex(x,a3,1,a3,2,a3,3,a3,4)=mex(2,7,0,1,5)=3. It can be proved that Turtle can\'t make the value of x greater than 3, so f(2)=3.
It can be seen that f(0)=3, f(1)=3, f(2)=3, f(3)=3, and f(4)=4. So f(0)+f(1)+f(2)+f(3)+f(4)=3+3+3+3+4=16.
In the second test case, when x is initially 1, Turtle can choose i=1 and set x to mex(x,a1,1,a1,2,a1,3,a1,4,a1,5)=mex(1,0,2,0,4,11)=3. It can be proved that Turtle can\'t make the value of x greater than 3, so f(1)=3.
It can be seen that f(0)=4, f(1)=3, f(2)=4, f(3)=3, and f(4)=4. So f(0)+f(1)+f(2)+f(3)+f(4)=4+3+4+3+4=18.
In the fourth test case, it can be seen that f(0)=3 and f(1)=1. So f(0)+f(1)=3+1=4." "2100  x3988"
    
2003D1 "Turtle and a MEX Problem (Easy Version)" "greedy, math" "The two versions are different problems. In this version of the problem, you can choose the same integer twice or more. You can make hacks only if both versions are solved.
One day, Turtle was playing with n sequences. Let the length of the i-th sequence be li. Then the i-th sequence was ai,1,ai,2,\xe2\x80\xa6,ai,li.
Piggy gave Turtle a problem to solve when Turtle was playing. The statement of the problem was:
Turtle solved the above problem without difficulty. He defined f(k) as the answer to the above problem when the initial value of x was k.
Then Piggy gave Turtle a non-negative integer m and asked Turtle to find the value of m\xe2\x88\x91i=0f(i) (i.e., the value of f(0)+f(1)+\xe2\x80\xa6+f(m)). Unfortunately, he couldn\'t solve this problem. Please help him!
\xe2\x80\xa0mex(c1,c2,\xe2\x80\xa6,ck) is defined as the smallest non-negative integer x which does not occur in the sequence c. For example, mex(2,2,0,3) is 1, mex(1,2) is 0.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n,m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,0\xe2\x89\xa4m\xe2\x89\xa4109).
Each of the following n lines contains several integers. The first integer li (1\xe2\x89\xa4li\xe2\x89\xa42\xe2\x8b\x85105) represents the length of the i-th sequence, and the following li integers ai,1,ai,2,\xe2\x80\xa6,ai,li (0\xe2\x89\xa4ai,j\xe2\x89\xa4109) represent the elements of the i-th sequence.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105, and the sum of \xe2\x88\x91li over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the value of m\xe2\x88\x91i=0f(i).
In the first test case, when x is initially 2, Turtle can choose i=3 and set x to mex(x,a3,1,a3,2,a3,3,a3,4)=mex(2,7,0,1,5)=3. It can be proved that Turtle can\'t make the value of x greater than 3, so f(2)=3.
It can be seen that f(0)=3, f(1)=3, f(2)=3, f(3)=3, and f(4)=4. So f(0)+f(1)+f(2)+f(3)+f(4)=3+3+3+3+4=16.
In the second test case, when x is initially 1, Turtle can choose i=3 and set x to mex(x,a3,1,a3,2,a3,3,a3,4,a3,5)=mex(1,1,3,0,3,3)=2, and choose i=3 and set x to mex(x,a3,1,a3,2,a3,3,a3,4,a3,5)=mex(2,1,3,0,3,3)=4. It can be proved that Turtle can\'t make the value of x greater than 4, so f(1)=4.
It can be seen that f(0)=4, f(1)=4, f(2)=4, f(3)=4, and f(4)=4. So f(0)+f(1)+f(2)+f(3)+f(4)=4+4+4+4+4=20.
In the fourth test case, it can be seen that f(0)=3 and f(1)=3. So f(0)+f(1)=3+3=6." "1500  x11096"
    
2003C "Turtle and Good Pairs" "constructive algorithms, greedy, sortings, strings" "Turtle gives you a string s, consisting of lowercase Latin letters.
Turtle considers a pair of integers (i,j) (1\xe2\x89\xa4i<j\xe2\x89\xa4n) to be a pleasant pair if and only if there exists an integer k such that i\xe2\x89\xa4k<j and both of the following two conditions hold:
Besides, Turtle considers a pair of integers (i,j) (1\xe2\x89\xa4i<j\xe2\x89\xa4n) to be a good pair if and only if si=sj or (i,j) is a pleasant pair.
Turtle wants to reorder the string s so that the number of good pairs is maximized. Please help him!
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the string.
The second line of each test case contains a string s of length n, consisting of lowercase Latin letters.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the string s after reordering so that the number of good pairs is maximized. If there are multiple answers, print any of them.
In the first test case, (1,3) is a good pair in the reordered string. It can be seen that we can\'t reorder the string so that the number of good pairs is greater than 1. bac and cab can also be the answer.
In the second test case, (1,2), (1,4), (1,5), (2,4), (2,5), (3,5) are good pairs in the reordered string. efddd can also be the answer." "1200  x18053"
    
2003B "Turtle and Piggy Are Playing a Game 2" "games, greedy, sortings" "Turtle and Piggy are playing a game on a sequence. They are given a sequence a1,a2,\xe2\x80\xa6,an, and Turtle goes first. Turtle and Piggy alternate in turns (so, Turtle does the first turn, Piggy does the second, Turtle does the third, etc.).
The game goes as follows:
Turtle wants to maximize the value of a1 in the end, while Piggy wants to minimize the value of a1 in the end. Find the value of a1 in the end if both players play optimally.
You can refer to notes for further clarification.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4105) \xe2\x80\x94 the length of the sequence.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105) \xe2\x80\x94 the elements of the sequence a.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integer \xe2\x80\x94 the value of a1 in the end if both players play optimally.
In the first test case, initially a=[1,2]. Turtle can only choose i=1. Then he will set a1 to max(a1,a2)=2 and remove a2. The sequence a becomes [2]. Then the length of the sequence becomes 1, and the game will end. The value of a1 is 2, so you should output 2.
In the second test case, one of the possible game processes is as follows:
In the fourth test case, one of the possible game processes is as follows:" "800  x25062"
    
2003A "Turtle and Good Strings" "greedy, strings" "Turtle thinks a string s is a good string if there exists a sequence of strings t1,t2,\xe2\x80\xa6,tk (k is an arbitrary integer) such that:
Turtle is given a string s consisting of lowercase Latin letters. Please tell him whether the string s is a good string!
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4100) \xe2\x80\x94 the length of the string.
The second line of each test case contains a string s of length n, consisting of lowercase Latin letters.
For each test case, output ""YES"" if the string s is a good string, and ""NO"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, the sequence of strings a,a satisfies the condition s=t1+t2+\xe2\x80\xa6+tk, but the first character of t1 is equal to the last character of t2. It can be seen that there doesn\'t exist any sequence of strings which satisfies all of the conditions, so the answer is ""NO"".
In the third test case, the sequence of strings ab,cb satisfies all of the conditions.
In the fourth test case, the sequence of strings abca,bcab,cabc satisfies all of the conditions." "800  x28839"
    
2002H "Counting 101" greedy "It\'s been a long summer\'s day, with the constant chirping of cicadas and the heat which never seemed to end. Finally, it has drawn to a close. The showdown has passed, the gates are open, and only a gentle breeze is left behind.
Your predecessors had taken their final bow; it\'s your turn to take the stage.
Sorting through some notes that were left behind, you found a curious statement named Problem 101:
After some thought, you decided to propose the following problem, named Counting 101:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4103). The description of the test cases follows. 
The only line of each test case contains two integers n, m (1\xe2\x89\xa4n\xe2\x89\xa4130, 1\xe2\x89\xa4m\xe2\x89\xa430).
For each test case, output \xe2\x8c\x8an+12\xe2\x8c\x8b numbers. The i-th number is the number of valid sequences such that when used as input for Problem 101, the answer is i\xe2\x88\x921, modulo 109+7.
In the first test case, there are 23=8 candidate sequences. Among them, you can operate on [1,2,1] and [1,1,1] once; you cannot operate on the other 6 sequences." "3500  x73"
    
2002G "Lattice Optimizing" "bitmasks, brute force, hashing, meet-in-the-middle" "Consider a grid graph with n rows and n columns. Let the cell in row x and column y be (x,y). There exists a directed edge from (x,y) to (x+1,y), with non-negative integer value dx,y, for all 1\xe2\x89\xa4x<n,1\xe2\x89\xa4y\xe2\x89\xa4n, and there also exists a directed edge from (x,y) to (x,y+1), with non-negative integer value rx,y, for all 1\xe2\x89\xa4x\xe2\x89\xa4n,1\xe2\x89\xa4y<n.
Initially, you are at (1,1), with an empty set S. You need to walk along the edges and eventually reach (n,n). Whenever you pass an edge, its value will be inserted into S. Please maximize the MEX\xe2\x88\x97 of S when you reach (n,n).
\xe2\x88\x97The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance: 
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows. 
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa420)ï¿½\xe2\x80\x94 the number of rows and columns.
Each of the next n\xe2\x88\x921 lines contains n integers separated by single spacesï¿½\xe2\x80\x94 the matrix d (0\xe2\x89\xa4dx,y\xe2\x89\xa42n\xe2\x88\x922).
Each of the next n lines contains n\xe2\x88\x921 integers separated by single spacesï¿½\xe2\x80\x94 the matrix r (0\xe2\x89\xa4rx,y\xe2\x89\xa42n\xe2\x88\x922).
It is guaranteed that the sum of all n3 does not exceed 8000.
For each test case, print a single integerï¿½\xe2\x80\x94 the maximum MEX of S when you reach (n,n).
In the first test case, the grid graph and one of the optimal paths are as follows:
In the second test case, the grid graph and one of the optimal paths are as follows:" "3400  x213"
    
2002F2 "Court Blue (Hard Version)" "brute force, dp, math, number theory" "This is the hard version of the problem. In this version, it is not guaranteed that n=m, and the time limit is higher. You can make hacks only if both versions of the problem are solved.
In the court of the Blue King, Lelle and Flamm are having a performance match. The match consists of several rounds. In each round, either Lelle or Flamm wins.
Let WL and WF denote the number of wins of Lelle and Flamm, respectively. The Blue King considers a match to be successful if and only if:
Note that gcd(0,x)=gcd(x,0)=x for every non-negative integer x.
Lelle and Flamm can decide to stop the match whenever they want, and the final score of the performance is l\xe2\x8b\x85WL+f\xe2\x8b\x85WF.
Please help Lelle and Flamm coordinate their wins and losses such that the performance is successful, and the total score of the performance is maximized.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains four integers n, m, l, f (2\xe2\x89\xa4n\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85107, 1\xe2\x89\xa4l,f\xe2\x89\xa4109): n, m give the upper bound on the number of Lelle and Flamm\'s wins, l and f determine the final score of the performance.
Unusual additional constraint: it is guaranteed that, for each test, there are no pairs of test cases with the same pair of n, m.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum total score of a successful performance.
In the first test case, a possible performance is as follows:
The final score is 1\xe2\x8b\x852+4\xe2\x8b\x855=22." "2800  x430"
    
2002F1 "Court Blue (Easy Version)" "brute force, dfs and similar, dp, math, number theory" "This is the easy version of the problem. In this version, n=m and the time limit is lower. You can make hacks only if both versions of the problem are solved.
In the court of the Blue King, Lelle and Flamm are having a performance match. The match consists of several rounds. In each round, either Lelle or Flamm wins.
Let WL and WF denote the number of wins of Lelle and Flamm, respectively. The Blue King considers a match to be successful if and only if:
Note that gcd(0,x)=gcd(x,0)=x for every non-negative integer x.
Lelle and Flamm can decide to stop the match whenever they want, and the final score of the performance is l\xe2\x8b\x85WL+f\xe2\x8b\x85WF.
Please help Lelle and Flamm coordinate their wins and losses such that the performance is successful, and the total score of the performance is maximized.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains four integers n, m, l, f (2\xe2\x89\xa4n\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85107, 1\xe2\x89\xa4l,f\xe2\x89\xa4109, n=m): n, m gives the upper bound on the number of Lelle and Flamm\'s wins, l and f determine the final score of the performance.
Unusual additional constraint: it is guaranteed that, for each test, there are no pairs of test cases with the same pair of n, m.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum total score of a successful performance.
In the first test case, a possible performance is as follows:
The final score is 2\xe2\x8b\x852+3\xe2\x8b\x855=19.
In the third test case, a possible performance is as follows:
The final score is 5\xe2\x8b\x852+4\xe2\x8b\x852=18. Note that Lelle and Flamm can stop the match even if neither of them has n wins." "2600  x814"
    
2002E "Cosmic Rays" "brute force, data structures, dp" "Given an array of integers s1,s2,\xe2\x80\xa6,sl, every second, cosmic rays will cause all si such that i=1 or si\xe2\x89\xa0si\xe2\x88\x921 to be deleted simultaneously, and the remaining parts will be concatenated together in order to form the new array s1,s2,\xe2\x80\xa6,sl\xe2\x80\xb2.
Define the strength of an array as the number of seconds it takes to become empty.
You are given an array of integers compressed in the form of n pairs that describe the array left to right. Each pair (ai,bi) represents ai copies of bi, i.e. bi,bi,\xe2\x8b\xaf,bi\xe2\x8f\x9faiï¿½times.
For each i=1,2,\xe2\x80\xa6,n, please find the strength of the sequence described by the first i pairs.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows. 
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of sequence a.
The next n lines contain two integers each ai, bi (1\xe2\x89\xa4ai\xe2\x89\xa4109,0\xe2\x89\xa4bi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the pairs which describe the sequence. 
It is guaranteed that the sum of all n does not exceed 3\xe2\x8b\x85105.
It is guaranteed that for all 1\xe2\x89\xa4i<n, bi\xe2\x89\xa0bi+1 holds.
For each test case, print one line containing n integersï¿½\xe2\x80\x94 the answer for each prefix of pairs.
In the first test case, for the prefix of length 4, the changes will be [0,0,1,0,0,0,1,1,1,1,1]\xe2\x86\x92[0,0,0,1,1,1,1]\xe2\x86\x92[0,0,1,1,1]\xe2\x86\x92[0,1,1]\xe2\x86\x92[1]\xe2\x86\x92[], so the array becomes empty after 5 seconds.
In the second test case, for the prefix of length 4, the changes will be [6,6,6,6,3,6,6,6,6,0,0,0,0]\xe2\x86\x92[6,6,6,6,6,6,0,0,0]\xe2\x86\x92[6,6,6,6,6,0,0]\xe2\x86\x92[6,6,6,6,0]\xe2\x86\x92[6,6,6]\xe2\x86\x92[6,6]\xe2\x86\x92[6]\xe2\x86\x92[], so the array becomes empty after 7 seconds." "2300  x2428"
    
2002D2 "DFS Checker (Hard Version)" "binary search, data structures, dfs and similar, graphs, hashing, trees" "This is the hard version of the problem. In this version, you are given a generic tree and the constraints on n and q are higher. You can make hacks only if both versions of the problem are solved.
You are given a rooted tree consisting of n vertices. The vertices are numbered from 1 to n, and the root is the vertex 1. You are also given a permutation p1,p2,\xe2\x80\xa6,pn of [1,2,\xe2\x80\xa6,n].
You need to answer q queries. For each query, you are given two integers x, y; you need to swap px and py and determine if p1,p2,\xe2\x80\xa6,pn is a valid DFS order\xe2\x80\xa0 of the given tree.
Please note that the swaps are persistent through queries.
\xe2\x80\xa0 A DFS order is found by calling the following dfs function on the given tree.
Note that the DFS order is not unique.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows. 
The first line of each test case contains two integers n, q (2\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105, 2\xe2\x89\xa4q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of vertices in the tree and the number of queries.
The next line contains n\xe2\x88\x921 integers a2,a3,\xe2\x80\xa6,an (1\xe2\x89\xa4ai<i)ï¿½\xe2\x80\x94 the parent of each vertex in the given tree.
The next line contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n, all pi are distinct)ï¿½\xe2\x80\x94 the initial permutation p.
The next q lines each contain two integers x, y (1\xe2\x89\xa4x,y\xe2\x89\xa4n,x\xe2\x89\xa0y)ï¿½\xe2\x80\x94 the positions of the elements to swap in the permutation.
It is guaranteed that the sum of all n does not exceed 3\xe2\x8b\x85105, and the sum of all q does not exceed 105.
For each test case, print q lines corresponding to the q queries. For each query, output YES if there is a DFS order that exactly equals the current permutation, and output NO otherwise.
You can output Yes and No in any case (for example, strings yEs, yes, Yes, and YES will be recognized as a positive response).
In the first test case, the permutation p1,p2,\xe2\x80\xa6,pn after each modification is [1,3,2],[1,2,3],[3,2,1], respectively. The first two permutations are valid DFS orders; the third is not a DFS order.
In the second test case, the permutation p1,p2,\xe2\x80\xa6,pn after each modification is [1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5], respectively." "2300  x2383"
    
2002D1 "DFS Checker (Easy Version)" "brute force, data structures, dfs and similar, graphs, hashing, trees" "This is the easy version of the problem. In this version, the given tree is a perfect binary tree and the constraints on n and q are lower. You can make hacks only if both versions of the problem are solved.
You are given a perfect binary tree\xe2\x80\xa0 consisting of n vertices. The vertices are numbered from 1 to n, and the root is the vertex 1. You are also given a permutation p1,p2,\xe2\x80\xa6,pn of [1,2,\xe2\x80\xa6,n].
You need to answer q queries. For each query, you are given two integers x, y; you need to swap px and py and determine if p1,p2,\xe2\x80\xa6,pn is a valid DFS order\xe2\x80\xa1 of the given tree.
Please note that the swaps are persistent through queries.
\xe2\x80\xa0 A perfect binary tree is a tree with vertex 1 as its root, with size n=2k\xe2\x88\x921 for a positive integer k, and where the parent of each vertex i (1<i\xe2\x89\xa4n) is \xe2\x8c\x8ai2\xe2\x8c\x8b. Thus, all leaves of this tree are at a distance k\xe2\x88\x921 from the root.
\xe2\x80\xa1 A DFS order is found by calling the following dfs function on the given tree.
Note that the DFS order is not unique.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows. 
The first line of each test case contains two integers n, q (3\xe2\x89\xa4n\xe2\x89\xa465535, 2\xe2\x89\xa4q\xe2\x89\xa45\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of vertices in the tree and the number of queries. It is guaranteed that n=2k\xe2\x88\x921 for a positive integer k.
The next line contains n\xe2\x88\x921 integers a2,a3,\xe2\x80\xa6,an (1\xe2\x89\xa4ai<i)ï¿½\xe2\x80\x94 the parent of each vertex in the given tree. It is guaranteed that ai=\xe2\x8c\x8ai2\xe2\x8c\x8b.
The next line contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n, all pi are distinct)ï¿½\xe2\x80\x94 the initial permutation p.
The next q lines each contain two integers x, y (1\xe2\x89\xa4x,y\xe2\x89\xa4n,x\xe2\x89\xa0y)ï¿½\xe2\x80\x94 the positions of the elements to swap in the permutation.
It is guaranteed that the sum of all n does not exceed 65535, and the sum of all q does not exceed 5\xe2\x8b\x85104.
For each test case, print q lines corresponding to the q queries. For each query, output YES if there is a DFS order that exactly equals the current permutation, and output NO otherwise.
You can output Yes and No in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).
In the first test case, the permutation p1,p2,\xe2\x80\xa6,pn after each modification is [1,3,2],[1,2,3],[3,2,1], respectively. The first two permutations are valid DFS orders; the third is not a DFS order.
In the second test case, the permutation p1,p2,\xe2\x80\xa6,pn after each modification is [1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5], respectively." "1900  x4316"
    
2002C "Black Circles" "brute force, geometry, greedy, math" "There are n circles on a two-dimensional plane. The i-th circle is centered at (xi,yi). Initially, all circles have a radius of 0.
The circles\' radii increase at a rate of 1 unit per second.
You are currently at (xs,ys); your goal is to reach (xt,yt) without touching the circumference of any circle (including the moment you reach (xt,yt)). You can move in any direction you want. However, your speed is limited to 1 unit per second.
Please determine whether this is possible.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of circles.
The next n lines each contain two integers xi, yi (1\xe2\x89\xa4xi,yi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the center of each circle.
The final line contains four integers xs, ys, xt, yt (1\xe2\x89\xa4xs,ys,xt,yt\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the coordinates of the starting point and the goal, respectively.
It is guaranteed that these n+2 points are distinct.
It is guaranteed that the sum of n over all testcases does not exceed 105.
For each test case, output YES if it is possible to reach the goal without touching the circle boundaries, and output NO otherwise.
You can output Yes and No in any case (for example, strings yEs, yes, Yes, and YES will be recognized as a positive response).
In the first test case, a feasible way of movement is as follows. " "1200  x15009"
    
2002B "Removals Game" "constructive algorithms, games" "Alice got a permutation a1,a2,\xe2\x80\xa6,an of [1,2,\xe2\x80\xa6,n], and Bob got another permutation b1,b2,\xe2\x80\xa6,bn of [1,2,\xe2\x80\xa6,n]. They are going to play a game with these arrays.
In each turn, the following events happen in order:
The game continues for n\xe2\x88\x921 turns, after which both arrays will have exactly one remaining element: x in the array a and y in the array b.
If x=y, Bob wins; otherwise, Alice wins. Find which player will win if both players play optimally.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows. 
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105).
The next line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n, all ai are distinct)ï¿½\xe2\x80\x94 the permutation of Alice.
The next line contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4n, all bi are distinct)ï¿½\xe2\x80\x94 the permutation of Bob.
It is guaranteed that the sum of all n does not exceed 3\xe2\x8b\x85105.
For each test case, print a single line with the name of the winner, assuming both players play optimally. If Alice wins, print Alice; otherwise, print Bob.
In the first test case, Bob can win the game by deleting the same element as Alice did.
In the second test case, Alice can delete 3 in the first turn, and then in the second turn, delete the element that is different from the one Bob deleted in the first turn to win the game." "1000  x18749"
    
2002A "Distanced Coloring" "constructive algorithms, implementation, math" "You received an n\xc3\x97mn\xc3\x97m grid from a mysterious source. The source also gave you a magic positive integer constant kk.
The source told you to color the grid with some colors, satisfying the following condition:
You don\'t like using too many colors. Please find the minimum number of colors needed to color the grid.
Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The only line of each test case consists of three positive integers nn, mm, kk (1\xe2\x89\xa4n,m,k\xe2\x89\xa41041\xe2\x89\xa4n,m,k\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the dimensions of the grid and the magic constant.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum number of colors needed to color the grid.
In the first test case, one of the optimal constructions is:
In the second test case, the color of all cells must be pairwise different, so the answer is 55." "800  x19359"
    
2.00E+05 "Deterministic Heap (Hard Version)" "combinatorics, dp, trees" "This is the hard version of the problem. The difference between the two versions is the definition of deterministic max-heap, time limit, and constraints on n and t. You can make hacks only if both versions of the problem are solved.
Consider a perfect binary tree with size 2n\xe2\x88\x921, with nodes numbered from 1 to 2n\xe2\x88\x921 and rooted at 1. For each vertex v (1\xe2\x89\xa4v\xe2\x89\xa42n\xe2\x88\x921\xe2\x88\x921), vertex 2v is its left child and vertex 2v+1 is its right child. Each node v also has a value av assigned to it.
Define the operation pop as follows:
Then we say the pop operation is deterministic if there is a unique way to do such operation. In other words, a2v\xe2\x89\xa0a2v+1 would hold whenever choosing between them.
A binary tree is called a max-heap if for every vertex v (1\xe2\x89\xa4v\xe2\x89\xa42n\xe2\x88\x921\xe2\x88\x921), both av\xe2\x89\xa5a2v and av\xe2\x89\xa5a2v+1 hold.
A max-heap is deterministic if the pop operation is deterministic to the heap when we do it for the first and the second time.
Initially, av:=0 for every vertex v (1\xe2\x89\xa4v\xe2\x89\xa42n\xe2\x88\x921), and your goal is to count the number of different deterministic max-heaps produced by applying the following operation add exactly k times:
Two heaps are considered different if there is a node which has different values in the heaps. 
Since the answer might be large, print it modulo p.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa450). The description of the test cases follows.
The first line of each test case contains three integers n,k,p (2\xe2\x89\xa4n\xe2\x89\xa4100, 1\xe2\x89\xa4k\xe2\x89\xa4500, 108\xe2\x89\xa4p\xe2\x89\xa4109, p is a prime).
It is guaranteed that the sum of n does not exceed 100 and the sum of k over all test cases does not exceed 500.
For each test case, output a single line containing an integer: the number of different deterministic max-heaps produced by applying the aforementioned operation add exactly k times, modulo p.
For the first testcase, if we choose v=1 and do the operation, we would have a=[1,0,0], and since a2=a3, we can choose either of them when doing the first pop operation, so such heap is not a deterministic max-heap. 
And if we choose v=2, we would have a=[1,1,0], during the first pop, the following would happen:
And during the second pop, the following would happen:
Since both the first and the second pop operation are deterministic, this is a deterministic max-heap. Also, if we choose v=3, a would be a deterministic max-heap, so the answer is 2." "2900  x223"
    
2.00E+04 "Deterministic Heap (Easy Version)" "combinatorics, dp, math, trees" "This is the easy version of the problem. The difference between the two versions is the definition of deterministic max-heap, time limit, and constraints on n and t. You can make hacks only if both versions of the problem are solved.
Consider a perfect binary tree with size 2n\xe2\x88\x921, with nodes numbered from 1 to 2n\xe2\x88\x921 and rooted at 1. For each vertex v (1\xe2\x89\xa4v\xe2\x89\xa42n\xe2\x88\x921\xe2\x88\x921), vertex 2v is its left child and vertex 2v+1 is its right child. Each node v also has a value av assigned to it.
Define the operation pop as follows:
Then we say the pop operation is deterministic if there is a unique way to do such operation. In other words, a2v\xe2\x89\xa0a2v+1 would hold whenever choosing between them.
A binary tree is called a max-heap if for every vertex v (1\xe2\x89\xa4v\xe2\x89\xa42n\xe2\x88\x921\xe2\x88\x921), both av\xe2\x89\xa5a2v and av\xe2\x89\xa5a2v+1 hold.
A max-heap is deterministic if the pop operation is deterministic to the heap when we do it for the first time.
Initially, av:=0 for every vertex v (1\xe2\x89\xa4v\xe2\x89\xa42n\xe2\x88\x921), and your goal is to count the number of different deterministic max-heaps produced by applying the following operation add exactly k times:
Two heaps are considered different if there is a node which has different values in the heaps. 
Since the answer might be large, print it modulo p.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains three integers n,k,p (1\xe2\x89\xa4n,k\xe2\x89\xa4500, 108\xe2\x89\xa4p\xe2\x89\xa4109, p is a prime).
It is guaranteed that the sum of n and the sum of k over all test cases does not exceed 500.
For each test case, output a single line containing an integer: the number of different deterministic max-heaps produced by applying the aforementioned operation add exactly k times, modulo p.
For the first testcase, there is only one way to generate a, and such sequence is a deterministic max-heap, so the answer is 1.
For the second testcase, if we choose v=1 and do the operation, we would have a=[1,0,0], and since a2=a3, we can choose either of them when doing the first pop operation, so such heap is not a deterministic max-heap. 
And if we choose v=2, we would have a=[1,1,0], during the first pop, the following would happen:
Since the first pop operation is deterministic, this is a deterministic max-heap. Also, if we choose v=3, a would be a deterministic max-heap, so the answer is 2." "2400  x1269"
    
2001D "Longest Max Min Subsequence" "brute force, constructive algorithms, data structures, greedy, implementation" "You are given an integer sequence a1,a2,\xe2\x80\xa6,an. Let S be the set of all possible non-empty subsequences of a without duplicate elements. Your goal is to find the longest sequence in S. If there are multiple of them, find the one that minimizes lexicographical order after multiplying terms at odd positions by \xe2\x88\x921.
For example, given a=[3,2,3,1], S={[1],[2],[3],[2,1],[2,3],[3,1],[3,2],[2,3,1],[3,2,1]}. Then [2,3,1] and [3,2,1] would be the longest, and [3,2,1] would be the answer since [\xe2\x88\x923,2,\xe2\x88\x921] is lexicographically smaller than [\xe2\x88\x922,3,\xe2\x88\x921].
A sequence c is a subsequence of a sequence d if c can be obtained from d by the deletion of several (possibly, zero or all) elements.
A sequence c is lexicographically smaller than a sequence d if and only if one of the following holds:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa45\xe2\x8b\x85104). The description of the test cases follows.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105) \xe2\x80\x94 the length of a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n) \xe2\x80\x94 the sequence a.
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output the answer in the following format:
Output an integer m in the first line \xe2\x80\x94 the length of b.
Then output m integers b1,b2,\xe2\x80\xa6,bm in the second line \xe2\x80\x94 the sequence b.
In the first example, S={[1],[2],[3],[1,3],[2,1],[2,3],[3,1],[3,2],[2,1,3],[3,2,1]}. Among them, [2,1,3] and [3,2,1] are the longest and [\xe2\x88\x923,2,\xe2\x88\x921] is lexicographical smaller than [\xe2\x88\x922,1,\xe2\x88\x923], so [3,2,1] is the answer.
In the second example, S={[1]}, so [1] is the answer." "1900  x5009"
    
2001C "Guess The Tree" "binary search, brute force, dfs and similar, divide and conquer, dsu, greedy, interactive, trees" "This is an interactive problem.
Misuki has chosen a secret tree with n nodes, indexed from 1 to n, and asked you to guess it by using queries of the following type: 
Find out the structure of Misuki\'s secret tree using at most 15n queries!
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4200)ï¿½\xe2\x80\x94 the number of test cases.
Each test case consists of a single line with an integer n (2\xe2\x89\xa4n\xe2\x89\xa41000), the number of nodes in the tree.
It is guaranteed that the sum of n across all test cases does not exceed 1000.
The interaction begins by reading the integer n.
Then you can make up to 15n queries.
To make a query, output a line in the format ""? a b"" (without quotes) (1\xe2\x89\xa4a,b\xe2\x89\xa4n). After each query, read an integerï¿½\xe2\x80\x94 the answer to your query.
To report the answer, output a line in the format ""! a1 b1 a2 b2 ... an\xe2\x88\x921 bn\xe2\x88\x921"" (without quotes), meaning that there is an edge between nodes ai and bi, for each 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921. You can print the edges in any order.
After 15n queries have been made, the response to any other query will be \xe2\x88\x921. Once you receive such a response, terminate the program to receive the Wrong Answer verdict.
After printing each line, do not forget to output the end of line and flush the output buffer. Otherwise, you will receive the Idleness limit exceeded verdict. To flush, use: 
Hacks
For hacks, use the following format: The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4200)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test contains an integer nï¿½\xe2\x80\x94 the number of nodes in the hidden tree.
Then n\xe2\x88\x921 lines follow. The i-th of them contains two integers ai and bi (1\xe2\x89\xa4ai,bi\xe2\x89\xa4n), meaning that there is an edge between ai and bi in the hidden tree.
The sum of n over all test cases must not exceed 1000.
A tree is an undirected acyclic connected graph. A tree with n nodes will always have n\xe2\x88\x921 edges.
In the example case, the answer to ""? 1 2"" is 1. This means that there is an edge between nodes 1 and 2.
The answer to ""? 1 3"" is 1. This means that there is an edge between nodes 1 and 3.
The answer to ""? 1 4"" is 3. It can be proven that this can only happen if node 3 is connected to both node 1 and 4.
The edges of the tree are hence (1,2), (1,3) and (3,4)." "1500  x10658"
    
2001B "Generate Permutation" "constructive algorithms" "There is an integer sequence a of length n, where each element is initially \xe2\x88\x921.
Misuki has two typewriters where the first one writes letters from left to right, with a pointer initially pointing to 1, and another writes letters from right to left with a pointer initially pointing to n.
Misuki would choose one of the typewriters and use it to perform the following operations until a becomes a permutation of [1,2,\xe2\x80\xa6,n]
Your task is to construct any permutation p of length n, such that the minimum number of carriage return operations needed to make a=p is the same no matter which typewriter Misuki is using.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the permutation.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a line of n integers, representing the permutation p of length n such that the minimum number of carriage return operations needed to make a=p is the same no matter which typewriter Misuki is using, or \xe2\x88\x921 if it is impossible to do so.
If there are multiple valid permutations, you can output any of them.
In the first testcase, it\'s possible to make a=p=[1] using 0 carriage return operations.
In the second testcase, it is possible to make a=p=[1,2] with the minimal number of carriage returns as follows:
If Misuki is using the first typewriter:
If Misuki is using the second typewriter:
It can be proven that the minimum number of carriage returns needed to transform a into p when using the first typewriter is 0 and it is 1 when using the second one, so this permutation is not valid.
Similarly, p=[2,1] is also not valid, so there is no solution for n=2.
In the third testcase, it is possibile to make a=p=[3,1,2] with 1 carriage return with both the first and the second typewriter. It can be proven that, for both typewriters, it is impossible to write p with 0 carriage returns.
With the first typewriter it is possible to: 
With the second typewriter it is possible to: " "800  x23964"
    
2001A "Make All Equal" "greedy, implementation" "You are given a cyclic array a1,a2,\xe2\x80\xa6,an.
You can perform the following operation on a at most n\xe2\x88\x921 times:
Your goal is to find the minimum number of operations needed to make all elements in a equal.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100) \xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n) \xe2\x80\x94 the elements of array a.
For each test case, output a single line containing an integer: the minimum number of operations needed to make all elements in a equal.
In the first test case, there is only one element in a, so we can\'t do any operation.
In the second test case, we can perform the following operations to make all elements in a equal:
It can be proven that we can\'t make all elements in a equal using fewer than 2 operations, so the answer is 2." "800  x29470"
    
2000H "Ksyusha and the Loaded Set" "binary search, brute force, data structures, implementation" "Ksyusha decided to start a game development company. To stand out among competitors and achieve success, she decided to write her own game engine. The engine must support a set initially consisting of n distinct integers a1,a2,\xe2\x80\xa6,an.
The set will undergo m operations sequentially. The operations can be of the following types: 
The k-load of the set is defined as the minimum positive integer d such that the integers d,d+1,\xe2\x80\xa6,d+(k\xe2\x88\x921) do not appear in this set. For example, the 3-load of the set {3,4,6,11} is 7, since the integers 7,8,9 are absent from the set, and no smaller value fits.
Ksyusha is busy with management tasks, so you will have to write the engine. Implement efficient support for the described operations.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The following lines describe the test cases.
The first line contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the initial size of the set.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4a1<a2<\xe2\x80\xa6<an\xe2\x89\xa42\xe2\x8b\x85106)ï¿½\xe2\x80\x94 the initial state of the set.
The third line contains an integer m (1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of operations.
The next m lines contain the operations. The operations are given in the following format: 
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105, and the same holds for m.
For each test case, output the answers to the operations of type ""?""." "2200  x1652"
    
2000G "Call During the Journey" "binary search, brute force, graphs, greedy, shortest paths" "You live in a city consisting of n intersections and m streets connecting some pairs of intersections. You can travel in either direction on each street. No two streets connect the same pair of intersections, and no street connects an intersection to itself. You can reach any intersection from any other, possibly passing through some other intersections.
Every minute, you can board a bus at intersection ui and travel for li1 minutes to intersection vi. Conversely, you can travel from intersection vi to intersection ui in li1 minutes. You can only board and exit the bus at intersections. You can only board the bus at an intersection if you are currently there.
You can also walk along each street, which takes li2>li1 minutes.
You can make stops at intersections.
You live at intersection number 1. Today you woke up at time 0, and you have an important event scheduled at intersection number n, which you must reach no later than time t0. You also have a phone call planned that will last from t1 to t2 minutes (t1<t2<t0). 
During the phone call, you cannot ride the bus, but you can walk along any streets, make stops, or stay at home. You can exit the bus at minute t1 and board the bus again at minute t2.
Since you want to get enough sleep, you became curious \xe2\x80\x94 how late can you leave home to have time to talk on the phone and still not be late for the event?
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The following are the descriptions of the test cases.
The first line of each test case contains two integers n, m (2\xe2\x89\xa4n\xe2\x89\xa4105,1\xe2\x89\xa4m\xe2\x89\xa4105) \xe2\x80\x94 the number of intersections and streets in the city.
The second line of each test case contains three integers t0, t1, t2 (1\xe2\x89\xa4t1<t2<t0\xe2\x89\xa4109) \xe2\x80\x94 the start time of the event, the start time of the phone call, and its end time, respectively.
The next m lines of each test case contain descriptions of the streets.
The i-th line contains four integers ui, vi, li1, li2 (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n, ui\xe2\x89\xa0vi, 1\xe2\x89\xa4li1<li2\xe2\x89\xa4109) \xe2\x80\x94 the numbers of the intersections connected by the i-th street, as well as the travel time along the street by bus and on foot. It is guaranteed that no two streets connect the same pair of intersections and that it is possible to reach any intersection from any other.
It is guaranteed that the sum of the values of n across all test cases does not exceed 105. It is also guaranteed that the sum of the values of m across all test cases does not exceed 105.
For each test case, output a single integer \xe2\x80\x94 the latest time you can leave home to have time to talk on the phone and not be late for the event. If you cannot reach the event on time, output -1." "2100  x2333"
    
2000F "Color Rows and Columns" "dp, greedy, implementation, math" "You have n rectangles, the i-th of which has a width of ai and a height of bi.
You can perform the following operation an unlimited number of times: choose a rectangle and a cell in it, and then color it.
Each time you completely color any row or column, you earn 1 point. Your task is to score at least k points with as few operations as possible.
Suppose you have a rectangle with a width of 6 and a height of 3. You can score 4 points by coloring all the cells in any 4 columns, thus performing 12 operations.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x94 the number of test cases. The following are the descriptions of the test cases.
The first line of each test case description contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa41000,1\xe2\x89\xa4k\xe2\x89\xa4100) \xe2\x80\x94 the number of rectangles in the case and the required number of points.
The next n lines contain the descriptions of the rectangles. The i-th line contains two integers ai and bi (1\xe2\x89\xa4ai,bi\xe2\x89\xa4100) \xe2\x80\x94 the width and height of the i-th rectangle.
It is guaranteed that the sum of the values of n across all test cases does not exceed 1000.
For each test case, output a single integer \xe2\x80\x94 the minimum number of operations required to score at least k points. If it is impossible to score at least k points, output -1." "1900  x5367"
    
2000E "Photoshoot for Gorillas" "combinatorics, data structures, greedy, math" "You really love gorillas, so you decided to organize a photoshoot for them. Gorillas live in the jungle. The jungle is represented as a grid of nn rows and mm columns. ww gorillas agreed to participate in the photoshoot, and the gorilla with index ii (1\xe2\x89\xa4i\xe2\x89\xa4w1\xe2\x89\xa4i\xe2\x89\xa4w) has a height of aiai. You want to place all the gorillas in the cells of the grid such that there is no more than one gorilla in each cell.
The spectacle of the arrangement is equal to the sum of the spectacles of all sub-squares of the grid with a side length of kk.
The spectacle of a sub-square is equal to the sum of the heights of the gorillas in it.
From all suitable arrangements, choose the arrangement with the maximum spectacle.
The first line contains an integer tt (1\xe2\x89\xa4t\xe2\x89\xa41031\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
The descriptions of the test cases follow.
The first line contains integers nn, mm, kk (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4k\xe2\x89\xa4min(n,m)1\xe2\x89\xa4k\xe2\x89\xa4min(n,m))ï¿½\xe2\x80\x94 the dimensions of the grid and the side length of the square.
The second line contains an integer ww (1\xe2\x89\xa4w\xe2\x89\xa4n\xe2\x8b\x85m1\xe2\x89\xa4w\xe2\x89\xa4n\xe2\x8b\x85m)ï¿½\xe2\x80\x94 the number of gorillas.
The third line contains ww integers a1,a2,\xe2\x80\xa6,awa1,a2,\xe2\x80\xa6,aw (1\xe2\x89\xa4ai\xe2\x89\xa41091\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the heights of the gorillas.
It is guaranteed that the sum of n\xe2\x8b\x85mn\xe2\x8b\x85m across all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105. The same guarantee applies to ww.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum spectacle of a suitable arrangement.
In the first test case of the first input set, the spectacle of the following sub-squares is summed:
The picture shows the optimal arrangement of the gorillas. The spectacle of the arrangement is 4+4+3+3+4+3=214+4+3+3+4+3=21." "1400  x13222"
    
2000D "Right Left Wrong" "greedy, implementation, two pointers" "Vlad found a strip of n cells, numbered from left to right from 1 to n. In the i-th cell, there is a positive integer ai and a letter si, where all si are either \'L\' or \'R\'.
Vlad invites you to try to score the maximum possible points by performing any (possibly zero) number of operations.
In one operation, you can choose two indices l and r (1\xe2\x89\xa4l<r\xe2\x89\xa4n) such that sl = \'L\' and sr = \'R\' and do the following:
For example, consider the following strip:
You can first choose l=1, r=2 and add 3+5=8 to your score.
Then choose l=3, r=6 and add 1+4+3+2=10 to your score.
As a result, it is impossible to perform another operation, and the final score is 18.
What is the maximum score that can be achieved?
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains one integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the strip.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the numbers written on the strip.
The third line of each test case contains a string s of n characters \'L\' and \'R\'.
It is guaranteed that the sum of the values of n across all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output one integerï¿½\xe2\x80\x94 the maximum possible number of points that can be scored." "1200  x22867"
    
2000C "Numeric String Template" "data structures, strings" "Kristina has an array a, called a template, consisting of n integers. She also has m strings, each consisting only of lowercase Latin letters. The strings are numbered from 1 to m. She wants to check which strings match the template.
A string s is considered to match the template if all of the following conditions are simultaneously satisfied: 
For example, if a = [3,5,2,1,3], then the string ""abfda"" matches the template, while the string ""afbfa"" does not, since the character ""f"" corresponds to both numbers 1 and 5.
The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The following descriptions are for the test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of elements in the array a.
The second line of each test case contains exactly n integers ai (\xe2\x88\x92109\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the elements of the array a.
The third line of each test case contains a single integer m (1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of strings to check for template matching.
Following are m strings, each containing a non-empty string sj (1\xe2\x89\xa4|sj|\xe2\x89\xa42\xe2\x8b\x85105), consisting of lowercase Latin letters.
It is guaranteed that the sum of n across all test cases does not exceed 2\xe2\x8b\x85105, and that the sum of the lengths of all strings does not exceed 2\xe2\x8b\x85105.
For each test case, output m lines. On the i-th line (1\xe2\x89\xa4i\xe2\x89\xa4m) output: 
You may output the answer in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
The first test case is explained in the problem statement." "1000  x25302"
    
2000B "Seating in a Bus" "two pointers" "In Berland, a bus consists of a row of n seats numbered from 1 to n. Passengers are advised to always board the bus following these rules: 
Today, n passengers boarded the bus. The array a chronologically records the seat numbers they occupied. That is, a1 contains the seat number where the first passenger sat, a2 \xe2\x80\x94 the seat number where the second passenger sat, and so on.
You know the contents of the array a. Determine whether all passengers followed the recommendations.
For example, if n=5, and a = [5,4,2,1,3], then the recommendations were not followed, as the 3-rd passenger sat in seat number 2, while the neighboring seats with numbers 1 and 3 were free.
The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The following describes the input test cases.
The first line of each test case contains exactly one integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of seats in the bus and the number of passengers who boarded the bus.
The second line of each test case contains n distinct integers ai (1\xe2\x89\xa4ai\xe2\x89\xa4n) \xe2\x80\x94 the seats that the passengers occupied in chronological order.
It is guaranteed that the sum of n values across all test cases does not exceed 2\xe2\x8b\x85105, and that no passenger sits in an already occupied seat.
For each test case, output on a separate line: 
You may output the answer in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
The first test case is explained in the problem statement." "800  x33689"
    
2000A "Primary Task" "implementation, math, strings" "Dmitry wrote down t integers on the board, and that is good. He is sure that he lost an important integer n among them, and that is bad.
The integer n had the form 10^x (x\xe2\x89\xa52), where the symbol \'^\' denotes exponentiation.. Something went wrong, and Dmitry missed the symbol \'^\' when writing the important integer. For example, instead of the integer 105, he would have written 105, and instead of 1019, he would have written 1019.
Dmitry wants to understand which of the integers on the board could have been the important integer and which could not.
The first line of the input contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of integers on the board.
The next t lines each contain an integer a (1\xe2\x89\xa4a\xe2\x89\xa410000)ï¿½\xe2\x80\x94 the next integer from the board.
For each integer on the board, output ""YES"" if it could have been the important integer and ""NO"" otherwise.
You may output each letter in any case (lowercase or uppercase). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive answer." "800  x37206"
    
1999G2 "Ruler (hard version)" "binary search, interactive, ternary search" "This is the hard version of the problem. The only difference between the two versions is that in this version, you can make at most 7 queries.
This is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read the guide for participants.
We have a secret ruler that is missing one number x (2\xe2\x89\xa4x\xe2\x89\xa4999). When you measure an object of length y, the ruler reports the following values: 
The ruler above is missing the number 4, so it correctly measures the first segment as length 3 but incorrectly measures the second segment as length 6 even though it is actually 5. 
You need to find the value of x. To do that, you can make queries of the following form:
Find the value of x. You can ask at most 7 queries.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
There is no initial input for each test case. You should begin the interaction by asking a query.
To make a query, output a single line of the form ?ï¿½aï¿½b (1\xe2\x89\xa4a,b\xe2\x89\xa41000). In response, you will be told the measured area of the rectangle, according to our secret ruler.
When you are ready to print the answer, output a single line of the form !ï¿½x (2\xe2\x89\xa4x\xe2\x89\xa4999). After that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.
The interactor is not adaptive, meaning that the answer is known before the participant asks the queries and doesn\'t depend on the queries asked by the participant.
If your program makes more than 7 queries for one set of input data, makes an invalid query, or prints the wrong value of x, then the response to the query will be \xe2\x88\x921. After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
After printing a query do not forget to output the end of line and flush the output. Otherwise, you may get Idleness limit exceeded verdict. To do this, use: 
Hacks
To make a hack, use the following format.
The first line should contain a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case should contain a single integer x (2\xe2\x89\xa4x\xe2\x89\xa4999)ï¿½\xe2\x80\x94 the missing number on the ruler.
In the first test, the interaction proceeds as follows.
Note that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction." "1700  x7863"
    
1999G1 "Ruler (easy version)" "binary search, interactive" "This is the easy version of the problem. The only difference between the two versions is that in this version, you can make at most 10 queries.
This is an interactive problem. If you are unsure how interactive problems work, then it is recommended to read the guide for participants.
We have a secret ruler that is missing one number x (2\xe2\x89\xa4x\xe2\x89\xa4999). When you measure an object of length y, the ruler reports the following values: 
The ruler above is missing the number 4, so it correctly measures the first segment as length 3 but incorrectly measures the second segment as length 6 even though it is actually 5. 
You need to find the value of x. To do that, you can make queries of the following form:
Find the value of x. You can ask at most 10 queries.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
There is no initial input for each test case. You should begin the interaction by asking a query.
To make a query, output a single line of the form ?ï¿½aï¿½b (1\xe2\x89\xa4a,b\xe2\x89\xa41000). In response, you will be told the measured area of the rectangle, according to our secret ruler.
When you are ready to print the answer, output a single line of the form !ï¿½x (2\xe2\x89\xa4x\xe2\x89\xa4999). After that, proceed to process the next test case or terminate the program if it was the last test case. Printing the answer does not count as a query.
The interactor is not adaptive, meaning that the answer is known before the participant asks the queries and doesn\'t depend on the queries asked by the participant.
If your program makes more than 10 queries for one set of input data, makes an invalid query, or prints the wrong value of x, then the response to the query will be \xe2\x88\x921. After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
After printing a query do not forget to output the end of line and flush the output. Otherwise, you may get Idleness limit exceeded verdict. To do this, use: 
Hacks
To make a hack, use the following format.
The first line should contain a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case should contain a single integer x (2\xe2\x89\xa4x\xe2\x89\xa4999)ï¿½\xe2\x80\x94 the missing number on the ruler.
In the first test, the interaction proceeds as follows.
Note that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction." "1500  x10286"
    
1999F "Expected Median" "combinatorics, math" "Arul has a binary array\xe2\x88\x97 a of length n.
He will take all subsequences\xe2\x80\xa0 of length k (k is odd) of this array and find their median.\xe2\x80\xa1
What is the sum of all these values?
As this sum can be very large, output it modulo 109+7. In other words, print the remainder of this sum when divided by 109+7.
\xe2\x88\x97A binary array is an array consisting only of zeros and ones.
\xe2\x80\xa0An array b is a subsequence of an array a if b can be obtained from a by the deletion of several (possibly, zero or all) elements. Subsequences don\'t have to be contiguous.
\xe2\x80\xa1The median of an array of odd length k is the k+12-th element when sorted.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, k is odd)ï¿½\xe2\x80\x94 the length of the array and the length of the subsequence, respectively.
The second line of each test case contains n integers ai (0\xe2\x89\xa4ai\xe2\x89\xa41)ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print the sum modulo 109+7.
In the first test case, there are four subsequences of [1,0,0,1] with length k=3: 
In the second test case, all subsequences of length 1 have median 1, so the answer is 5." "1500  x10344"
    
1999E "Triple Operations" "dp, implementation, math" "On the board Ivy wrote down all integers from l to r, inclusive.
In an operation, she does the following: 
What is the minimum number of operations Ivy needs to make all numbers on the board equal 0? We have a proof that this is always possible.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains two integers l and r (1\xe2\x89\xa4l<r\xe2\x89\xa42\xe2\x8b\x85105).
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of operations needed to make all numbers on the board equal 0.
In the first test case, we can perform 5 operations as follows: 1,2,3\xe2\x86\x92x=1,y=23,0,3\xe2\x86\x92x=0,y=31,0,3\xe2\x86\x92x=0,y=31,0,1\xe2\x86\x92x=0,y=10,0,1\xe2\x86\x92x=0,y=10,0,0." "1300  x18597"
    
1999D "Slavic's Exam" "greedy, implementation, strings" "Slavic has a very tough exam and needs your help in order to pass it. Here is the question he is struggling with:
There exists a string s, which consists of lowercase English letters and possibly zero or more ""?"". 
Slavic is asked to change each ""?"" to a lowercase English letter such that string t becomes a subsequence (not necessarily continuous) of the string s. 
Output any such string, or say that it is impossible in case no string that respects the conditions exists.
The first line contains a single integer T (1\xe2\x89\xa4T\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single string s (1\xe2\x89\xa4|s|\xe2\x89\xa42\xe2\x8b\x85105, and s consists only of lowercase English letters and ""?""-s) ï¿½\xe2\x80\x93 the original string you have.
The second line of each test case contains a single string t (1\xe2\x89\xa4|t|\xe2\x89\xa4|s|, and t consists only of lowercase English letters) ï¿½\xe2\x80\x93 the string that should be a subsequence of string s.
The sum of |s| over all test cases doesn\'t exceed 2\xe2\x8b\x85105, where |x| denotes the length of the string x.
For each test case, if no such string exists as described in the statement, output ""NO"" (without quotes).
Otherwise, output ""YES"" (without quotes). Then, output one lineï¿½\xe2\x80\x94 the string that respects all conditions.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yEs"", ""yes"", and ""Yes"" will be recognized as a positive response).
If multiple answers are possible, you can output any of them." "1100  x26896"
    
1999C Showering "greedy, implementation" "As a computer science student, Alex faces a hard challengeï¿½\xe2\x80\x94 showering. He tries to shower daily, but despite his best efforts there are always challenges. He takes ss minutes to shower and a day only has mm minutes! 
He already has nn tasks planned for the day. Task ii is represented as an interval (li(li, ri)ri), which means that Alex is busy and can not take a shower in that time interval (at any point in time strictly between lili and riri). No two tasks overlap.
Given all nn time intervals, will Alex be able to shower that day? In other words, will Alex have a free time interval of length at least ss?
In the first test case, Alex can shower for the first 33 minutes of the day and not miss any of the tasks. 
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers nn, ss, and mm (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4s,m\xe2\x89\xa41091\xe2\x89\xa4s,m\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of time intervals Alex already has planned, the amount of time Alex takes to take a shower, and the amount of minutes a day has.
Then nn lines follow, the ii-th of which contains two integers lili and riri (0\xe2\x89\xa4li<ri\xe2\x89\xa4m0\xe2\x89\xa4li<ri\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the time interval of the ii-th task. No two tasks overlap.
Additional constraint on the input: li>ri\xe2\x88\x921li>ri\xe2\x88\x921 for every i>1i>1.
The sum of nn over all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105. 
For each test case output ""YES"" (without quotes) if Alex can take a shower for that given test case, and ""NO"" (also without quotes) otherwise.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yEs"", ""yes"", and ""Yes"" will be recognized as a positive response)." "800  x34960"
    
1999B "Card Game" "brute force, constructive algorithms, implementation" "Suneet and Slavic play a card game. The rules of the game are as follows:
Since Suneet and Slavic aren\'t best friends, you need to calculate the number of ways the game could happen that Suneet would end up as the winner.
For a better understanding, please check the notes section.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first and only line of each test case contains 4 integers a1, a2, b1, b2 (1\xe2\x89\xa4a1,a2,b1,b2\xe2\x89\xa410) where a1 and a2 represent the cards Suneet has, and b1 and b2 represent the cards Slavic has, respectively.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of games Suneet would win considering all possible games.
Consider the first test case when Slavic starts with the cards that have the values 2 and 6, and Suneet starts with cards that have the values 3 and 8. The game could happen in 4 different ways:
 
 
 " "1000  x32259"
    
1999A "A+B Again?" "implementation, math" "Given a two-digit positive integer n, find the sum of its digits.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa490)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single two-digit positive integer n (10\xe2\x89\xa4n\xe2\x89\xa499).
For each test case, output a single integerï¿½\xe2\x80\x94 the sum of the digits of n." "800  x55605"
    
2.00E+05 "Eliminating Balls With Merging (Hard Version)" "binary search, brute force, data structures, divide and conquer, greedy, implementation" "This is the hard version of the problem. The only difference is that x=1 in this version. You must solve both versions to be able to hack.
You are given two integers n and x (x=1). There are n balls lined up in a row, numbered from 1 to n from left to right. Initially, there is a value ai written on the i-th ball.
For each integer i from 1 to n, we define a function f(i) as follows: 
 
 
 
For each integer i from x to n, you need to find f(i).
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and x (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105;x=1)ï¿½\xe2\x80\x94 the number of balls and the smallest index i for which you need to find f(i).
The second line of each test case contains a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial number written on each ball.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output n\xe2\x88\x92x+1 space separated integers on a new line, where the j-th integer should represent f(x+j\xe2\x88\x921).
In the first test case, below are the possible values of j for each f(i) from 1 to n." "2500  x692"
    
2.00E+04 "Eliminating Balls With Merging (Easy Version)" "binary search, brute force, data structures, divide and conquer, greedy" "This is the easy version of the problem. The only difference is that x=n in this version. You must solve both versions to be able to hack.
You are given two integers n and x (x=n). There are n balls lined up in a row, numbered from 1 to n from left to right. Initially, there is a value ai written on the i-th ball.
For each integer i from 1 to n, we define a function f(i) as follows: 
 
 
 
For each integer i from x to n, you need to find f(i).
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and x (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105;x=n)ï¿½\xe2\x80\x94 the number of balls and the smallest index i for which you need to find f(i).
The second line of each test case contains a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial number written on each ball.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output n\xe2\x88\x92x+1 space separated integers on a new line, where the j-th integer should represent f(x+j\xe2\x88\x921).
In the first test case, you are required to calculate f(5). It can be shown that after 4 operations, S can contain 2, 3, or 4. The following shows the operations required to make S={4}.
In the second test case, you are required to calculate f(7). It can be shown that after 6 operations, S can contain 2, 4, 6, or 7." "2200  x1832"
    
1998D "Determine Winning Islands in Race" "data structures, dp, graphs, greedy, shortest paths" "Two of Farmer John\'s cows, Bessie and Elsie, are planning to race on n islands. There are n\xe2\x88\x921 main bridges, connecting island i to island i+1 for all 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921. Additionally, there are m alternative bridges. Elsie can use both main and alternative bridges, while Bessie can only use main bridges. All bridges are one way and can only be used to travel from an island with a lower index to an island with a higher index.
Initially, Elsie starts on island 1, and Bessie starts on island s. The cows alternate turns, with Bessie making the first turn. Suppose the cow is on island i. During a cow\'s turn, if there are any bridges connecting island i to island j, then the cow can move to island j. Then, island i collapses, and all bridges connecting to island i also collapse. Also, note the following:
The race ends once either cow reaches island n. It can be shown that regardless of the cows\' strategies, at least one cow reaches island n. Bessie wins if and only if she reaches island n first.
For each 1\xe2\x89\xa4s\xe2\x89\xa4n\xe2\x88\x921, determine whether Bessie wins if she starts the race on island s. Assume both cows follow optimal strategies to ensure their own respective victories.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x93 the number of test cases.
The first line of each test case contains n and m (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x93 the number of islands and the number of alternative bridges.
The next m lines of each test case contain u and v (1\xe2\x89\xa4u<v\xe2\x89\xa4n)ï¿½\xe2\x80\x93 the islands that the alternative bridge connects. It is guaranteed all alternative bridges are distinct, and they do not coincide with the main bridges.
It is guaranteed that neither the sum of n nor the sum of m over all test cases exceeds 2\xe2\x8b\x85105.
For each test case, output a binary string of length n\xe2\x88\x921 on a new line. The i\'th character is 1 if it is possible for Bessie to win if she starts on island i. Otherwise, it is 0.
In the first test case, there are no alternative bridges for Elsie to overtake Bessie and reach island n first, so Bessie will win on all islands because she always moves first.
In the second case, Bessie will lose if she starts on island 3 because:" "2100  x3308"
    
1998C "Perform Operations to Maximize Score" "binary search, brute force, constructive algorithms, greedy, implementation" "You are given an array a of length n and an integer k. You are also given a binary array b of length n. 
You can perform the following operation at most k times: 
Your score is defined to be nmaxi=1(ai+median(ci)), where ci denotes the array of length n\xe2\x88\x921 that you get by deleting ai from a. In other words, your score is the maximum value of ai+median(ci) over all i from 1 to n.
Find the maximum score that you can achieve if you perform the operations optimally.
For an arbitrary array p, median(p) is defined as the \xe2\x8c\x8a|p|+12\xe2\x8c\x8b-th smallest element of p. For example, median([3,2,1,3])=2 and median([6,2,4,5,1])=4.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case begins with two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4k\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the length of the a and the number of operations you can perform.
The following line contains n space separated integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 denoting the array a.
The following line contains n space separated integers b1,b2,\xe2\x80\xa6,bn (bi is 0 or 1)ï¿½\xe2\x80\x94 denoting the array b.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the maximum value of score you can get on a new line.
For the first test case, it is optimal to perform 5 operations on both elements so a=[8,8]. So, the maximum score we can achieve is max(8+median[8],8+median[8])=16, as c1=[a2]=[8]. It can be proven that you cannot get a better score.
For the second test case, you are not able to perform operations on any elements, so a remains [3,3,3]. So, the maximum score we can achieve is 3+median[3,3]=6, as c1=[a2,a3]=[3,3]. It can be proven that you cannot get a better score." "1900  x6113"
    
1998B "Minimize Equal Sum Subarrays" "constructive algorithms, math, number theory" "You are given a permutation\xe2\x88\x97 p of length n.
Find a permutation q of length n that minimizes the number of pairs (i,j) (1\xe2\x89\xa4i\xe2\x89\xa4j\xe2\x89\xa4n) such that pi+pi+1+\xe2\x80\xa6+pj=qi+qi+1+\xe2\x80\xa6+qj.
\xe2\x88\x97A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The following line contains n space-separated integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 denoting the permutation p of length n.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output one line containing any permutation of length n (the permutation q) such that q minimizes the number of pairs.
For the first test, there exists only one pair (i,j) (1\xe2\x89\xa4i\xe2\x89\xa4j\xe2\x89\xa4n) such that pi+pi+1+\xe2\x80\xa6+pj=qi+qi+1+\xe2\x80\xa6+qj, which is (1,2). It can be proven that no such q exists for which there are no pairs." "1000  x23688"
    
1998A "Find K Distinct Points with Fixed Center" "constructive algorithms, implementation, math" "You are given three integers xc, yc, and k (\xe2\x88\x92100\xe2\x89\xa4xc,yc\xe2\x89\xa4100, 1\xe2\x89\xa4k\xe2\x89\xa41000). 
You need to find k distinct points (x1,y1), (x2,y2), \xe2\x80\xa6, (xk,yk), having integer coordinates, on the 2D coordinate plane such that: 
It can be proven that at least one set of k distinct points always exists that satisfies these conditions.
\xe2\x88\x97The center of k points (x1,y1), (x2,y2), \xe2\x80\xa6, (xk,yk) is (x1+x2+\xe2\x80\xa6+xkk,y1+y2+\xe2\x80\xa6+ykk).
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
Each test case contains three integers xc, yc, and k (\xe2\x88\x92100\xe2\x89\xa4xc,yc\xe2\x89\xa4100, 1\xe2\x89\xa4k\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the coordinates of the center and the number of distinct points you must output.
It is guaranteed that the sum of k over all test cases does not exceed 1000.
For each test case, output k lines, the i-th line containing two space separated integers, xi and yi, (\xe2\x88\x92109\xe2\x89\xa4xi,yi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 denoting the position of the i-th point.
If there are multiple answers, print any of them. It can be shown that a solution always exists under the given constraints.
For the first test case, (101,101)=(10,10).
For the second test case, (\xe2\x88\x921+5\xe2\x88\x9243,\xe2\x88\x921\xe2\x88\x921+23)=(0,0)." "800  x23883"
    
1997F "Chips on a Line" "brute force, combinatorics, dp, greedy, math" "You have n chips, and you are going to place all of them in one of x points, numbered from 1 to x. There can be multiple chips in each point.
After placing the chips, you can perform the following four operations (in any order, any number of times):
Note that the coordinates of the chips you place during the operations cannot be less than 1, but can be greater than x.
Denote the cost of chip placement as the minimum number of chips which can be present on the line after you perform these operations, starting from the placement you\'ve chosen.
For example, the cost of placing two chips in points 3 and one chip in point 5 is 2, because you can reduce the number of chips to 2 as follows:
You are given three integers n, x and m. Calculate the number of placements of exactly n chips in points from 1 to x having cost equal to m, and print it modulo 998244353. Two placements are considered different if the number of chips in some point differs between these placements.
The only line contains three integers n, x and m (1\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x89\xa41000; 2\xe2\x89\xa4x\xe2\x89\xa410).
Print one integer \xe2\x80\x94 the number of placements with cost equal to m, taken modulo 998244353.
In the first example, there are five ways to place 2 chips in points from 1 to 3 so that the cost is 1:" "2700  x901"
    
1997E "Level Up" "binary search, brute force, data structures, divide and conquer, implementation" "Monocarp is playing a computer game. He starts the game being level 1. He is about to fight n monsters, in order from 1 to n. The level of the i-th monster is ai.
For each monster in the given order, Monocarp\'s encounter goes as follows:
After every k-th fight with a monster (fleeing monsters do not count), Monocarp\'s level increases by 1. So, his level becomes 2 after k monsters he fights, 3 after 2k monsters, 4 after 3k monsters, and so on.
You need to process q queries of the following form:
The first line contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of monsters and the number of queries.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the levels of the monsters.
In the j-th of the following q lines, two integers i and x (1\xe2\x89\xa4i,x\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the index of the monster and the number of fights required for a level up in the j-th query.
For each query, output ""YES"", if Monocarp will fight the i-th monster in this query, and ""NO"", if the i-th monster flees." "2200  x3122"
    
1997D "Maximize the Root" "binary search, dfs and similar, dp, greedy, trees" "You are given a rooted tree, consisting of n vertices. The vertices in the tree are numbered from 1 to n, and the root is the vertex 1. The value ai is written at the i-th vertex.
You can perform the following operation any number of times (possibly zero): choose a vertex v which has at least one child; increase av by 1; and decrease au by 1 for all vertices u that are in the subtree of v (except v itself). However, after each operation, the values on all vertices should be non-negative.
Your task is to calculate the maximum possible value written at the root using the aforementioned operation.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of vertices in the tree.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial values written at vertices.
The third line contains n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n), where pi is the parent of the i-th vertex in the tree. Vertex 1 is the root.
Additional constraint on the input: the sum of n over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the maximum possible value written at the root using the aforementioned operation.
In the first test case, the following sequence of operations is possible:" "1500  x12472"
    
1997C "Even Positions" "constructive algorithms, data structures, greedy" "Monocarp had a regular bracket sequence s of length n (n is even). He even came up with his own way to calculate its cost.
He knows that in a regular bracket sequence (RBS), each opening bracket is paired up with the corresponding closing bracket. So he decided to calculate the cost of RBS as the sum of distances between pairs of corresponding bracket pairs.
For example, let\'s look at RBS (())(). It has three pairs of brackets: 
Unfortunately, due to data corruption, Monocarp lost all characters on odd positions s1,s3,\xe2\x80\xa6,sn\xe2\x88\x921. Only characters on even positions (s2,s4,\xe2\x80\xa6,sn) remain. For example, (())() turned to _(_)_).
Monocarp wants to restore his RBS by placing brackets on the odd positions. But since the restored RBS may not be unique, he wants to choose one with minimum cost. It\'s too hard to do for Monocarp alone, so can you help him?
Reminder: A regular bracket sequence is a string consisting of only brackets, such that this sequence, when inserted 1-s and +-s, gives a valid mathematical expression. For example, (), (()) or (()())() are RBS, while ), ()( or ())(() are not.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of test cases. Next t cases follow.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; n is even)ï¿½\xe2\x80\x94 the length of string s.
The second line of each test case contains a string s of length n, where all characters on the odd positions are \'_\' and all characters on the even positions are either \'(\' or \')\'.
Additional constraints: 
For each test case, print one integerï¿½\xe2\x80\x94 the minimum cost of the regular bracket sequence that can be obtained from s by replacing \'_\'-s with brackets.
In the first test case, it\'s optimal to make s equal to (())(). The cost of s will be equal to 3+1+1=5.
In the second test case, the only option is to make s equal to () with cost 1.
In the third test case, the only possible RBS is ()()()() with cost 1+1+1+1=4.
In the fourth test case, it\'s optimal to make s equal to (())(()) with cost 3+1+3+1=8." "1100  x21961"
    
1997B "Make Three Regions" "constructive algorithms, two pointers" "There is a grid, consisting of 2 rows and n columns. Each cell of the grid is either free or blocked.
A free cell y is reachable from a free cell x if at least one of these conditions holds: 
A connected region is a set of free cells of the grid such that all cells in it are reachable from one another, but adding any other free cell to the set violates this rule.
For example, consider the following layout, where white cells are free, and dark grey cells are blocked:
There are 3 regions in it, denoted with red, green and blue color respectively:
The given grid contains at most 1 connected region. Your task is to calculate the number of free cells meeting the following constraint:
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of columns.
The i-th of the next two lines contains a description of the i-th row of the gridï¿½\xe2\x80\x94 the string si, consisting of n characters. Each character is either . (denoting a free cell) or x (denoting a blocked cell). 
Additional constraint on the input: 
For each test case, print a single integerï¿½\xe2\x80\x94 the number of cells such that the number of connected regions becomes 3 if this cell is blocked.
In the first test case, if the cell (1,3) is blocked, the number of connected regions becomes 3 (as shown in the picture from the statement)." "1100  x20599"
    
1997A "Strong Password" "brute force, implementation, strings" "Monocarp\'s current password on Codeforces is a string s, consisting of lowercase Latin letters. Monocarp thinks that his current password is too weak, so he wants to insert exactly one lowercase Latin letter into the password to make it stronger. Monocarp can choose any letter and insert it anywhere, even before the first character or after the last character.
Monocarp thinks that the password\'s strength is proportional to the time it takes him to type the password. The time it takes to type the password is calculated as follows:
For example, the time it takes to type the password abacaba is 14; the time it takes to type the password a is 2; the time it takes to type the password aaabacc is 11.
You have to help Monocarp \xe2\x80\x94 insert a lowercase Latin letter into his password so that the resulting password takes the maximum possible amount of time to type.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
Each test case consists of one line containing the string s (1\xe2\x89\xa4|s|\xe2\x89\xa410), consisting of lowercase Latin letters.
For each test case, print one line containing the new password \xe2\x80\x94 a string which can be obtained from s by inserting one lowercase Latin letter. The string you print should have the maximum possible required time to type it. If there are multiple answers, print any of them." "800  x29160"
    
1996G Penacony "brute force, data structures, graphs, greedy, hashing" "On Penacony, The Land of the Dreams, there exists n houses and n roads. There exists a road between house i and i+1 for all 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921 and a road between house n and house 1. All roads are bidirectional. However, due to the crisis on Penacony, the overseeing family has gone into debt and may not be able to maintain all roads.
There are m pairs of friendships between the residents of Penacony. If the resident living in house a is friends with the resident living in house b, there must be a path between houses a and b through maintained roads. 
What is the minimum number of roads that must be maintained?
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x93 the number of test cases.
The first line of each test case contains two integers n and m (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x93 the number of houses and the number of friendships.
The next m lines contain two integers a and b (1\xe2\x89\xa4a<b\xe2\x89\xa4n) \xe2\x80\x93 the resident in house a is friends with the resident in house b. It is guaranteed all (a,b) are distinct.
It is guaranteed the sum of n and m over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output an integer, the minimum number of roads that must be maintained.
For the first test case, the following roads must be maintained:" "2200  x1764"
    
1996F Bomb "binary search, greedy, math" "Sparkle gives you two arrays a and b of length n. Initially, your score is 0. In one operation, you can choose an integer i and add ai to your score. Then, you must set ai = max(0,ai\xe2\x88\x92bi).
You only have time to perform k operations before Sparkle sets off a nuclear bomb! What is the maximum score you can acquire after k operations?
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
The first line of each test case contains n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4k\xe2\x89\xa4109) \xe2\x80\x94 the length of the arrays and the number of operations you can perform.
The following line contains n integers a1,a2,...an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
The following line contains n integers b1,b2,...bn (1\xe2\x89\xa4bi\xe2\x89\xa4109).
It is guaranteed that the sum of n for all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output an integer, the maximum score you can acquire after k operations." "1900  x4756"
    
1996E Decode "combinatorics, data structures, implementation, math" "In a desperate attempt to obtain your waifu favorite character, you have hacked into the source code of the game. After days of struggling, you finally find the binary string that encodes the gacha system of the game. In order to decode it, you must first solve the following problem. 
You are given a binary string s of length n. For each pair of integers (l,r) (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n), count the number of pairs (x,y) (l\xe2\x89\xa4x\xe2\x89\xa4y\xe2\x89\xa4r) such that the amount of 0 equals the amount of 1 in the substring sxsx+1...sy. 
Output the sum of counts over all possible (l,r) modulo 109+7.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
Each test case contains a binary string s (1\xe2\x89\xa4|s|\xe2\x89\xa42\xe2\x8b\x85105). It is guaranteed s only contains characters 0 and 1.
It is guaranteed the sum of |s| over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output an integer, the answer modulo 109+7." "1600  x9775"
    
1996D Fun "binary search, brute force, combinatorics, math, number theory" "Given two integers n and x, find the number of triplets (a,b,c) of positive integers such that ab+ac+bc\xe2\x89\xa4n and a+b+c\xe2\x89\xa4x. 
Note that order matters (e.g. (1,1,2) and (1,2,1) are treated as different) and a, b, c must be strictly greater than 0.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
Each test case contains two integers n and x (1\xe2\x89\xa4n,x\xe2\x89\xa4106).
It is guaranteed that the sum of n over all test cases does not exceed 106 and that the sum of x over all test cases does not exceed 106.
Output a single integer \xe2\x80\x94 the number of triplets (a,b,c) of positive integers such that ab+ac+bc\xe2\x89\xa4n and a+b+c\xe2\x89\xa4x.
In the first test case, the triplets are (1,1,1), (1,1,2), (1,2,1), and (2,1,1).
In the second test case, the triplets are (1,1,1), (1,1,2), (1,1,3), (1,2,1), (1,2,2), (1,3,1), (2,1,1), (2,1,2), (2,2,1), and (3,1,1)." "1500  x15930"
    
1996C Sort "dp, greedy, sortings, strings" "You are given two strings a and b of length n. Then, you are (forced against your will) to answer q queries.
For each query, you are given a range bounded by l and r. In one operation, you can choose an integer i (l\xe2\x89\xa4i\xe2\x89\xa4r) and set ai=x where x is any character you desire. Output the minimum number of operations you must perform such that sorted(a[l..r])=sorted(b[l..r]). The operations you perform on one query does not affect other queries.
For an arbitrary string c, sorted(c[l..r]) denotes the substring consisting of characters cl,cl+1,...,cr sorted in lexicographical order.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x93 the number of test cases.
The first line of each test case contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x93 the length of both strings and the number of queries.
The following line contains a of length n. It is guaranteed a only contains lowercase latin letters.
The following line contains b of length n. It is guaranteed b only contains lowercase latin letters.
The following q lines contain two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n) \xe2\x80\x93 the range of the query.
It is guaranteed the sum of n and q over all test cases does not exceed 2\xe2\x8b\x85105.
For each query, output an integer, the minimum number of operations you need to perform in a new line.
For the first query, sorted(a[1..5])= abcde and sorted(b[1..5])= abcde, so no operations are necessary.
For the second query, you need to set a1= e. Then, sorted(a[1..4])=sorted(b[1..4])= bcde." "1200  x22861"
    
1996B Scale "greedy, implementation" "Tina has a square grid with n rows and n columns. Each cell in the grid is either 0 or 1. 
Tina wants to reduce the grid by a factor of k (k is a divisor of n). To do this, Tina splits the grid into k\xc3\x97k nonoverlapping blocks of cells such that every cell belongs to exactly one block.
Tina then replaces each block of cells with a single cell equal to the value of the cells in the block. It is guaranteed that every cell in the same block has the same value. 
For example, the following demonstration shows a grid being reduced by factor of 3.
Help Tina reduce the grid by a factor of k.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x93 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa41000, 1\xe2\x89\xa4k\xe2\x89\xa4n, k is a divisor of n) \xe2\x80\x94 the number of rows and columns of the grid, and the factor that Tina wants to reduce the grid by. 
Each of the following n lines contain n characters describing the cells of the grid. Each character is either 0 or 1. It is guaranteed every k by k block has the same value.
It is guaranteed the sum of n over all test cases does not exceed 1000.
For each test case, output the grid reduced by a factor of k on a new line." "800  x32505"
    
1996A Legs "binary search, math, ternary search" "It\'s another beautiful day on Farmer John\'s farm.
After Farmer John arrived at his farm, he counted n legs. It is known only chickens and cows live on the farm, and a chicken has 2 legs while a cow has 4. 
What is the minimum number of animals Farmer John can have on his farm assuming he counted the legs of all animals? 
The first line contains single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
Each test case contains an integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85103, n is even).
For each test case, output an integer, the minimum number of animals Farmer John can have on his farm." "800  x43083"
    
2.00E+05 "Let Me Teach You a Lesson (Hard Version)" "data structures, dp, matrices, two pointers" "This is the hard version of a problem. The only difference between an easy and a hard version is the constraints on t and n. You can make hacks only if both versions of the problem are solved.
Arthur is giving a lesson to his famous 2n knights. Like any other students, they\'re sitting at the desks in pairs, but out of habit in a circle. The knight 2i\xe2\x88\x921 is sitting at the desk with the knight 2i.
Each knight has intelligence, which can be measured by an integer. Let\'s denote the intelligence of the i-th knight as ai. Arthur wants the maximal difference in total intelligence over all pairs of desks to be as small as possible. More formally, he wants to minimize max1\xe2\x89\xa4i\xe2\x89\xa4n(a2i\xe2\x88\x921+a2i)\xe2\x88\x92min1\xe2\x89\xa4i\xe2\x89\xa4n(a2i\xe2\x88\x921+a2i).
However, the Code of Chivalry only allows swapping the opposite knights in the circle, i.e., Arthur can simultaneously perform ai:=ai+n, ai+n:=ai for any 1\xe2\x89\xa4i\xe2\x89\xa4n. Arthur can make any number of such swaps. What is the best result he can achieve?
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa410000)ï¿½\xe2\x80\x94 the number of test cases. It is followed by descriptions of the test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100000)ï¿½\xe2\x80\x94 the number of desks.
The second line consists of 2n integers a1,a2,\xe2\x80\xa6,a2n (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the intelligence values of the knights.
It is guaranteed that the sum of n over all test cases does not exceed 100000.
For each test case, output a single line containing one integerï¿½\xe2\x80\x94 the minimal difference Arthur can achieve.
In the first test case, Arthur can swap the second and the fourth knights. Then the total intelligence at both desks will be 10.
In the third test case, Arthur can make 0 operations, which will result in the total intelligence of 11 at each of the desks.
In the fourth test case, Arthur can swap knights with indices 2 and 5 and achieve the difference of 2. It can be proven that he cannot improve his result any further." "2900  x302"
    
2.00E+04 "Let Me Teach You a Lesson (Easy Version)" "2-sat, data structures, dp, matrices, two pointers" "This is the easy version of a problem. The only difference between an easy and a hard version is the constraints on t and n. You can make hacks only if both versions of the problem are solved.
Arthur is giving a lesson to his famous 2n knights. Like any other students, they\'re sitting at the desks in pairs, but out of habit in a circle. The knight 2i\xe2\x88\x921 is sitting at the desk with the knight 2i.
Each knight has intelligence, which can be measured by an integer. Let\'s denote the intelligence of the i-th knight as ai. Arthur wants the maximal difference in total intelligence over all pairs of desks to be as small as possible. More formally, he wants to minimize max1\xe2\x89\xa4i\xe2\x89\xa4n(a2i\xe2\x88\x921+a2i)\xe2\x88\x92min1\xe2\x89\xa4i\xe2\x89\xa4n(a2i\xe2\x88\x921+a2i).
However, the Code of Chivalry only allows swapping the opposite knights in the circle, i.e., Arthur can simultaneously perform ai:=ai+n, ai+n:=ai for any 1\xe2\x89\xa4i\xe2\x89\xa4n. Arthur can make any number of such swaps. What is the best result he can achieve?
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. It is followed by descriptions of the test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42000)ï¿½\xe2\x80\x94 the number of desks.
The second line consists of 2n integers a1,a2,\xe2\x80\xa6,a2n (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the intelligence values of the knights.
It is guaranteed that the sum of n over all test cases does not exceed 2000.
For each test case, output a single line containing one integerï¿½\xe2\x80\x94 the minimal difference Arthur can achieve.
In the first test case, Arthur can swap the second and the fourth knights. Then the total intelligence at both desks will be 10.
In the third test case, Arthur can make 0 operations, which will result in the total intelligence of 11 at each of the desks.
In the fourth test case, Arthur can swap knights with indices 2 and 5 and achieve the difference of 2. It can be proven that he cannot improve his result any further." "2700  x380"
    
1995D Cases "bitmasks, brute force, dp, strings" "You\'re a linguist studying a mysterious ancient language. You know that 
You have a single text written in this language. Unfortunately, as the language is really ancient, spaces between words are missing and all letters are uppercase. You wonder what is the minimum number of cases the language can have. Can you find this out?
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa410000)ï¿½\xe2\x80\x94 the number of test cases. It is followed by descriptions of the test cases.
The first line of each test case contains three integers n, c, k (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa4218, 1\xe2\x89\xa4c\xe2\x89\xa418)ï¿½\xe2\x80\x94 the length of the text, the number of letters in the language, and the maximum length of the word.
The second line contains a string of n charactersï¿½\xe2\x80\x94 the text itself. Each character is one of the first c uppercase letters of the Latin alphabet.
It is guaranteed that the sum of n over all test cases does not exceed 218 and the sum of 2c over all test cases does not exceed 218.
For each test case, output a single line consisting of a single integerï¿½\xe2\x80\x94 the minimum number of cases in the language.
In the first test case, there must be five cases in the language (for each of the letters \'A\', \'B\', \'C\', \'D\', and \'E\' there must be a case that has a corresponding ending).
In the fourth test case, one case with ending \'B\' is sufficient. " "2300  x2358"
    
1995C Squaring "brute force, constructive algorithms, greedy, implementation, math, number theory" "ikrpprpp found an array a consisting of integers. He likes justice, so he wants to make a fairï¿½\xe2\x80\x94 that is, make it non-decreasing. To do that, he can perform an act of justice on an index 1\xe2\x89\xa4i\xe2\x89\xa4n of the array, which will replace ai with a2i (the element at position i with its square). For example, if a=[2,4,3,3,5,3] and ikrpprpp chooses to perform an act of justice on i=4, a becomes [2,4,3,9,5,3].
What is the minimum number of acts of justice needed to make the array non-decreasing?
First line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. It is followed by the description of test cases.
For each test case, the first line contains an integer nï¿½\xe2\x80\x94 size of the array a. The second line contains n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106). 
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each testcase, print an integerï¿½\xe2\x80\x94 minimum number of acts of justice required to make the array a non-decreasing. If it is impossible to do that, print \xe2\x88\x921.
In the first test case, there\'s no need to perform acts of justice. The array is fair on its own!
In the third test case, it can be proven that the array cannot become non-decreasing.
In the fifth test case, ikrpprppp can perform an act of justice on index 3, then an act of justice on index 2, and finally yet another act of justice on index 3. After that, a will become [4,9,16]." "1800  x8556"
    
1995B2 "Bouquet (Hard Version)" "binary search, data structures, greedy, math, sortings, two pointers" "This is the hard version of the problem. The only difference is that in this version, instead of listing the number of petals for each flower, the number of petals and the quantity of flowers in the store is set for all types of flowers.
A girl is preparing for her birthday and wants to buy the most beautiful bouquet. There are a total of n different types of flowers in the store, each of which is characterized by the number of petals and the quantity of this type of flower. A flower with k petals costs k coins. The girl has decided that the difference in the number of petals between any two flowers she will use to decorate her cake should not exceed one. At the same time, the girl wants to assemble a bouquet with the maximum possible number of petals. Unfortunately, she only has m coins, and she cannot spend more. What is the maximum total number of petals she can assemble in the bouquet?
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa410000)ï¿½\xe2\x80\x94 the number of test cases. This is followed by descriptions of the test cases.
The first line of each test case contains two integers n, m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4m\xe2\x89\xa41018)ï¿½\xe2\x80\x94 the number of types of flowers in the store and the number of coins the girl possesses, respectively. The second line of each test case contains n different integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109), where ai is the number of petals of the i-th flower type in the store (for different indexes i\xe2\x89\xa0j, it must be ai\xe2\x89\xa0aj). The third line of each test case contains n integers c1,c2,\xe2\x80\xa6,cn (1\xe2\x89\xa4ci\xe2\x89\xa4109), where ci is the quantity of the i-th flower type in the store.
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print one integerï¿½\xe2\x80\x94 the maximum possible number of petals in a bouquet that a girl can collect, observing all the conditions listed above.
In the first test case, some valid bouquets are (1,1,2,2),(2,2,3),(1,1),(2,2). The maximum over all valid bouquets not greater than 10 is 7 for (2,2,3). In the second test case, you can assemble a valid bouquet with (206,206,207,207,207) with a sum of 1033, which is the maximum number of petals the girl can buy. In the third test case, you can assemble a valid bouquet with (5,5,5,4) with a sum of 19. It can be seen that no valid bouquet can have 20 petals." "1700  x8769"
    
1995B1 "Bouquet (Easy Version)" "binary search, brute force, greedy, sortings, two pointers" "This is the easy version of the problem. The only difference is that in this version, the flowers are specified by enumeration.
A girl is preparing for her birthday and wants to buy the most beautiful bouquet. There are a total of n flowers in the store, each of which is characterized by the number of petals, and a flower with k petals costs k coins. The girl has decided that the difference in the number of petals between any two flowers she will use in her bouquet should not exceed one. At the same time, the girl wants to assemble a bouquet with the maximum possible number of petals. Unfortunately, she only has m coins, and she cannot spend more. What is the maximum total number of petals she can assemble in the bouquet?
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa410000)ï¿½\xe2\x80\x94 the number of test cases. This is followed by descriptions of the test cases.
The first line of each test case contains two integers n, m (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4m\xe2\x89\xa41018)ï¿½\xe2\x80\x94 the number of flowers in the store and the number of coins the girl possesses, respectively. The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109), where ai is the number of petals of the i-th flower in the store.
The sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum possible number of petals in the bouquet that the girl can assemble while meeting all the conditions listed above.
In the first test case, you can assemble a bouquet with (1,1,2,2),(2,2,3),(1,1),(2,2). The maximum over all valid bouquets not greater than 10 is 7 for (2,2,3). In the third test case, you can assemble a bouquet with only one flower of any type, so the answer is 610. In the fourth test case, you can assemble a bouquet with (4,4,5), which gives you 13 petals, and it is the maximum amount of petals that the girl can buy." "1100  x17951"
    
1995A Diagonals "brute force, greedy, implementation, math" "Vitaly503 is given a checkered board with a side of n and k chips. He realized that all these k chips need to be placed on the cells of the board (no more than one chip can be placed on a single cell).
Let\'s denote the cell in the i-th row and j-th column as (i,j). A diagonal is the set of cells for which the value i+j is the same. For example, cells (3,1), (2,2), and (1,3) lie on the same diagonal, but (1,2) and (2,3) do not. A diagonal is called occupied if it contains at least one chip. 
Determine what is the minimum possible number of occupied diagonals among all placements of k chips.
Each test consists of several sets of input data. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of sets of input data. Then follow the descriptions of the sets of input data.
The only line of each set of input data contains two integers n, k (1\xe2\x89\xa4n\xe2\x89\xa4100,0\xe2\x89\xa4k\xe2\x89\xa4n2)ï¿½\xe2\x80\x94 the side of the checkered board and the number of available chips, respectively.
For each set of input data, output a single integerï¿½\xe2\x80\x94 the minimum number of occupied diagonals with at least one chip that he can get after placing all k chips.
In the first test case, there are no chips, so 0 diagonals will be occupied. In the second test case, both chips can be placed on diagonal (2,1),(1,2), so the answer is 1. In the third test case, 3 chips can\'t be placed on one diagonal, but placing them on (1,2),(2,1),(1,1) makes 2 diagonals occupied. In the 7th test case, chips will occupy all 5 diagonals in any valid placing." "800  x24195"
    
1994H Fortnite "combinatorics, constructive algorithms, games, greedy, hashing, interactive, math, number theory, strings" "This is an interactive problem!
Timofey is writing a competition called Capture the Flag (or CTF for short). He has one task left, which involves hacking a security system. The entire system is based on polynomial hashes\xe2\x88\x97.
Timofey can input a string consisting of lowercase Latin letters into the system, and the system will return its polynomial hash. To hack the system, Timofey needs to find the polynomial hash parameters (p and m) that the system uses.
Timofey doesn\'t have much time left, so he will only be able to make 3 queries. Help him solve the task.
\xe2\x88\x97 The polynomial hash of a string s, consisting of lowercase Latin letters of length n, based on p and modulo m is (ord(s1)\xe2\x8b\x85p0+ord(s2)\xe2\x8b\x85p1+ord(s3)\xe2\x8b\x85p2+\xe2\x80\xa6+ord(sn)\xe2\x8b\x85pn\xe2\x88\x921)modm. Where si denotes the i-th character of the string s, ord(chr) denotes the ordinal number of the character chr in the English alphabet, and xmodm is the remainder of x when divided by m.
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
It is guaranteed that the p and m used by the system satisfy the conditions: 26<p\xe2\x89\xa450 and p+1<m\xe2\x89\xa42\xe2\x8b\x85109.
To make a query to the system, output ? s, where s is a string of no more than 50 characters in length, the hash of which you want to know. In response to this query, you will receive the polynomial hash of the string s.
To output the answer, output ! p m, where p is the base of the hash, and m is the modulus. After that, immediately proceed to the next test case.
You have to make not more than 3 queries ?, otherwise you will get verdict Wrong Answer.
After outputting a query, do not forget to output a newline and flush the output buffer. Otherwise, you will receive the verdict Idleness limit exceeded. To flush the buffer, use:
Answer for the first query is (ord(a)\xe2\x8b\x85310+ord(a)\xe2\x8b\x85311)mod59=(1+1\xe2\x8b\x8531)mod59=32.
Answer for the second query is (ord(y)\xe2\x8b\x85310+ord(b)\xe2\x8b\x85311)mod59=(25+2\xe2\x8b\x8531)mod59=28." "3500  x705"
    
1994G Minecraft "bitmasks, brute force, dp, graphs, math" "After winning another Bed Wars game, Masha and Olya wanted to relax and decided to play a new game. Masha gives Olya an array a of length n and a number s. Now Olya\'s task is to find a non-negative number x such that n\xe2\x88\x91i=1ai\xe2\x8a\x95x=s. But she is very tired after a tight round, so please help her with this.
But this task seemed too simple to them, so they decided to make the numbers larger (up to 2k) and provide you with their binary representation.
Each test consists of several test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n,k,n\xe2\x8b\x85k\xe2\x89\xa42\xe2\x8b\x85106)ï¿½\xe2\x80\x94 the length of the array a and the length of the binary representation of all numbers.
The second line contains a string of length k, consisting of zeros and onesï¿½\xe2\x80\x94 the binary representation of the number s, starting from the most significant bits.
The next n lines also contain strings of length k, consisting of zeros and ones, the i-th of these strings contains the binary representation of the number ai, starting from the most significant bits.
It is guaranteed that the sum of the values n\xe2\x8b\x85k for all test cases does not exceed 2\xe2\x8b\x85106.
For each test case, output a string of length k on a separate line, consisting of zeros or onesï¿½\xe2\x80\x94 the binary representation of any suitable number x (x\xe2\x89\xa50), starting from the most significant bits, or \xe2\x88\x921 if such x does not exist.
In the first test case, s=11,a=[14,6,12,15], if x=14, then n\xe2\x88\x91i=1ai\xe2\x8a\x95x=(14\xe2\x8a\x9514)+(6\xe2\x8a\x9514)+(12\xe2\x8a\x9514)+(15\xe2\x8a\x9514)=0+8+2+1=11=s.
In the second test case, s=41,a=[191,158], if x=154, then n\xe2\x88\x91i=1ai\xe2\x8a\x95x=(191\xe2\x8a\x95154)+(158\xe2\x8a\x95154)=37+4=41=s." "2600  x1266"
    
1994F "Stardew Valley" "constructive algorithms, dfs and similar, graphs, trees" "Pelican Town represents n houses connected by m bidirectional roads. Some roads have NPCs standing on them. Farmer Buba needs to walk on each road with an NPC and talk to them.
Help the farmer find a route satisfying the following properties: 
It is guaranteed that you can reach any house from any other by walking on the roads with NPCs only.
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains two integers n and m (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105,1\xe2\x89\xa4m\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of houses and roads in Pelican Town respectively.
In each of the next m lines, three integers u, v, and c (1\xe2\x89\xa4u,v\xe2\x89\xa4n,c=0/1) are givenï¿½\xe2\x80\x94 the ends of the road and whether an NPC is on this road. If c=1, then the road has an NPC. If c=0, then the road has no NPC.
The graph may contain multiple edges and loops, and if there are multiple edges with NPCs standing on them, the route must follow each of these roads.
It is guaranteed that you can reach any house from any other by walking on the roads with NPCs only.
It is guaranteed that the sum of n and m for all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, if there is no solution, then output ""No"" (without quotes). 
Otherwise, output ""Yes"" (without quotes), and then output kï¿½\xe2\x80\x94 the number of roads in the route. In the next line, output k+1 numbersï¿½\xe2\x80\x94 the houses of the route in the order of traversal. Note that the first house should match the last one, as the route is cyclic.
If there are multiple answers, you can print any of them.
You can output each letter in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
Note that in the third test case, there are multiple edges (5,2). You must walk on two of them." "2500  x1205"
    
1994E "Wooden Game" "bitmasks, greedy, math, trees" "You are given a forest of kk rooted trees\xe2\x88\x97\xe2\x88\x97. Lumberjack Timofey wants to cut down the entire forest by applying the following operation: 
Timofey loves bitwise operations, so he wants the bitwise OR of the sizes of the subtrees he removed to be maximum. Help him and find the maximum result he can obtain.
\xe2\x88\x97\xe2\x88\x97 A tree is a connected graph without cycles, loops, or multiple edges. In a rooted tree, a selected vertex is called a root. A forest is a collection of one or more trees.
\xe2\x80\xa0\xe2\x80\xa0 The subtree of a vertex vv is the set of vertices for which vv lies on the shortest path from this vertex to the root, including vv itself.
Each test consists of multiple test cases. The first line contains an integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains a single integer kk (1\xe2\x89\xa4k\xe2\x89\xa41061\xe2\x89\xa4k\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the number of trees in the forest.
This is followed by a description of each of the kk trees:
The first line contains a single integer nn (1\xe2\x89\xa4n\xe2\x89\xa41061\xe2\x89\xa4n\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the size of the tree. The vertices of the tree are numbered with integers from 11 to nn. The root of the tree is vertex number 11.
The second line contains n\xe2\x88\x921n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6pnp2,p3,\xe2\x80\xa6pn (1\xe2\x89\xa4pi<i1\xe2\x89\xa4pi<i), where pipiï¿½\xe2\x80\x94 the parent of vertex ii.
It is guaranteed that the sum of kk and nn for all sets of input data does not exceed 106106.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum result that can be obtained.
In the second test case, the trees look like this:

The first operation removes the entire second tree.

The second operation removes vertex 44 from the first tree.

The third operation removes the first tree. The result is 6|1|3=76|1|3=7 (|| denotes bitwise OR).
In the third test case, the entire tree needs to be removed." "2000  x4500"
    
1994D "Funny Game" "constructive algorithms, dsu, graphs, greedy, math, number theory, trees" "Vanya has a graph with n vertices (numbered from 1 to n) and an array a of n integers; initially, there are no edges in the graph. Vanya got bored, and to have fun, he decided to perform n\xe2\x88\x921 operations.
Operation number x (operations are numbered in order starting from 1) is as follows:
Help Vanya get a connected\xe2\x88\x97 graph using the n\xe2\x88\x921 operations, or determine that it is impossible.
\xe2\x88\x97A graph is called connected if it is possible to reach any vertex from any other by moving along the edges.
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains the number n (1\xe2\x89\xa4n\xe2\x89\xa42000)ï¿½\xe2\x80\x94 the number of vertices in the graph.
The second line of each test case contains n numbers a1,a2,\xe2\x8b\xafan (1\xe2\x89\xa4ai\xe2\x89\xa4109).
It is guaranteed that the sum of n over all test cases does not exceed 2000.
For each test case, if there is no solution, then output ""No"" (without quotes). 
Otherwise, output ""Yes"" (without quotes), and then output n\xe2\x88\x921 lines, where in the i-th line, output the numbers u and v that need to be chosen for operation i.
You can output each letter in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
Let\'s consider the second test case. " "1900  x5751"
    
1994C "Hungry Games" "binary search, dp, two pointers" "Yaroslav is playing a computer game, and at one of the levels, he encountered n mushrooms arranged in a row. Each mushroom has its own level of toxicity; the i-th mushroom from the beginning has a toxicity level of ai. Yaroslav can choose two integers 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n, and then his character will take turns from left to right to eat mushrooms from this subsegment one by one, i.e., the mushrooms with numbers l,l+1,l+2,\xe2\x80\xa6,r.
The character has a toxicity level g, initially equal to 0. The computer game is defined by the number xï¿½\xe2\x80\x94 the maximum toxicity level at any given time. When eating a mushroom with toxicity level k, the following happens:
Yaroslav became interested in how many ways there are to choose the values of l and r such that the final value of g is not zero. Help Yaroslav find this number!
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains two integers n, x (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,1\xe2\x89\xa4x\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of mushrooms and the maximum toxicity level.
The second line of each test case contains n numbers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single numberï¿½\xe2\x80\x94 the number of subsegments such that the final value of g will not be zero.
In the first test case, the subsegments (1,1), (1,2), (1,4), (2,2), (2,3), (3,3), (3,4) and (4,4) are suitable.
In the second test case, non-zero g will remain only on the subsegments (1,1) and (2,2).
In the third test case, on the only possible subsegment, g will be zero." "1600  x10765"
    
1994B "Fun Game" "bitmasks, constructive algorithms, greedy, math" "Vova really loves the XOR operation (denoted as \xe2\x8a\x95). Recently, when he was going to sleep, he came up with a fun game.
At the beginning of the game, Vova chooses two binary sequences s and t of length n and gives them to Vanya. A binary sequence is a sequence consisting only of the numbers 0 and 1. Vanya can choose integers l,r such that 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n, and for all l\xe2\x89\xa4i\xe2\x89\xa4r simultaneously replace si with si\xe2\x8a\x95si\xe2\x88\x92l+1, where si is the i-th element of the sequence s.
In order for the game to be interesting, there must be a possibility to win. Vanya wins if, with an unlimited number of actions, he can obtain the sequence t from the sequence s. Determine if the game will be interesting for the sequences s and t.
Each test consists of multiple test cases. The first line contains an integer q (1\xe2\x89\xa4q\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the sequences s and t.
The second line of each test case contains a binary sequence s of length n.
The third line of each test case contains a binary sequence t of length n.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output ""Yes"" if the game will be interesting, otherwise output ""No"".
You can output each letter in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
In the first test case, Vanya will not be able to change the sequence s with the only possible action of choosing l=r=1.
In the second test case, the sequences s and t are already equal.
In the third test case, Vanya can act as follows:" "1100  x16523"
    
1994A "Diverse Game" "constructive algorithms, greedy, implementation" "Petr, watching Sergey\'s stream, came up with a matrix a, consisting of n rows and m columns (the number in the i-th row and j-th column is denoted as ai,j), which contains all integers from 1 to n\xe2\x8b\x85m. But he didn\'t like the arrangement of the numbers, and now he wants to come up with a new matrix b, consisting of n rows and m columns, which will also contain all integers from 1 to n\xe2\x8b\x85m, such that for any 1\xe2\x89\xa4i\xe2\x89\xa4n,1\xe2\x89\xa4j\xe2\x89\xa4m it holds that ai,j\xe2\x89\xa0bi,j.
You are given the matrix a, construct any matrix b that meets Petr\'s requirements, or determine that it is impossible.
Hurry up! Otherwise, he will donate all his money to the stream in search of an answer to his question.
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa410)ï¿½\xe2\x80\x94 the number of rows and columns of matrix a.
The next n lines contain m integers each, describing matrix a. The i-th of these lines contains the elements of matrix ai,1,ai,2,\xe2\x80\xa6,ai,m.
It is guaranteed that all numbers in matrix a are distinct and 1\xe2\x89\xa4ai,j\xe2\x89\xa4n\xe2\x8b\x85m.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 5\xe2\x8b\x85104.
For each test case, output n\xe2\x8b\x85m integersï¿½\xe2\x80\x94 any suitable matrix b, or \xe2\x88\x921 if such a matrix does not exist.
In the first test case, there is only one element in the matrix, so matrix b is the only matrix and it does not fit.
In the second test case a1,1=2\xe2\x89\xa01=b1,1, a2,1=1\xe2\x89\xa02=b2,1." "800  x20196"
    
1993F2 "Dyn-scripted Robot (Hard Version)" "chinese remainder theorem, math, number theory" "This is the hard version of the problem. The only difference is that in this version k\xe2\x89\xa41012k\xe2\x89\xa41012. You can make hacks only if both versions of the problem are solved.
Given a w\xc3\x97hw\xc3\x97h rectangle on the OxyOxy plane, with points (0,0)(0,0) at the bottom-left and (w,h)(w,h) at the top-right of the rectangle.
You also have a robot initially at point (0,0)(0,0) and a script ss of nn characters. Each character is either L, R, U, or D, which tells the robot to move left, right, up, or down respectively.
The robot can only move inside the rectangle; otherwise, it will change the script ss as follows:
Then, it will execute the changed script starting from the character which it couldn\'t execute.
The script ss will be executed for kk times continuously. All changes to the string ss will be retained even when it is repeated. During this process, how many times will the robot move to the point (0,0)(0,0) in total? Note that the initial position does NOT count.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains four integers nn, kk, ww, and hh (1\xe2\x89\xa4n,w,h\xe2\x89\xa41061\xe2\x89\xa4n,w,h\xe2\x89\xa4106; 1\xe2\x89\xa4k\xe2\x89\xa410121\xe2\x89\xa4k\xe2\x89\xa41012).
The second line contains a single string ss of size nn (si\xe2\x88\x88{L,R,U,D}si\xe2\x88\x88{L,R,U,D})ï¿½\xe2\x80\x94 the script to be executed.
It is guaranteed that the sum of nn over all test cases does not exceed 106106.
For each test case, print a single integerï¿½\xe2\x80\x94 the number of times the robot reaches (0,0)(0,0) when executing script ss for kk times continuously.
In the first test case, the robot only moves up and right for the first two executions. After that, it occupies the position (2,2)(2,2). For the next two executions, it moves down and left and finishes at (0,0)(0,0). So the answer is 11.
In the second test case, each time executing the script the robot visits the origin twice. And since k=2k=2, it visits the origin 2\xe2\x8b\x852=42\xe2\x8b\x852=4 times overall. 
In the third test case, the visualization is shown as below: " "2800  x413"
    
1993F1 "Dyn-scripted Robot (Easy Version)" "brute force, chinese remainder theorem, constructive algorithms, math, number theory" "This is the easy version of the problem. The only difference is that in this version k\xe2\x89\xa4n. You can make hacks only if both versions of the problem are solved.
Given a w\xc3\x97h rectangle on the Oxy plane, with points (0,0) at the bottom-left and (w,h) at the top-right of the rectangle.
You also have a robot initially at point (0,0) and a script s of n characters. Each character is either L, R, U, or D, which tells the robot to move left, right, up, or down respectively.
The robot can only move inside the rectangle; otherwise, it will change the script s as follows:
Then, it will execute the changed script starting from the character which it couldn\'t execute.
The script s will be executed for k times continuously. All changes to the string s will be retained even when it is repeated. During this process, how many times will the robot move to the point (0,0) in total? Note that the initial position does NOT count.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains four integers n, k, w, and h (1\xe2\x89\xa4n,w,h\xe2\x89\xa4106; 1\xe2\x89\xa4k\xe2\x89\xa4n).
The second line contains a single string s of size n (si\xe2\x88\x88{L,R,U,D})ï¿½\xe2\x80\x94 the script to be executed.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, print a single integerï¿½\xe2\x80\x94 the number of times the robot reaches (0,0) when executing script s for k times continuously.
In the first test case, the robot only moves up and right. In the end, it occupies the position (2,2) but never visits (0,0). So the answer is 0.
In the second test case, each time executing the script the robot visits the origin twice. And since k=2, it visits the origin 2\xe2\x8b\x852=4 times overall. 
In the third test case, the visualization is shown as below: " "2400  x994"
    
1993E "Xor-Grid Problem" "bitmasks, constructive algorithms, dp, implementation" "Given a matrix a of size n\xc3\x97m, each cell of which contains a non-negative integer. The integer lying at the intersection of the i-th row and the j-th column of the matrix is called ai,j.
Let\'s define f(i) and g(j) as the XOR of all integers in the i-th row and the j-th column, respectively. In one operation, you can either: 
In this example, as we apply an operation on column 2, all elements in this column are changed: 
You can apply the operations any number of times. Then, we calculate the beauty of the final matrix by summing the absolute differences between all pairs of its adjacent cells.
More formally, beauty(a)=\xe2\x88\x91|ax,y\xe2\x88\x92ar,c| for all cells (x,y) and (r,c) if they are adjacent. Two cells are considered adjacent if they share a side.
Find the minimum beauty among all obtainable matrices.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4250)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa415)ï¿½\xe2\x80\x94 the number of rows and columns of a, respectively.
The next n lines, each containing m integers ai,1,ai,2,\xe2\x80\xa6,ai,m (0\xe2\x89\xa4ai,j<220)ï¿½\xe2\x80\x94 description of the matrix a.
It is guaranteed that the sum of (n2+m2) over all test cases does not exceed 500.
For each test case, print a single integer bï¿½\xe2\x80\x94 the smallest possible beauty of the matrix.
Let\'s denote r(i) as the first type operation applied on the i-th row, and c(j) as the second type operation applied on the j-th column.
In the first test case, you can apply an operation c(1), which assigns a1,1:=1\xe2\x8a\x953=2. Then, we\'ll receive this matrix: 
In the second test case, you can apply an operation r(1), which assigns: 
The resulting matrix after performing the operation is: 
In the third test case, the best way to achieve minimum beauty is applying three operations: c(3), r(2), and c(2). The resulting matrix is: " "2700  x540"
    
1993D Med-imize "binary search, dp, greedy" "Given two positive integers n and k, and another array a of n integers.
In one operation, you can select any subarray of size k of a, then remove it from the array without changing the order of other elements. More formally, let (l,r) be an operation on subarray al,al+1,\xe2\x80\xa6,ar such that r\xe2\x88\x92l+1=k, then performing this operation means replacing a with [a1,\xe2\x80\xa6,al\xe2\x88\x921,ar+1,\xe2\x80\xa6,an].
For example, if a=[1,2,3,4,5] and we perform operation (3,5) on this array, it will become a=[1,2]. Moreover, operation (2,4) results in a=[1,5], and operation (1,3) results in a=[4,5]. 
You have to repeat the operation while the length of a is greater than k (which means |a|>k). What is the largest possible median\xe2\x80\xa0 of all remaining elements of the array a after the process?
\xe2\x80\xa0The median of an array of length n is the element whose index is \xe2\x8c\x8a(n+1)/2\xe2\x8c\x8b after we sort the elements in non-decreasing order. For example: median([2,1,5,4,3])=3, median([5])=5, and median([6,8,2,4])=4.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n,k\xe2\x89\xa45\xe2\x8b\x85105).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the array a.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the largest median possible after performing the operations.
In the first test case, you can select a subarray (l,r) which can be either (1,3) or (2,4). Thus, two obtainable final arrays are [3] and [2]. The former one has the larger median (3>2) so the answer is 3.
In the second test case, three obtainable final arrays are [6,4], [3,4], and [3,2]. Their medians are 4, 3, and 2 respectively. The answer is 4.
In the third test case, only one element is left in the final array and it can be any element of the initial array. The largest one among them is 9, so the answer is 9." "2200  x3736"
    
1993C "Light Switches" "implementation, math" "There is an apartment consisting of n rooms, each with its light initially turned off.
To control the lights in these rooms, the owner of the apartment decided to install chips in the rooms so that each room has exactly one chip, and the chips are installed at different times. Specifically, these times are represented by the array a1,a2,\xe2\x80\xa6,an, where ai is the time (in minutes) at which a chip is installed in the i-th room.
As soon as a chip is installed, it changes the room\'s light status every k minutesï¿½\xe2\x80\x94 it turns on the light for k minutes, then turns it off for the next k minutes, then turns it back on for the next k minutes, and so on. In other words, the light status is changed by the chip at minute ai, ai+k, ai+2k, ai+3k, \xe2\x80\xa6 for the i-th room.
What is the earliest moment when all rooms in the apartment have their lights turned on?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of rooms in the apartment and the period of the chips.
The second line contains n distinct integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the moments when the chips are installed.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the answer to the question (in minutes). If there is no such moment that the lights are turned on in all the rooms, print \xe2\x88\x921 instead.
In the first test case, all lights will be on by the minute 5 without any of them being turned off by the chips. The answer is 5.
In the second test case, due to k=3, the 1-st light will be on at minutes 2,3,4,8,9,10,14,\xe2\x80\xa6; meanwhile, the 4-th light will be on at minutes 5,6,7,11,12,13,17,\xe2\x80\xa6. These two sequences don\'t have any number in common, so they will never be on at the same time.
In the third test case, it can be seen that the 1-st and 2-nd lights will be turned off at minutes 6 and 7, but the chips will turn them back on at minutes 9 and 10. The 3-rd and 4-th lights will also be on at minute 10, so the answer is 10." "1400  x13601"
    
1993B "Parity and Sum" "constructive algorithms, greedy" "Given an array a of n positive integers.
In one operation, you can pick any pair of indexes (i,j) such that ai and aj have distinct parity, then replace the smaller one with the sum of them. More formally: 
Find the minimum number of operations needed to make all elements of the array have the same parity.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of array a.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of operations required.
In the first test case, all integers already have the same parity. Therefore, no operation is needed.
In the third test case, we can perform two operations (1,2) and (1,3). The array a transforms as follows: a=[2,3,4]\xe2\x9f\xb6[5,3,4]\xe2\x9f\xb6[5,3,9].
In the fourth test case, an example of an optimal sequence of operations is (1,2), (1,3), (1,4), and (1,4). The array a transforms as follows: a=[3,2,2,8]\xe2\x9f\xb6[3,5,2,8]\xe2\x9f\xb6[3,5,5,8]\xe2\x9f\xb6[11,5,5,8]\xe2\x9f\xb6[11,5,5,19]." "1100  x22707"
    
1993A "Question Marks" "greedy, implementation" "Tim is doing a test consisting of 4n questions; each question has 4 options: \'A\', \'B\', \'C\', and \'D\'. For each option, there are exactly n correct answers corresponding to that option \xe2\x80\x94 meaning there are n questions with the answer \'A\', n questions with the answer \'B\', n questions with the answer \'C\', and n questions with the answer \'D\'.
For each question, Tim wrote his answer on the answer sheet. If he could not figure out the answer, he would leave a question mark \'?\' for that question.
You are given his answer sheet of 4n characters. What is the maximum number of correct answers Tim can get?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa4100).
The second line of each test case contains a string s of 4n characters (si\xe2\x88\x88{A,B,C,D,?})ï¿½\xe2\x80\x94 Tim\'s answers for the questions.
For each test case, print a single integerï¿½\xe2\x80\x94 the maximum score that Tim can achieve.
In the first test case, there is exactly one question with each answer \'A\', \'B\', \'C\', and \'D\'; so it\'s possible that Tim gets all his answers correct.
In the second test case, there are only two correct answers \'A\' which makes him get exactly 2 points in any case.
In the third test case, Tim can get at most 2 correct answers with option \'A\' and 2 correct answers with option \'B\'. For example, he would get 4 points if the answers were \'AACCBBDD\'.
In the fourth test case, he refuses to answer any question at all, which makes him get 0 points." "800  x29360"
    
1992G Ultra-Meow "combinatorics, dp, math" "K1o0n gave you an array a of length n, consisting of numbers 1,2,\xe2\x80\xa6,n. Accept it? Of course! But what to do with it? Of course, calculate MEOW(a).
Let MEX(S,k) be the k-th positive (strictly greater than zero) integer in ascending order that is not present in the set S. Denote MEOW(a) as the sum of MEX(b,|b|+1), over all distinct subsets b of the array a.
Examples of MEX(S,k) values for sets: 
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
In a single line of each test case, an integer n (1\xe2\x89\xa4n\xe2\x89\xa45000) is entered, the size of the array of gifted numbers.
It is guaranteed that the sum of n2 over all test cases does not exceed 25\xe2\x8b\x85106.
For each test case, output a single numberï¿½\xe2\x80\x94 MEOW(a). Since it may be very large, output it modulo 109+7." "2000  x3131"
    
1992F "Valuable Cards" "brute force, dp, greedy, number theory, two pointers" "In his favorite cafe Kmes once again wanted to try the herring under a fur coat. Previously, it would not have been difficult for him to do this, but the cafe recently introduced a new purchasing policy.
Now, in order to make a purchase, Kmes needs to solve the following problem: n cards with prices for different positions are laid out in front of him, on the i-th card there is an integer ai, among these prices there is no whole positive integer x.
Kmes is asked to divide these cards into the minimum number of bad segments (so that each card belongs to exactly one segment). A segment is considered bad if it is impossible to select a subset of cards with a product equal to x. All segments, in which Kmes will divide the cards, must be bad.
Formally, the segment (l,r) is bad if there are no indices i1<i2<\xe2\x80\xa6<ik such that l\xe2\x89\xa4i1,ik\xe2\x89\xa4r, and ai1\xe2\x8b\x85ai2\xe2\x80\xa6\xe2\x8b\x85aik=x.
Help Kmes determine the minimum number of bad segments in order to enjoy his favorite dish.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103) \xe2\x80\x94 the number of test cases.
The first line of each set of input data gives you 2 integers n and x (1\xe2\x89\xa4n\xe2\x89\xa4105,2\xe2\x89\xa4x\xe2\x89\xa4105) \xe2\x80\x94 the number of cards and the integer, respectively.
The second line of each set of input data contains n integers ai (1\xe2\x89\xa4ai\xe2\x89\xa42\xe2\x8b\x85105,ai\xe2\x89\xa0x) \xe2\x80\x94 the prices on the cards.
It is guaranteed that the sum of n over all sets of test data does not exceed 105.
For each set of input data, output the minimum number of bad segments." "1900  x5756"
    
1992E "Novice's Mistake" "brute force, constructive algorithms, implementation, math, strings" "One of the first programming problems by K1o0n looked like this: ""Noobish_Monk has n (1\xe2\x89\xa4n\xe2\x89\xa4100) friends. Each of them gave him a (1\xe2\x89\xa4a\xe2\x89\xa410000) apples for his birthday. Delighted with such a gift, Noobish_Monk returned b (1\xe2\x89\xa4b\xe2\x89\xa4min(10000,a\xe2\x8b\x85n)) apples to his friends. How many apples are left with Noobish_Monk?""
K1o0n wrote a solution, but accidentally considered the value of n as a string, so the value of n\xe2\x8b\x85a\xe2\x88\x92b was calculated differently. Specifically: 
Learning about this, ErnKor became interested in how many pairs (a,b) exist for a given n, satisfying the constraints of the problem, on which K1o0n\'s solution gives the correct answer.
""The solution gives the correct answer"" means that it outputs a non-empty string, and this string, when converted to an integer, equals the correct answer, i.e., the value of n\xe2\x8b\x85a\xe2\x88\x92b.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) ï¿½\xe2\x80\x94 the number of test cases.
For each test case, a single line of input contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa4100).
It is guaranteed that in all test cases, n is distinct.
For each test case, output the answer in the following format:
In the first line, output the integer xï¿½\xe2\x80\x94 the number of bad tests for the given n.
In the next x lines, output two integers ai and biï¿½\xe2\x80\x94 such integers that K1o0n\'s solution on the test ""n ai bi"" gives the correct answer.
In the first example, a=20, b=18 are suitable, as ""2"" \xe2\x8b\x8520\xe2\x88\x9218= ""22222222222222222222""\xe2\x88\x9218=22=2\xe2\x8b\x8520\xe2\x88\x9218" "1700  x9141"
    
1992D "Test of Love" "dp, greedy, implementation" "ErnKor is ready to do anything for Julen, even to swim through crocodile-infested swamps. We decided to test this love. ErnKor will have to swim across a river with a width of 1 meter and a length of n meters.
The river is very cold. Therefore, in total (that is, throughout the entire swim from 0 to n+1) ErnKor can swim in the water for no more than k meters. For the sake of humanity, we have added not only crocodiles to the river, but also logs on which he can jump. Our test is as follows:
Initially, ErnKor is on the left bank and needs to reach the right bank. They are located at the 0 and n+1 meters respectively. The river can be represented as n segments, each with a length of 1 meter. Each segment contains either a log \'L\', a crocodile \'C\', or just water \'W\'. ErnKor can move as follows: 
Determine if ErnKor can reach the right bank.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three numbers n,m,k (0\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4m\xe2\x89\xa410)ï¿½\xe2\x80\x94 the length of the river, the distance ErnKor can jump, and the number of meters ErnKor can swim without freezing.
The second line of each test case contains a string a of length n. ai denotes the object located at the i-th meter. (ai\xe2\x88\x88{\'W\',\'C\',\'L\'})
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output ""YES"" if ErnKor can pass the test, and output ""NO"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
Let\'s consider examples: " "1200  x20397"
    
1992C "Gorilla and Permutation" "constructive algorithms, math" "Gorilla and Noobish_Monk found three numbers n, m, and k (m<k). They decided to construct a permutation\xe2\x80\xa0 of length n.
For the permutation, Noobish_Monk came up with the following function: g(i) is the sum of all the numbers in the permutation on a prefix of length i that are not greater than m. Similarly, Gorilla came up with the function f, where f(i) is the sum of all the numbers in the permutation on a prefix of length i that are not less than k. A prefix of length i is a subarray consisting of the first i elements of the original array.
For example, if n=5, m=2, k=5, and the permutation is [5,3,4,1,2], then:
Help them find a permutation for which the value of (\xe2\x88\x91ni=1f(i)\xe2\x88\x92\xe2\x88\x91ni=1g(i)) is maximized.
\xe2\x80\xa0A permutation of length n is an array consisting of n distinct integers from 1 to n in any order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (as 2 appears twice in the array) and [1,3,4] is also not a permutation (as n=3, but 4 appears in the array).
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x94 the number of test cases.
The only line of each case contains three integers n, m, k (2\xe2\x89\xa4n\xe2\x89\xa4105; 1\xe2\x89\xa4m<k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the size of the permutation to be constructed and two integers.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the permutation ï¿½\xe2\x80\x94 a set of numbers that satisfies the conditions of the problem. If there are multiple solutions, output any of them.
In the first example, (\xe2\x88\x91ni=1f(i)\xe2\x88\x92\xe2\x88\x91ni=1g(i))=5\xe2\x8b\x855\xe2\x88\x92(0\xe2\x8b\x853+1+3)=25\xe2\x88\x924=21" "900  x29066"
    
1992B "Angry Monk" "greedy, math, sortings" "To celebrate his recovery, k1o0n has baked an enormous n metres long potato casserole.
Turns out, Noobish_Monk just can\'t stand potatoes, so he decided to ruin k1o0n\'s meal. He has cut it into k pieces, of lengths a1,a2,\xe2\x80\xa6,ak meters.
k1o0n wasn\'t keen on that. Luckily, everything can be fixed. In order to do that, k1o0n can do one of the following operations: 
Help k1o0n to find the minimum number of operations he needs to do in order to merge the casserole into one piece with length n.
For example, if n=5, k=2 and a=[3,2], it is optimal to do the following:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). 
Description of each test case consists of two lines. The first line contains two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa4109, 2\xe2\x89\xa4k\xe2\x89\xa4105)ï¿½\xe2\x80\x94 length of casserole and the number of pieces.
The second line contains k integers a1,a2,\xe2\x80\xa6,ak (1\xe2\x89\xa4ai\xe2\x89\xa4n\xe2\x88\x921, \xe2\x88\x91ai=n)ï¿½\xe2\x80\x94 lengths of pieces of casserole, which Noobish_Monk has cut.
It is guaranteed that the sum of k over all t test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, output the minimum number of operations K1o0n needs to restore his pie after the terror of Noobish_Monk." "800  x34263"
    
1992A "Only Pluses" "brute force, constructive algorithms, greedy, math, sortings" "Kmes has written three integers a, b and c in order to remember that he has to give Noobish_Monk a\xc3\x97b\xc3\x97c bananas.
Noobish_Monk has found these integers and decided to do the following at most 5 times:
For example, if a=2, b=3 and c=4, then one can increase a three times by one and increase b two times. After that a=5, b=5, c=4. Then the total number of bananas will be 5\xc3\x975\xc3\x974=100.
What is the maximum value of a\xc3\x97b\xc3\x97c Noobish_Monk can achieve with these operations?
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first and only line of each test case contains three integers a, b and c (1\xe2\x89\xa4a,b,c\xe2\x89\xa410)ï¿½\xe2\x80\x94 Kmes\'s integers.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum amount of bananas Noobish_Monk can get." "800  x41239"
    
1991I "Grid Game" "constructive algorithms, games, graph matchings, greedy, interactive" "This is an interactive problem.
You are given a grid with n rows and m columns. You need to fill each cell with a unique integer from 1 to n\xe2\x8b\x85m.
After filling the grid, you will play a game on this grid against the interactor. Players take turns selecting one of the previously unselected cells from the grid, with the interactor going first.
On the first turn, the interactor can choose any cell from the grid. After that, any chosen cell must be orthogonally adjacent to at least one previously selected cell. Two cells are considered orthogonally adjacent if they share an edge. The game continues until all cells have been selected.
Your goal is to let the sum of numbers in the cells selected by you be strictly less than the sum of numbers in the cells selected by the interactor.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The only line of each test case contains two integers n and m (4\xe2\x89\xa4n,m\xe2\x89\xa410)ï¿½\xe2\x80\x94 the number of rows and columns in the grid.
First, output n lines, each containing m integers, representing the integers that you filled in the grid. Each integer from 1 to n\xe2\x8b\x85m should appear exactly once.
Then, the game begins. The interactor and you take turns outputting coordinates to select a cell for n\xc3\x97m turns, with the interactor starting first.
On each player\'s (either you or the interactor) turn, the player will output two integers i and j (1\xe2\x89\xa4i\xe2\x89\xa4n, 1\xe2\x89\xa4j\xe2\x89\xa4m), denoting that the player has selected the cell on the i-th row and j-th column. This cell should not have been selected in a previous round. Additionally, if it is not the first turn, the cell must be orthogonally adjacent to at least one previously selected cell.
If any of your outputs are invalid, the jury will output ""-1"" and you will receive a Wrong Answer verdict.
At the end of all n\xe2\x8b\x85m turns, if the sum of numbers in the cells selected by you is not strictly less than the sum of numbers in the cells selected by the interactor, the jury will output ""-1"" and you will receive a Wrong Answer verdict.
If your program has received a Wrong Answer verdict, it must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.
After outputting, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:
In this problem, hacks are disabled.
Note that this is an example game and does not necessarily represent the optimal strategy for both players.
First, we fill a 4\xc3\x974 grid with unique integers from 1 to 16 in the following way:
Next, the game begins.
In the end, the numbers we selected were [15,1,16,5,4,2,11,13], and the numbers selected by the interactor were [8,14,7,9,10,3,6,12]. The sum of the numbers we selected is 67, which is less than the sum of the numbers selected by the interactor 69. Therefore, we have won this game." "3500  x130"
    
1991H "Prime Split Game" "bitmasks, dp, fft, games, math, number theory" "Alice and Bob are playing a game with n piles of stones, where the i-th pile has ai stones. Players take turns making moves, with Alice going first.
On each move, the player does the following three-step process: 
The player who is unable to make a move loses.
Determine who will win if both players play optimally.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of piles of stones.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of stones in the piles.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output ""Alice"" (without quotes) if Alice wins and ""Bob"" (without quotes) otherwise.
You can output each letter in any case (upper or lower). For example, the strings ""alIcE"", ""Alice"", and ""alice"" will all be considered identical.
In the first test case, there are 2 piles of stones with 2 and 1 stones respectively. Since neither 1 nor 2 can be split into two prime numbers, Alice cannot make a move, so Bob wins.
In the second test case, there are 3 piles of stones with 3, 5, and 7 stones respectively. Alice can choose k=1, remove the pile of 7 stones, and then split the pile of 5 stones into two piles of prime numbers of stones, 2 and 3. Then, the piles consist of 3 piles of stones with 3, 2, and 3 stones respectively, leaving Bob with no valid moves, so Alice wins.
In the third test case, there are 4 piles of stones with 4, 6, 8, and 10 stones respectively. Alice can choose k=2, removing two piles of 8 and 10 stones. She splits the pile of 4 stones into two piles of prime numbers of stones, 2 and 2, and the pile of 6 stones into two piles of 3 and 3 stones. Then, Bob has no valid moves, so Alice wins.
In the fourth test case, there are 5 piles of stones, each containing 8 stones. It can be shown that if both players play optimally, Bob will win." "3300  x503"
    
1991G "Grid Reset" "constructive algorithms, greedy, implementation" "You are given a grid consisting of n rows and m columns, where each cell is initially white. Additionally, you are given an integer k, where 1\xe2\x89\xa4k\xe2\x89\xa4min(n,m).
You will process q operations of two types: 
After each operation, if any rows or columns become completely black, all cells in these rows and columns are simultaneously reset to white. Specifically, if all cells in the row and column a cell is contained in become black, all cells in both the row and column will be reset to white.
Choose the rectangles in a way that you can perform all given operations, or determine that it is impossible.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains four integers n, m, k, and q (1\xe2\x89\xa4n,m\xe2\x89\xa4100, 1\xe2\x89\xa4k\xe2\x89\xa4min(n,m), 1\xe2\x89\xa4q\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of rows and columns in the grid, the size of the operation rectangle, and the number of operations, respectively.
The second line of each test case contains a string s of length q, consisting only of characters H and Vï¿½\xe2\x80\x94 the sequence of operation types.
It is guaranteed that the sum of q over all test cases does not exceed 1000.
For each test case, output a single integer \xe2\x88\x921 if it is impossible to perform all the operations.
Otherwise, output q lines. Each line contains two integers i, j (1\xe2\x89\xa4i\xe2\x89\xa4n, 1\xe2\x89\xa4j\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the coordinates of the top-left cell of the operation rectangle.
If there are multiple solutions, output any of them.
The first operation is horizontal. The operation rectangle starts at (1,1) and is a 1\xc3\x973 rectangle. After the operation, cells (1,1), (1,2), and (1,3) become black.
The second operation is vertical. The operation rectangle starts at (2,1) and is a 3\xc3\x971 rectangle. After the operation, cells (2,1), (3,1), and (4,1) become black. At this point, the first column becomes completely black, so all cells in the first column are reset to white.
The third operation is vertical. The operation rectangle starts at (1,1) and is a 3\xc3\x971 rectangle. After the operation, cells (1,1), (2,1), and (3,1) become black.
The fourth operation is horizontal. The operation rectangle starts at (2,3) and is a 1\xc3\x973 rectangle. After the operation, cells (2,3), (2,4), and (2,5) become black.
The fifth operation is horizontal. The operation rectangle starts at (3,3) and is a 1\xc3\x973 rectangle. After the operation, cells (3,3), (3,4), and (3,5) become black.
The sixth operation is vertical. The operation rectangle starts at (2,2) and is a 3\xc3\x971 rectangle. After the operation, cells (2,2), (3,2), and (4,2) become black. At this point, two rows and one column become completely black, so all cells in these rows and the column are reset to white." "2700  x610"
    
1991F "Triangle Formation" "brute force, greedy, implementation, math, sortings" "You are given n sticks, numbered from 1 to n. The length of the i-th stick is ai.
You need to answer q queries. In each query, you are given two integers l and r (1\xe2\x89\xa4l<r\xe2\x89\xa4n, r\xe2\x88\x92l+1\xe2\x89\xa56). Determine whether it is possible to choose 6 distinct sticks from the sticks numbered l to r, to form 2 non-degenerate triangles\xe2\x88\x97.
\xe2\x88\x97A triangle with side lengths a, b, and c is called non-degenerate if: 
The first line contains two integers n and q (6\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of sticks and the number of queries respectively.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 ai denotes the length of the i-th stick.
Each of the following q lines contains two integers l and r (1\xe2\x89\xa4l<r\xe2\x89\xa4n, r\xe2\x88\x92l+1\xe2\x89\xa56)ï¿½\xe2\x80\x94 the parameters of each query.
For each query, output ""YES"" (without quotes) if it is possible to form 2 triangles, and ""NO"" (without quotes) otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first query, the lengths of the sticks are [5,2,2,10,4,10]. Two sets of sticks [2,4,5] and [2,10,10] can be selected to form 2 non-degenerate triangles.
In the second query, the lengths of the sticks are [2,2,10,4,10,6]. It can be shown that it is impossible to form 2 non-degenerate triangles.
In the third query, the lengths of the sticks are [2,2,10,4,10,6,1]. Two sets of sticks [1,2,2] and [4,10,10] can be selected to form 2 non-degenerate triangles.
In the fourth query, the lengths of the sticks are [4,10,6,1,5,3]. It can be shown that it is impossible to form 2 non-degenerate triangles.
In the fifth query, the lengths of the sticks are [10,4,10,6,1,5,3]. Two sets of sticks [1,10,10] and [3,4,5] can be selected to form 2 non-degenerate triangles." "2200  x2323"
    
1991E "Coloring Game" "constructive algorithms, dfs and similar, games, graphs, greedy, interactive" "This is an interactive problem.
Consider an undirected connected graph consisting of n vertices and m edges. Each vertex can be colored with one of three colors: 1, 2, or 3. Initially, all vertices are uncolored.
Alice and Bob are playing a game consisting of n rounds. In each round, the following two-step process happens: 
Alice wins if there exists an edge connecting two vertices of the same color. Otherwise, Bob wins.
You are given the graph. Your task is to decide which player you wish to play as and win the game.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains two integers n, m (1\xe2\x89\xa4n\xe2\x89\xa4104, n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa4min(n\xe2\x8b\x85(n\xe2\x88\x921)2,104))ï¿½\xe2\x80\x94 the number of vertices and the number of edges in the graph, respectively.
Each of the next m lines of each test case contains two integers ui, vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the edges of the graph. It is guaranteed that the graph is connected and there are no multiple edges or self-loops.
It is guaranteed that the sum of n and the sum of m over all test cases does not exceed 104.
For each test case, you need to output a single line containing either ""Alice"" or ""Bob"", representing the player you choose.
Then for each of the following n rounds, the following two-step process happens: 
If any of your outputs are invalid, the jury will output ""-1"" and you will receive a Wrong Answer verdict.
At the end of all n turns, if you have lost the game, the jury will output ""-1"" and you will receive a Wrong Answer verdict.
If your program has received a \xe2\x88\x921 instead of a valid value, it must terminate immediately. Otherwise, you may receive an arbitrary verdict because your solution might be reading from a closed stream.
Note that if you are playing as Alice, and there already exists an edge connected two vertices of the same color, the interactor will not terminate early and you will keep playing all n rounds.
After outputting, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:
In this problem, hacks are disabled.
Note that the sample test cases are example games and do not necessarily represent the optimal strategy for both players.
In the first test case, you choose to play as Alice.
Alice wins because the edge (3,1) connects two vertices of the same color.
In the second test case, you choose to play as Bob.
Bob wins because there are no edges with vertices of the same color." "1900  x4214"
    
1991D "Prime XOR Coloring" "bitmasks, constructive algorithms, graphs, greedy, math, number theory" "You are given an undirected graph with n vertices, numbered from 1 to n. There is an edge between vertices u and v if and only if u\xe2\x8a\x95v is a prime number, where \xe2\x8a\x95 denotes the bitwise XOR operator.
Color all vertices of the graph using the minimum number of colors, such that no two vertices directly connected by an edge have the same color.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of test cases follows.
The only line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of vertices in the graph.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output two lines.
The first line should contain a single integer k (1\xe2\x89\xa4k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the minimum number of colors required.
The second line should contain n integers c1,c2,\xe2\x80\xa6,cn (1\xe2\x89\xa4ci\xe2\x89\xa4k)ï¿½\xe2\x80\x94 the color of each vertex.
If there are multiple solutions, output any of them.
In the first test case, the minimum number of colors is 1, because there is only one vertex.
In the second test case, the minimum number of colors is 2, because there is an edge connecting 1 and 2 (1\xe2\x8a\x952=3, which is a prime number).
In the third test case, the minimum number of colors is still 2, because 2 and 3 can be colored the same since there is no edge between 2 and 3 (2\xe2\x8a\x953=1, which is not a prime number).
In the fourth test case, it can be shown that the minimum number of colors is 3.
In the fifth test case, it can be shown that the minimum number of colors is 3.
In the sixth test case, it can be shown that the minimum number of colors is 4." "1900  x6658"
    
1991C "Absolute Zero" "constructive algorithms, greedy, math" "You are given an array a of n integers.
In one operation, you will perform the following two-step move: 
For example, by choosing x=8, the array [5,7,10] will be changed into [|5\xe2\x88\x928|,|7\xe2\x88\x928|,|10\xe2\x88\x928|]=[3,1,2].
Construct a sequence of operations to make all elements of a equal to 0 in at most 40 operations or determine that it is impossible. You do not need to minimize the number of operations.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x88\x921 if it is impossible to make all array elements equal to 0 in at most 40 operations.
Otherwise, output two lines. The first line of output should contain a single integer k (0\xe2\x89\xa4k\xe2\x89\xa440)ï¿½\xe2\x80\x94 the number of operations. The second line of output should contain k integers x1,x2,\xe2\x80\xa6,xk (0\xe2\x89\xa4xi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the sequence of operations, denoting that on the i-th operation, you chose x=xi.
If there are multiple solutions, output any of them.
You do not need to minimize the number of operations.
In the first test case, we can perform only one operation by choosing x=5, changing the array from [5] to [0].
In the second test case, no operations are needed because all elements of the array are already 0.
In the third test case, we can choose x=6 to change the array from [4,6,8] to [2,0,2], then choose x=1 to change it to [1,1,1], and finally choose x=1 again to change the array into [0,0,0].
In the fourth test case, we can make all elements 0 by following the operation sequence (60,40,20,10,30,25,5).
In the fifth test case, it can be shown that it is impossible to make all elements 0 in at most 40 operations. Therefore, the output is \xe2\x88\x921." "1300  x14560"
    
1991B "AND Reconstruction" "bitmasks, constructive algorithms, greedy" "You are given an array b of n\xe2\x88\x921 integers.
An array a of n integers is called good if bi=ai&ai+1 for 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921, where & denotes the bitwise AND operator.
Construct a good array, or report that no good arrays exist.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n\xe2\x88\x921 integers b1,b2,\xe2\x80\xa6,bn\xe2\x88\x921 (0\xe2\x89\xa4bi<230)ï¿½\xe2\x80\x94 the elements of the array b.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integer \xe2\x88\x921 if no good arrays exist. 
Otherwise, output n space-separated integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai<230)ï¿½\xe2\x80\x94 the elements of a good array a.
If there are multiple solutions, you may output any of them.
In the first test case, b=[1]. A possible good array is a=[5,3], because a1&a2=5&3=1=b1.
In the second test case, b=[2,0]. A possible good array is a=[3,2,1], because a1&a2=3&2=2=b1 and a2&a3=2&1=0=b2.
In the third test case, b=[1,2,3]. It can be shown that no good arrays exist, so the output is \xe2\x88\x921.
In the fourth test case, b=[3,5,4,2]. A possible good array is a=[3,7,5,6,3]." "1100  x16335"
    
1991A "Maximize the Last Element" "greedy, implementation" "You are given an array a of n integers, where n is odd.
In one operation, you will remove two adjacent elements from the array a, and then concatenate the remaining parts of the array. For example, given the array [4,7,4,2,9], we can obtain the arrays [4,2,9] and [4,7,9] by the operations [4,7_,4,2,9]\xe2\x86\x92[4,2,9] and [4,7,4,2_,9]\xe2\x86\x92[4,7,9] respectively. However, we cannot obtain the array [7,2,9] as it requires deleting non-adjacent elements [4_,7,4_,2,9].
You will repeatedly perform this operation until exactly one element remains in a.
Find the maximum possible value of the remaining element in a.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa499; n is odd)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the elements of the array a.
Note that there is no bound on the sum of n over all test cases.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum possible value of the remaining element in a.
In the first test case, the array a is [6]. Since there is only one element, no operations are needed. The maximum possible value of the remaining element is 6.
In the second test case, the array a is [1,3,2]. We can remove the first two elements [1,3_,2]\xe2\x86\x92[2], or remove the last two elements [1,3,2_]\xe2\x86\x92[1]. Therefore, the maximum possible value of the remaining element is 2.
In the third test case, the array a is [4,7,4,2,9]. One way to maximize the remaining element is [4,7,4_,2,9]\xe2\x86\x92[4,2_,9]\xe2\x86\x92[9]. Therefore, the maximum possible value of the remaining element is 9.
In the fourth test case, the array a is [3,1,4,1,5,9,2]. It can be shown that the maximum possible value of the remaining element is 5." "800  x21804"
    
1990F "Polygonal Segments" "brute force, data structures, divide and conquer, dp, greedy, two pointers" "You are given an array a of size n.
A segment [l,r](1\xe2\x89\xa4l<r\xe2\x89\xa4n) is called a polygonal segment only if the following conditions hold:
Process q queries of two types:
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
For each test case: 
It is guaranteed that the sum of n over all test cases will not exceed 2\xe2\x8b\x85105, and the sum of q over all test cases will not exceed 105.
For each query, if there is no suitable segment, output \xe2\x88\x921 in a new line. Otherwise, output the length of the longest segment satisfying the condition above in a new line.
In the first query of the first test case, there is no polygonal segment under the given condition. For example, considering segment [1,3], you can not form a triangle with side lengths of a1=3, a2=1, and a3=2.
In the second query of the first test case, the longest polygonal segment is [1,4]. You can form a quadrilateral with side lengths of a1=3, a2=1, a3=2, and a4=2." "2800  x292"
    
1.99E+05 "Catch the Mole(Hard Version)" "binary search, data structures, dfs and similar, divide and conquer, interactive, trees" "This is the hard version of the problem. The only difference is the limit on the number of queries.
This is an interactive problem.
You are given a tree of n nodes with node 1 as its root node.
There is a hidden mole in one of the nodes. To find its position, you can pick an integer x (1\xe2\x89\xa4x\xe2\x89\xa4n) to make an inquiry to the jury. Next, the jury will return 1 when the mole is in subtree x. Otherwise, the judge will return 0. If the judge returns 0 and the mole is not in root node 1, the mole will move to the parent node of the node it is currently on.
Use at most 160 operations to find the current node where the mole is located.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains one integer n (2\xe2\x89\xa4n\xe2\x89\xa45000). 
The following n\xe2\x88\x921 lines describe the edges of the tree. Each line contains two space-separated integers ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n), indicating an edge between nodes ui and vi.
It is guaranteed that the input data represents a tree.
The interactor in this task is not adaptive. In other words, the node where the mole is located at first is fixed in every test case and does not change during the interaction.
To ask a query, you need to pick a vertex x (1\xe2\x89\xa4x\xe2\x89\xa4n) and print the line of the following form:
After that, you receive:
You can make at most 160 queries of this form for each test case.
Next, if your program has found the current node where the mole is located, print the line of the following form:
Note that this line is not considered a query and is not taken into account when counting the number of queries asked.
After this, proceed to the next test case.
If you make more than 160 queries during an interaction, your program must terminate immediately, and you will receive the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
After printing a query or the answer for a test case, do not forget to output the end of line and flush the output. Otherwise, you will get the verdict Idleness Limit Exceeded. To do this, use:
Hacks
To hack, follow the test format below.
The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains one integer n and x (2\xe2\x89\xa4n\xe2\x89\xa45000, 1\xe2\x89\xa4x\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the size of the tree and the initial position of the mole.
The following n\xe2\x88\x921 lines describe the edges of the tree. Each line contains two space-separated integers ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n), indicating an edge between nodes ui and vi.
The input data must represent a tree.
In the first test case, the mole is in node 2 initially.
For the query ""? 2"", the jury returns 1 because the mole is in subtree 2. After this query, the mole does not move.
The answer 2 is the current node where the mole is located, so the answer is considered correct.
In the second test case, the mole is in node 6 initially.
For the query ""? 2"", the jury returns 0 because the mole is not in subtree 2. After this query, the mole moves from node 6 to node 5.
For the query ""? 6"", the jury returns 0 because the mole is not in subtree 6. After this query, the mole moves from node 5 to node 4.
For the query ""? 4"", the jury returns 1 because the mole is in subtree 4. After this query, the mole does not move.
The answer 4 is the current node where the mole is located, so the answer is considered correct.
Please note that the example is only for understanding the statement, and the queries in the example do not guarantee to determine the unique position of the mole." "2600  x866"
    
1.99E+04 "Catch the Mole(Easy Version)" "binary search, data structures, dfs and similar, interactive, trees" "This is the easy version of the problem. The only difference is the limit on the number of queries.
This is an interactive problem.
You are given a tree of n nodes with node 1 as its root node.
There is a hidden mole in one of the nodes. To find its position, you can pick an integer x (1\xe2\x89\xa4x\xe2\x89\xa4n) to make an inquiry to the jury. Next, the jury will return 1 when the mole is in subtree x. Otherwise, the judge will return 0. If the judge returns 0 and the mole is not in root node 1, the mole will move to the parent node of the node it is currently on.
Use at most 300 operations to find the current node where the mole is located.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains one integer n (2\xe2\x89\xa4n\xe2\x89\xa45000). 
The following n\xe2\x88\x921 lines describe the edges of the tree. Each line contains two space-separated integers ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n), indicating an edge between nodes ui and vi.
It is guaranteed that the input data represents a tree.
The interactor in this task is not adaptive. In other words, the node where the mole is located at first is fixed in every test case and does not change during the interaction.
To ask a query, you need to pick a vertex x (1\xe2\x89\xa4x\xe2\x89\xa4n) and print the line of the following form:
After that, you receive:
You can make at most 300 queries of this form for each test case.
Next, if your program has found the current node where the mole is located, print the line of the following form:
Note that this line is not considered a query and is not taken into account when counting the number of queries asked.
After this, proceed to the next test case.
If you make more than 300 queries during an interaction, your program must terminate immediately, and you will receive the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
After printing a query or the answer for a test case, do not forget to output the end of line and flush the output. Otherwise, you will get the verdict Idleness Limit Exceeded. To do this, use:
Hacks
To hack, follow the test format below.
The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains two integers n and x (2\xe2\x89\xa4n\xe2\x89\xa45000, 1\xe2\x89\xa4x\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the size of the tree and the initial position of the mole.
The following n\xe2\x88\x921 lines describe the edges of the tree. Each line contains two space-separated integers ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n), indicating an edge between nodes ui and vi.
The input data must represent a tree.
In the first test case, the mole is in node 2 initially.
For the query ""? 2"", the jury returns 1 because the mole is in subtree 2. After this query, the mole does not move.
The answer 2 is the current node where the mole is located, so the answer is considered correct.
In the second test case, the mole is in node 6 initially.
For the query ""? 2"", the jury returns 0 because the mole is not in subtree 2. After this query, the mole moves from node 6 to node 5.
For the query ""? 6"", the jury returns 0 because the mole is not in subtree 6. After this query, the mole moves from node 5 to node 4.
For the query ""? 4"", the jury returns 1 because the mole is in subtree 4. After this query, the mole does not move.
The answer 4 is the current node where the mole is located, so the answer is considered correct.
Please note that the example is only for understanding the statement, and the queries in the example do not guarantee to determine the unique position of the mole." "2500  x925"
    
1990D "Grid Puzzle" "bitmasks, brute force, dp, greedy, implementation" "You are given an array a of size n.
There is an n\xc3\x97n grid. In the i-th row, the first ai cells are black and the other cells are white. In other words, note (i,j) as the cell in the i-th row and j-th column, cells (i,1),(i,2),\xe2\x80\xa6,(i,ai) are black, and cells (i,ai+1),\xe2\x80\xa6,(i,n) are white.
You can do the following operations any number of times in any order: 
Find the minimum number of operations to dye all cells white.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
For each test case: 
It\'s guaranteed that the sum of n over all test cases will not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of operations to dye all cells white.
In the first test case, you don\'t need to do any operation.
In the second test case, you can do:
It can be proven 3 is the minimum number of operations.
In the third test case, you can do:
It can be proven 2 is the minimum number of operations." "1800  x6300"
    
1990C "Mad MAD Sum" "brute force, greedy, math" "We define the MAD (Maximum Appearing Duplicate) in an array as the largest number that appears at least twice in the array. Specifically, if there is no number that appears at least twice, the MAD value is 0.
For example, MAD([1,2,1])=1, MAD([2,2,3,3])=3, MAD([1,2,3,4])=0.
You are given an array a of size n. Initially, a variable sum is set to 0.
The following process will be executed in a sequential loop until all numbers in a become 0:
Find the value of sum after the process.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases.
For each test case: 
It is guaranteed that the sum of n over all test cases will not exceed 2\xe2\x8b\x85105.
For each test case, output the value of sum in a new line.
In the first test case, a=[1] initially.
In the first loop: 
After the first loop, a=[0] and the process ends. The value of sum after the process is 1.
In the second test case, a=[2,2,3] initially.
After the first loop, a=[0,2,2] and sum=7.
After the second loop, a=[0,0,2] and sum=11.
After the third loop, a=[0,0,0] and sum=13. Then the process ends.
The value of sum after the process is 13." "1500  x11602"
    
1990B "Array Craft" "constructive algorithms, greedy" "For an array b of size m, we define:
You are given three integers n, x, and y (x>y). Construct an array a of size n satisfying:
If there are multiple arrays that meet the conditions, print any. It can be proven that such an array always exists under the given conditions.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
For each test case: 
It is guaranteed that the sum of n over all test cases will not exceed 105.
For each test case, output n space-separated integers a1,a2,\xe2\x80\xa6,an in a new line.
In the second test case, 
Thus, the array a=[1,\xe2\x88\x921,1,1] is considered correct." "1200  x16497"
    
1990A "Submission Bait" "brute force, games, greedy, sortings" "Alice and Bob are playing a game in an array a of size n.
They take turns to do operations, with Alice starting first. The player who can not operate will lose. At first, a variable mx is set to 0.
In one operation, a player can do:
Determine whether Alice has a winning strategy.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
For each test case: 
For each test case, if Alice has a winning strategy, output ""YES"". Otherwise, output ""NO"".
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, Alice can choose i=1 since a1=2\xe2\x89\xa5mx=0.
After Alice\'s operation, a=[0,1] and mx=2. Bob can not do any operation. Alice wins.
In the second test case, Alice doesn\'t have a winning strategy.
For example, if Alice chooses i=1, after Alice\'s operation: a=[0,1] and mx=1. Then, Bob can choose i=2 since a2=1\xe2\x89\xa5mx=1. After Bob\'s operation: a=[0,0] and mx=1. Alice can not do any operation. Bob wins." "900  x22663"
    
1989F "Simultaneous Coloring" "dfs and similar, divide and conquer, graphs" "You are given a matrix, consisting of n rows and m columns.
You can perform two types of actions on it: 
Note that you cannot choose which color to paint the row or column.
In one second, you can perform either one action or multiple actions at the same time. If you perform one action, it will be free. If you perform k>1 actions at the same time, it will cost k2 coins. When multiple actions are performed at the same time, for each cell affected by actions of both types, the color can be chosen independently.
You are asked to process q queries. Before each query, all cells become colorless. Initially, there are no restrictions on the color of any cells. In the i-th query, a restriction of the following form is added: 
Thus, after i queries, there are i restrictions on the required colors of the matrix cells. After each query, output the minimum cost of painting the matrix according to the restrictions.
The first line contains three integers n,m and q (1\xe2\x89\xa4n,m,q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the size of the matrix and the number of queries.
In the i-th of the next q lines, two integers xi,yi and a character ci (1\xe2\x89\xa4xi\xe2\x89\xa4n; 1\xe2\x89\xa4yi\xe2\x89\xa4m; ci\xe2\x88\x88 {\'R\', \'B\'}, where \'R\' means red, and \'B\' means blue)ï¿½\xe2\x80\x94 description of the i-th restriction. The cells in all queries are pairwise distinct.
Print q integersï¿½\xe2\x80\x94 after each query, output the minimum cost of painting the matrix according to the restrictions." "3000  x451"
    
1989E "Distance to Different" "combinatorics, dp, math" "Consider an array a of n integers, where every element is from 1 to k, and every integer from 1 to k appears at least once.
Let the array b be constructed as follows: for the i-th element of a, bi is the distance to the closest element in a which is not equal to ai. In other words, bi=minj\xe2\x88\x88[1,n],aj\xe2\x89\xa0ai|i\xe2\x88\x92j|.
For example, if a=[1,1,2,3,3,3,3,1], then b=[2,1,1,1,2,2,1,1].
Calculate the number of different arrays b you can obtain if you consider all possible arrays a, and print it modulo 998244353.
The only line of the input contains two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 2\xe2\x89\xa4k\xe2\x89\xa4min(n,10)).
Print one integer \xe2\x80\x94 the number of different arrays b you can obtain, taken modulo 998244353." "2300  x1987"
    
1989D "Smithing Skill" "brute force, data structures, dp, greedy, math, sortings, two pointers" "You are playing a famous computer game (that just works) where you have various skills you can level up. Today, you focused on the ""Smithing"" skill. Your tactic is obvious: forging weapons from ingots and then melting them back to return the materials partially. For simplicity, every time you create an item, you get 1 experience point, and every time you melt an item, you also get 1 experience point.
There are n classes of weapons you can forge and m types of metal ingots.
You can create one weapon of the i-th class, spending ai ingots of metal of the same type. Melting a weapon of the i-th class (which you crafted earlier) returns you bi ingots of the type of metal it was made of.
You have cj metal ingots of the j-th type, and you know that you can craft a weapon of any class from any metal type. Each combination of a weapon class and a metal type can be used any number of times.
What is the maximum total amount of experience you can earn by crafting and melting weapons?
The first line contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the number of weapon classes and metal types.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106), where ai is the number of ingots you need to forge one weapon of the i-th class.
The third line contains n integers b1,b2,\xe2\x80\xa6,bn (0\xe2\x89\xa4bi<ai), where bi is the number of ingots you return by melting one weapon of the i-th class you forged earlier.
The fourth line contains m integers c1,c2,\xe2\x80\xa6,cm (1\xe2\x89\xa4cj\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of ingots you have of the corresponding metal type.
Print one integerï¿½\xe2\x80\x94 the maximum total experience points you can gain by repeatedly forging and melting weapons.
In the first example, you can do the following: " "1900  x5963"
    
1989C "Two Movies" "greedy, math" "A movie company has released 2 movies. These 2 movies were watched by n people. For each person, we know their attitude towards the first movie (liked it, neutral, or disliked it) and towards the second movie.
If a person is asked to leave a review for the movie, then: 
Every person will review exactly one movie \xe2\x80\x94 and for every person, you can choose which movie they will review.
The company\'s rating is the minimum of the ratings of the two movies. Your task is to calculate the maximum possible rating of the company.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x921\xe2\x89\xa4ai\xe2\x89\xa41), where ai is equal to \xe2\x88\x921 if the first movie was disliked by the i-th viewer; equal to 1 if the first movie was liked; and 0 if the attitude is neutral.
The third line contains n integers b1,b2,\xe2\x80\xa6,bn (\xe2\x88\x921\xe2\x89\xa4bi\xe2\x89\xa41), where bi is equal to \xe2\x88\x921 if the second movie was disliked by the i-th viewer; equal to 1 if the second movie was liked; and 0 if the attitude is neutral.
Additional constraint on the input: the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the maximum possible rating of the company, if for each person, choose which movie to leave a review on." "1400  x18479"
    
1989B "Substring and Subsequence" "brute force, greedy, strings" "You are given two strings a and b, both consisting of lowercase Latin letters. 
A subsequence of a string is a string which can be obtained by removing several (possibly zero) characters from the original string. A substring of a string is a contiguous subsequence of that string.
For example, consider the string abac:
Your task is to calculate the minimum possible length of the string that contains a as a substring and b as a subsequence.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a string a (1\xe2\x89\xa4|a|\xe2\x89\xa4100), consisting of lowercase Latin letters.
The second line of each test case contains a string b (1\xe2\x89\xa4|b|\xe2\x89\xa4100), consisting of lowercase Latin letters.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum possible length of the string that contains a as a substring and b as a subsequence.
In the examples below, the characters that correspond to the subsequence equal to b are bolded.
In the first example, one of the possible answers is caba.
In the second example, one of the possible answers is ercf.
In the third example, one of the possible answers is mmm.
In the fourth example, one of the possible answers is contest.
In the fifth example, one of the possible answers is abcdefg." "1200  x20142"
    
1989A "Catch the Coin" implementation "Monocarp visited a retro arcade club with arcade cabinets. There got curious about the ""Catch the Coin"" cabinet.
The game is pretty simple. The screen represents a coordinate grid such that: 
At the beginning of the game, the character is located in the center, and n coins appear on the screenï¿½\xe2\x80\x94 the i-th coin is at coordinates (xi,yi). The coordinates of all coins are different and not equal to (0,0).
In one second, Monocarp can move the character in one of eight directions. If the character is at coordinates (x,y), then it can end up at any of the coordinates (x,y+1), (x+1,y+1), (x+1,y), (x+1,y\xe2\x88\x921), (x,y\xe2\x88\x921), (x\xe2\x88\x921,y\xe2\x88\x921), (x\xe2\x88\x921,y), (x\xe2\x88\x921,y+1).
If the character ends up at the coordinates with a coin, then Monocarp collects that coin.
After Monocarp makes a move, all coins fall down by 1, that is, they move from (x,y) to (x,y\xe2\x88\x921). You can assume that the game field is infinite in all directions.
Monocarp wants to collect at least one coin, but cannot decide which coin to go for. Help him determine, for each coin, whether he can collect it.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of coins.
In the i-th of the next n lines, two integers xi and yi (\xe2\x88\x9250\xe2\x89\xa4xi,yi\xe2\x89\xa450) are writtenï¿½\xe2\x80\x94 the coordinates of the i-th coin. The coordinates of all coins are different. No coin is located at (0,0).
For each coin, print ""YES"" if Monocarp can collect it. Otherwise, print ""NO"".
Pay attention to the second coin in the example. Monocarp can first move from (0,0) to (\xe2\x88\x921,\xe2\x88\x921). Then the coin falls 1 down and ends up at (\xe2\x88\x922,\xe2\x88\x922). Finally, Monocarp moves to (\xe2\x88\x922,\xe2\x88\x922) and collects the coin." "800  x26346"
    
1988F Heartbeat "combinatorics, dp, fft, math" "For an array u1,u2,\xe2\x80\xa6,un, define 
You are given three cost arrays: [a1,a2,\xe2\x80\xa6,an], [b1,b2,\xe2\x80\xa6,bn], and [c0,c1,\xe2\x80\xa6,cn\xe2\x88\x921].
Define the cost of an array that has x prefix maximums, y suffix maximums, and z ascents as ax\xe2\x8b\x85by\xe2\x8b\x85cz.
Let the sum of costs of all permutations of 1,2,\xe2\x80\xa6,n be f(n). Find f(1), f(2), ..., f(n) modulo 998244353.
The first line contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa4700).
The second line contains n integers a1,\xe2\x80\xa6,an (0\xe2\x89\xa4ai<998244353).
The third line contains n integers b1,\xe2\x80\xa6,bn (0\xe2\x89\xa4bi<998244353).
The fourth line contains n integers c0,\xe2\x80\xa6,cn\xe2\x88\x921 (0\xe2\x89\xa4ci<998244353).
Print n integers: the i-th one is f(i) modulo 998244353.
In the second example:
The sum of all permutations\' costs is 34, so f(3)=34." "3000  x208"
    
1988E "Range Minimum Sum" "binary search, brute force, data structures, divide and conquer, implementation" "For an array [a1,a2,\xe2\x80\xa6,an] of length n, define f(a) as the sum of the minimum element over all subsegments. That is, f(a)=n\xe2\x88\x91l=1n\xe2\x88\x91r=lminl\xe2\x89\xa4i\xe2\x89\xa4rai.
A permutation is a sequence of integers from 1 to n of length n containing each number exactly once. You are given a permutation [a1,a2,\xe2\x80\xa6,an]. For each i, solve the following problem independently:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). Description of the test cases follows.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105).
The second line of each test case contains n distinct integers a1,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, print one line containing n integers. The i-th integer should be the answer when erasing ai.
In the second test case, a=[3,1,2]." "2300  x1424"
    
1988D "The Omnipotent Monster Killer" "brute force, dfs and similar, dp, trees" "You, the monster killer, want to kill a group of monsters. The monsters are on a tree with n vertices. On vertex with number i (1\xe2\x89\xa4i\xe2\x89\xa4n), there is a monster with ai attack points. You want to battle with monsters for 10100 rounds. 
In each round, the following happens in order:
There is a restriction: in one round, you cannot kill two monsters that are directly connected by an edge.
If you choose what monsters to attack optimally, what is the smallest health decrement you can have after all rounds?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). Description of the test cases follows.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105).
The second line of each test case contains n integers a1,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41012).
The following n\xe2\x88\x921 lines each contain two integers x,y (1\xe2\x89\xa4x,y\xe2\x89\xa4n), denoting an edge on the tree connecting vertex x and y.
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, print one integer: the minimum possible health decrement.
In the first test case, an optimal sequence of operations would be: 
The total health decrement is 1012.
In the second test case, an optimal sequence of operations would be: 
The total health decrement is 193.
In the third test case, an optimal sequence of operations would be: 
The total health decrement is 57." "2000  x4926"
    
1988C "Increasing Sequence with Fixed OR" "bitmasks, constructive algorithms, greedy" "You are given a positive integer n. Find the longest sequence of positive integers a=[a1,a2,\xe2\x80\xa6,ak] that satisfies the following conditions, and print the sequence:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). Description of the test cases follows.
The only line of each test case contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa41018).
It\'s guaranteed that the sum of lengths of the longest valid sequences does not exceed 5\xe2\x8b\x85105.
For each testcase, print two lines. In the first line, print the length of your constructed sequence, k. In the second line, print k positive integers, denoting the sequence. If there are multiple longest sequences, you can print any of them." "1300  x16580"
    
1988B "Make Majority" "greedy, implementation" "You are given a sequence [a1,\xe2\x80\xa6,an] where each element ai is either 0 or 1. You can apply several (possibly zero) operations to the sequence. In each operation, you select two integers 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4|a| (where |a| is the current length of a) and replace [al,\xe2\x80\xa6,ar] with a single element x, where x is the majority of [al,\xe2\x80\xa6,ar].
Here, the majority of a sequence consisting of 0 and 1 is defined as follows: suppose there are c0 zeros and c1 ones in the sequence, respectively. 
For example, suppose a=[1,0,0,0,1,1]. If we select l=1,r=2, the resulting sequence will be [0,0,0,1,1]. If we select l=4,r=6, the resulting sequence will be [1,0,0,1]. 
Determine if you can make a=[1] with a finite number of operations.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa44\xe2\x8b\x85104). Description of the test cases follows.
The first line of each testcase contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each testcase contains a string consisting of 0 and 1, describing the sequence a.
It\'s guaranteed that the sum of n over all testcases does not exceed 2\xe2\x8b\x85105.
For each testcase, if it\'s possible to make a=[1], print YES. Otherwise, print NO. You can output the answer in any case (upper or lower). For example, the strings yEs, yes, Yes, and YES will be recognized as positive responses.
In the fourth testcase of the example, initially a=[1,0,0,0,0,0,0,0,1]. A valid sequence of operations is: " "900  x22747"
    
1988A "Split the Multiset" "brute force, greedy, implementation, math" "A multiset is a set of numbers in which there can be equal elements, and the order of the numbers does not matter. For example, {2,2,4} is a multiset.
You have a multiset S. Initially, the multiset contains only one positive integer n. That is, S={n}. Additionally, there is a given positive integer k.
In one operation, you can select any positive integer u in S and remove one copy of u from S. Then, insert no more than k positive integers into S so that the sum of all inserted integers is equal to u.
Find the minimum number of operations to make S contain n ones.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). Description of the test cases follows.
The only line of each testcase contains two integers n,k (1\xe2\x89\xa4n\xe2\x89\xa41000,2\xe2\x89\xa4k\xe2\x89\xa41000).
For each testcase, print one integer, which is the required answer.
For the first test case, initially S={1}, already satisfying the requirement. Therefore, we need zero operations.
For the second test case, initially S={5}. We can apply the following operations:
Using 4 operations in total, we achieve the goal.
For the third test case, initially S={6}. We can apply the following operations:
Using 3 operations in total, we achieve the goal.
For the fourth test case, initially S={16}. We can apply the following operations:
Using 5 operations in total, we achieve the goal." "900  x23220"
    
1987H "Fumo Temple" interactive "This is an interactive problem.
You are given two positive integers n and m (n\xe2\x89\xa4m).
The jury has hidden from you a rectangular matrix a with n rows and m columns, where ai,j\xe2\x88\x88{\xe2\x88\x921,0,1} for all 1\xe2\x89\xa4i\xe2\x89\xa4n and 1\xe2\x89\xa4j\xe2\x89\xa4m. The jury has also selected a cell (i0,j0). Your goal is to find (i0,j0).
In one query, you give a cell (i,j), then the jury will reply with an integer. 
Find (i0,j0) by making at most n+225 queries.
Note: the grader is not adaptive: a and (i0,j0) are fixed before any queries are made.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa4m\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the numbers of rows and the number of columns of the hidden matrix a respectively.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 25\xe2\x8b\x85106.
The interaction for each test case begins by reading the integers n and m.
To make a query, output ""? i j"" (1\xe2\x89\xa4i\xe2\x89\xa4n,1\xe2\x89\xa4j\xe2\x89\xa4m) without quotes. Afterwards, you should read one single integerï¿½\xe2\x80\x94 the answer to your query.
If you receive the integer \xe2\x88\x921 instead of an answer or a valid value of n or m, it means your program has made an invalid query, has exceeded the limit of queries, or has given an incorrect answer on the previous test case. Your program must terminate immediately to receive a Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
When you are ready to give the final answer, output ""! i j"" (1\xe2\x89\xa4i\xe2\x89\xa4n,1\xe2\x89\xa4j\xe2\x89\xa4m) without quotesï¿½\xe2\x80\x94 the indices of the hidden cell. After solving a test case, your program should move to the next one immediately. After solving all test cases, your program should be terminated immediately.
After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: 
Hacks
To hack, use the following format:
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa4m\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the sizes of the hidden matrix.
The second line of each test case contains two integers i0 and j0 (1\xe2\x89\xa4i0\xe2\x89\xa4n,1\xe2\x89\xa4j0\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the hidden cell.
Then n lines follow. The i-th of them contains the string si of length n, consisting only of the characters -, 0, and +. Here, aij=\xe2\x88\x921 if sij=\xe2\x88\x92, aij=0 if sij=0, and aij=1 if sij=+.
The sum of n\xe2\x8b\x85m over all test cases should not exceed 25\xe2\x8b\x85106.
As an example, the hack format for the example input is:
23414+0+0+00+0---11110
The hidden matrix in the first test case: 

The hidden matrix in the second test case: 

Note that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction." "3500  x102"
    
1987G2 "Spinning Round (Hard Version)" "divide and conquer, dp, trees" "This is the hard version of the problem. The only difference between the two versions are the allowed characters in s. You can make hacks only if both versions of the problem are solved.
You are given a permutation p of length n. You are also given a string s of length n, where each character is either L, R, or ?.
For each i from 1 to n: 
Initially, you have an undirected graph with n vertices (numbered from 1 to n) and no edges. Then, for each i from 1 to n, add one edge to the graph: 
Find the maximum possible diameter over all connected\xe2\x88\x97 graphs that you can form. Output \xe2\x88\x921 if it is not possible to form any connected graphs.
\xe2\x88\x97 Let d(s,t) denote the smallest number of edges on any path between s and t.
The diameter of the graph is defined as the maximum value of d(s,t) over all pairs of vertices s and t. 
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa44\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the permutation p. 
The second line of each test case contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the elements of p, which are guaranteed to form a permutation.
The third line of each test case contains a string s of length n. It is guaranteed that it consists only of the characters L, R, and ?.
It is guaranteed that the sum of n over all test cases does not exceed 4\xe2\x8b\x85105.
For each test case, output the maximum possible diameter over all connected graphs that you form, or \xe2\x88\x921 if it is not possible to form any connected graphs.
In the first test case, there are two connected graphs (the labels are indices): 
The graph on the left has a diameter of 2, while the graph on the right has a diameter of 3, so the answer is 3.
In the second test case, there are no connected graphs, so the answer is \xe2\x88\x921." "3500  x173"
    
1987G1 "Spinning Round (Easy Version)" "divide and conquer, dp, trees" "This is the easy version of the problem. The only difference between the two versions are the allowed characters in s. In the easy version, s only contains the character ?. You can make hacks only if both versions of the problem are solved.
You are given a permutation p of length n. You are also given a string s of length n, consisting only of the character ?.
For each i from 1 to n: 
Initially, you have an undirected graph with n vertices (numbered from 1 to n) and no edges. Then, for each i from 1 to n, add one edge to the graph: 
Find the maximum possible diameter\xe2\x88\x97 over all connected graphs that you can form. Output \xe2\x88\x921 if it is not possible to form any connected graphs.
\xe2\x88\x97 Let d(s,t) denote the smallest number of edges on any path between s and t.
The diameter of the graph is defined as the maximum value of d(s,t) over all pairs of vertices s and t. 
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa44\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the permutation p. 
The second line of each test case contains n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the elements of p, which are guaranteed to form a permutation.
The third line of each test case contains a string s of length n. It is guaranteed that it consists only of the character ?.
It is guaranteed that the sum of n over all test cases does not exceed 4\xe2\x8b\x85105.
For each test case, output the maximum possible diameter over all connected graphs that you form, or \xe2\x88\x921 if it is not possible to form any connected graphs.
In the first test case, here are some possible connected graphs that you can form (the labels are indices): 
In the second test case, the only connected graph has a diameter of 1." "2900  x275"
    
1987F2 "Interesting Problem (Hard Version)" dp "This is the hard version of the problem. The only difference between the two versions is the constraint on n. You can make hacks only if both versions of the problem are solved.
You are given an array of integers a of length n. 
In one operation, you will perform the following two-step process: 
Find the maximum number of times that you can perform the operation above.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4800)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 800.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum number of times that you can perform the operation.
In the first test case, one possible optimal sequence of operations is [1,5,3,2,4]\xe2\x86\x92[1,5,4]\xe2\x86\x92[4].
In the third test case, one possible optimal sequence of operations is [1,2,3]\xe2\x86\x92[1]." "2600  x1019"
    
1987F1 "Interesting Problem (Easy Version)" dp "This is the easy version of the problem. The only difference between the two versions is the constraint on n. You can make hacks only if both versions of the problem are solved.
You are given an array of integers a of length n. 
In one operation, you will perform the following two-step process: 
Find the maximum number of times that you can perform the operation above.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 100.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum number of times that you can perform the operation.
In the first test case, one possible optimal sequence of operations is [1,5,3,2,4]\xe2\x86\x92[1,5,4]\xe2\x86\x92[4].
In the third test case, one possible optimal sequence of operations is [1,2,3]\xe2\x86\x92[1]." "2500  x1120"
    
1987E "Wonderful Tree!" "brute force, data structures, dfs and similar, dsu, greedy, trees" "You are given a tree with nn vertices, rooted at vertex 11. The ii-th vertex has an integer aiai written on it.
Let LL be the set of all direct children\xe2\x88\x97\xe2\x88\x97 of vv. A tree is called wonderful, if for all vertices vv where LL is not empty, av\xe2\x89\xa4\xe2\x88\x91u\xe2\x88\x88Lau.av\xe2\x89\xa4\xe2\x88\x91u\xe2\x88\x88Lau. In one operation, you choose any vertex vv and increase avav by 11.
Find the minimum number of operations needed to make the given tree wonderful!
\xe2\x88\x97\xe2\x88\x97 Vertex uu is called a direct child of vertex vv if: 
Each test contains multiple test cases. The first line of input contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa450002\xe2\x89\xa4n\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of vertices in the tree.
The second line of each test case contains nn integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa41090\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the values initially written on the vertices.
The third line of each test case contains n\xe2\x88\x921n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6,pnp2,p3,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi<i1\xe2\x89\xa4pi<i), indicating that there is an edge from vertex pipi to vertex ii. It is guaranteed that the given edges form a tree.
It is guaranteed that the sum of nn over all test cases does not exceed 50005000.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of operations needed to make the tree wonderful.
The tree in the first test case: 
You can apply the operation once on vertex 55 and twice on vertex 22 to get a wonderful tree.
In the second test case, you can apply the operation twice on vertex 22 to get a wonderful tree.
In the third and fourth test cases, the tree is already wonderful, so you don\'t need to apply any operations." "2000  x3396"
    
1987D "World is Mine" "dp, games" "Alice and Bob are playing a game. Initially, there are n cakes, with the i-th cake having a tastiness value of ai.
Alice and Bob take turns eating them, with Alice starting first: 
The game ends when the current player can\'t eat a suitable cake. Let x be the number of cakes that Alice ate. Then, Alice wants to maximize x, while Bob wants to minimize x.
Find out how many cakes Alice will eat if both players play optimally.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of cakes.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the tastiness values of the cakes.
It is guaranteed that the sum of n over all test cases does not exceed 5000.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of cakes Alice will eat if both players play optimally.
In the first test case, one possible sequence of turns is: 
In the second test case, one possible sequence of turns is: " "1800  x7168"
    
1987C "Basil's Garden" "dp, greedy" "There are n flowers in a row, the i-th of them initially has a positive height of hi meters.
Every second, the wind will blow from the left, causing the height of some flowers to decrease.
Specifically, every second, for each i from 1 to n, in this order, the following happens: 
How many seconds will pass before hi=0 for all 1\xe2\x89\xa4i\xe2\x89\xa4n for the first time?
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of flowers.
The second line of each test case contains n integers h1,h2,\xe2\x80\xa6,hn (1\xe2\x89\xa4hi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the heights of the flowers.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of seconds that will pass before hi=0 for all 1\xe2\x89\xa4i\xe2\x89\xa4n. 
In the first test case, the flower heights change as follows: [1,1,2]\xe2\x86\x92[1,1,1]\xe2\x86\x92[1,1,0]\xe2\x86\x92[1,0,0]\xe2\x86\x92[0,0,0].
In the second test case, the flower heights change as follows: [3,1]\xe2\x86\x92[2,0]\xe2\x86\x92[1,0]\xe2\x86\x92[0,0]." "1200  x17360"
    
1987B K-Sort greedy "You are given an array of integers a of length n. 
You can apply the following operation any number of times (maybe, zero): 
Find the minimum number of coins needed to make a non-decreasing. That is, a1\xe2\x89\xa4a2\xe2\x89\xa4\xe2\x80\xa6\xe2\x89\xa4an.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of coins needed to make a non-decreasing.
In the first test case, a is already sorted, so you don\'t have to spend any coins.
In the second test case, the optimal sequence of operations is: " "1000  x20459"
    
1987A "Upload More RAM" "greedy, math" "Oh no, the ForceCodes servers are running out of memory! Luckily, you can help them out by uploading some of your RAM!
You want to upload n GBs of RAM. Every second, you will upload either 0 or 1 GB of RAM. However, there is a restriction on your network speed: in any k consecutive seconds, you can upload only at most 1 GB of RAM in total.
Find the minimum number of seconds needed to upload n GBs of RAM!
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first and only line of each test case contains two integers n and k (1\xe2\x89\xa4n,k\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of GBs that you want to upload and the length of the time window respectively.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of seconds needed to upload n GBs of RAM.
In the first test case, you can upload 1 GB of RAM per second, so to upload 5 GBs, you need 5 seconds.
In the second test case, you can upload 1 GB in the first second, 0 GBs in the second second, and 1 GB in the third second, which in total adds up to exactly 2 GBs of uploaded RAM.
In the third test case, you can upload 1 GB in the first second, 0 GBs in the second second, 0 GBs in the third second, and 1 GB in the fourth second, which in total adds up to exactly 2 GBs of uploaded RAM." "800  x25346"
    
1986G2 "Permutation Problem (Hard Version)" "brute force, data structures, hashing, math, number theory" "This is the hard version of the problem. The only difference is that in this version n\xe2\x89\xa45\xe2\x8b\x85105 and the sum of n for all sets of input data does not exceed 5\xe2\x8b\x85105.
You are given a permutation p of length n. Calculate the number of index pairs 1\xe2\x89\xa4i<j\xe2\x89\xa4n such that pi\xe2\x8b\x85pj is divisible by i\xe2\x8b\x85j without remainder.
A permutation is a sequence of n integers, in which each integer from 1 to n occurs exactly once. For example, [1], [3,5,2,1,4], [1,3,2] are permutations, while [2,3,2], [4,3,1], [0] are not.
Each test consists of several sets of input data. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of sets of input data. Then follows their description.
The first line of each set of input data contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the permutation p.
The second line of each set of input data contains n distinct integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the permutation p.
It is guaranteed that the sum of n for all sets of input data does not exceed 5\xe2\x8b\x85105.
For each set of input data, output the number of index pairs 1\xe2\x89\xa4i<j\xe2\x89\xa4n such that pi\xe2\x8b\x85pj is divisible by i\xe2\x8b\x85j without remainder.
In the first set of input data, there are no index pairs, as the size of the permutation is 1.
In the second set of input data, there is one index pair (1,2) and it is valid.
In the third set of input data, the index pair (1,2) is valid.
In the fourth set of input data, the index pairs (1,2), (1,5), and (2,5) are valid." "2500  x1087"
    
1986G1 "Permutation Problem (Simple Version)" "binary search, brute force, combinatorics, data structures, math, number theory" "This is a simple version of the problem. The only difference is that in this version n\xe2\x89\xa4105 and the sum of n for all sets of input data does not exceed 105.
You are given a permutation p of length n. Calculate the number of index pairs 1\xe2\x89\xa4i<j\xe2\x89\xa4n such that pi\xe2\x8b\x85pj is divisible by i\xe2\x8b\x85j without remainder.
A permutation is a sequence of n integers, where each integer from 1 to n occurs exactly once. For example, [1], [3,5,2,1,4], [1,3,2] are permutations, while [2,3,2], [4,3,1], [0] are not.
Each test consists of multiple sets of input data. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of sets of input data. Then follows their description.
The first line of each set of input data contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the permutation p.
The second line of each set of input data contains n distinct integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the permutation p.
It is guaranteed that the sum of n for all sets of input data does not exceed 105.
For each set of input data, output the number of index pairs 1\xe2\x89\xa4i<j\xe2\x89\xa4n such that pi\xe2\x8b\x85pj is divisible by i\xe2\x8b\x85j without remainder.
In the first set of input data, there are no index pairs, as the size of the permutation is 1.
In the second set of input data, there is one index pair (1,2) and it is valid.
In the third set of input data, the index pair (1,2) is valid.
In the fourth set of input data, the index pairs (1,2), (1,5), and (2,5) are valid." "2200  x1496"
    
1986F "Non-academic Problem" "dfs and similar, graphs, trees" "You are given a connected undirected graph, the vertices of which are numbered with integers from 11 to nn. Your task is to minimize the number of pairs of vertices 1\xe2\x89\xa4u<v\xe2\x89\xa4n1\xe2\x89\xa4u<v\xe2\x89\xa4n between which there exists a path in this graph. To achieve this, you can remove exactly one edge from the graph.
Find the smallest number of pairs of vertices!
Each test consists of several sets of input data. The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of sets of input data. Then follows their description.
The first line of each set of input data contains two integers nn and mm (2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105, n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa4min(105,n\xe2\x8b\x85(n\xe2\x88\x921)2)n\xe2\x88\x921\xe2\x89\xa4m\xe2\x89\xa4min(105,n\xe2\x8b\x85(n\xe2\x88\x921)2))ï¿½\xe2\x80\x94 the number of vertices in the graph and the number of edges.
Each of the next mm lines contains two integers uu and vv (1\xe2\x89\xa4u,v\xe2\x89\xa4n,u\xe2\x89\xa0v1\xe2\x89\xa4u,v\xe2\x89\xa4n,u\xe2\x89\xa0v), indicating that there is an undirected edge in the graph between vertices uu and vv.
It is guaranteed that the given graph is connected and without multiple edges.
It is guaranteed that the sum of nn and the sum of mm over all sets of input data does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.
For each set of input data, output the smallest number of pairs of reachable vertices, if exactly one edge can be removed.
In the first set of input data, we will remove the single edge (1,2)(1,2) and the only pair of vertices (1,2)(1,2) will become unreachable from each other.
In the second set of input data, no matter which edge we remove, all vertices will be reachable from each other.
In the fourth set of input data, the graph looks like this initially.
We will remove the edge (3,4)(3,4) and then the only reachable pairs of vertices will be (1,2)(1,2), (1,3)(1,3), (2,3)(2,3), (4,5)(4,5), (4,6)(4,6), (5,6)(5,6).
In the sixth set of input data, the graph looks like this initially.
After removing the edge (2,4)(2,4), the graph will look like this. Thus, there will be 2121 pairs of reachable vertices." "1900  x4567"
    
1986E "Beautiful Array" "greedy, math, number theory, sortings" "You are given an array of integers a1,a2,\xe2\x80\xa6,an and an integer k. You need to make it beautiful with the least amount of operations.
Before applying operations, you can shuffle the array elements as you like. For one operation, you can do the following:
The array b1,b2,\xe2\x80\xa6,bn is beautiful if bi=bn\xe2\x88\x92i+1 for all 1\xe2\x89\xa4i\xe2\x89\xa4n.
Find the minimum number of operations needed to make the array beautiful, or report that it is impossible.
Each test consists of several sets of input data. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of sets of input data. Then follows their description.
The first line of each set of input data contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4k\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the size of the array a and the number k from the problem statement.
The second line of each set of input data contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all sets of input data does not exceed 2\xe2\x8b\x85105.
For each set of input data, output the minimum number of operations needed to make the array beautiful, or \xe2\x88\x921 if it is impossible.
In the first set of input data, the array is already beautiful.
In the second set of input data, you can shuffle the array before the operations and perform the operation with index i=1 for 83966524 times.
In the third set of input data, you can shuffle the array a and make it equal to [2,3,1]. Then apply the operation with index i=3 to get the array [2,3,2], which is beautiful.
In the eighth set of input data, there is no set of operations and no way to shuffle the elements to make the array beautiful.
In the ninth set of input data, the array is already beautiful." "1700  x8830"
    
1986D "Mathematical Problem" "brute force, dp, greedy, implementation, math, two pointers" "You are given a string s of length n>1, consisting of digits from 0 to 9. You must insert exactly n\xe2\x88\x922 symbols + (addition) or \xc3\x97 (multiplication) into this string to form a valid arithmetic expression.
In this problem, the symbols cannot be placed before the first or after the last character of the string s, and two symbols cannot be written consecutively. Also, note that the order of the digits in the string cannot be changed. Let\'s consider s=987009:
The result of the arithmetic expression is calculated according to the rules of mathematicsï¿½\xe2\x80\x94 first all multiplication operations are performed, then addition. You need to find the minimum result that can be obtained by inserting exactly n\xe2\x88\x922 addition or multiplication symbols into the given string s.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows their description.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa420)ï¿½\xe2\x80\x94 the length of the string s.
The second line of each test case contains a string s of length n, consisting of digits from 0 to 9.
For each test case, output the minimum result of the arithmetic expression that can be obtained by inserting exactly n\xe2\x88\x922 addition or multiplication symbols into the given string.
In the first four test cases, we cannot add symbols, so the answer will be the original number.
In the fifth test case, the optimal answer looks as follows: 9\xc3\x9701=9\xc3\x971=9.
In the sixth test case, the optimal answer looks as follows: 1\xc3\x9701=1\xc3\x971=1.
In the seventh test case, the optimal answer looks as follows: 2+3+3+11=19.
In the eighth test case, one of the optimal answers looks as follows: 98\xc3\x977\xc3\x970+0\xc3\x979=0." "1400  x15214"
    
1986C "Update Queries" "data structures, greedy, sortings" "Let\'s consider the following simple problem. You are given a string s of length n, consisting of lowercase Latin letters, as well as an array of indices ind of length m (1\xe2\x89\xa4indi\xe2\x89\xa4n) and a string c of length m, consisting of lowercase Latin letters. Then, in order, you perform the update operations, namely, during the i-th operation, you set sindi=ci. Note that you perform all m operations from the first to the last.
Of course, if you change the order of indices in the array ind and/or the order of letters in the string c, you can get different results. Find the lexicographically smallest string s that can be obtained after m update operations, if you can rearrange the indices in the array ind and the letters in the string c as you like.
A string a is lexicographically less than a string b if and only if one of the following conditions is met:
Each test consists of several sets of input data. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of sets of input data. Then follows their description.
The first line of each set of input data contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the string s and the number of updates.
The second line of each set of input data contains a string s of length n, consisting of lowercase Latin letters.
The third line of each set of input data contains m integers ind1,ind2,\xe2\x80\xa6,indm (1\xe2\x89\xa4indi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the array of indices ind.
The fourth line of each set of input data contains a string c of length m, consisting of lowercase Latin letters.
It is guaranteed that the sum of n over all sets of input data does not exceed 2\xe2\x8b\x85105. Similarly, the sum of m over all sets of input data does not exceed 2\xe2\x8b\x85105.
For each set of input data, output the lexicographically smallest string s that can be obtained by rearranging the indices in the array ind and the letters in the string c as you like.
In the first set of input data, you can leave the array ind and the string c unchanged and simply perform all operations in that order.
In the second set of input data, you can set the array ind=[1,1,4,2] and c= ""zczw"". Then the string s will change as follows: meow\xe2\x86\x92zeow\xe2\x86\x92ceow\xe2\x86\x92ceoz\xe2\x86\x92cwoz.
In the third set of input data, you can leave the array ind unchanged and set c= ""admn"". Then the string s will change as follows: abacaba\xe2\x86\x92abacaba\xe2\x86\x92abdcaba\xe2\x86\x92abdcmba\xe2\x86\x92abdcmbn." "1100  x22841"
    
1986B "Matrix Stabilization" "brute force, data structures, greedy, sortings" "You are given a matrix of size n\xc3\x97m, where the rows are numbered from 1 to n from top to bottom, and the columns are numbered from 1 to m from left to right. The element at the intersection of the i-th row and the j-th column is denoted by aij.
Consider the algorithm for stabilizing matrix a:
In this problem, cells (a,b) and (c,d) are considered neighbors if they share a common side, i.e., |a\xe2\x88\x92c|+|b\xe2\x88\x92d|=1.
Your task is to output the matrix a after the stabilization algorithm has been executed. It can be shown that this algorithm cannot run for an infinite number of iterations.
Each test consists of multiple sets of input data. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of sets of input data. This is followed by their description.
The first line of each set of input data contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4100,n\xe2\x8b\x85m>1)ï¿½\xe2\x80\x94 the number of rows and columns of matrix a. 
The next n lines describe the corresponding rows of the matrix. The i-th line contains m integers ai1,ai2,\xe2\x80\xa6,aim (1\xe2\x89\xa4aij\xe2\x89\xa4109).
It is guaranteed that the sum of n\xe2\x8b\x85m over all sets of input data does not exceed 2\xe2\x8b\x85105.
For each set of input data, output n lines with m numbers in each lineï¿½\xe2\x80\x94 the values of the cells of matrix a after the stabilization algorithm.
In the first set of input data, the algorithm will select the cell (1,1) twice in a row and then terminate. 
In the second set of input data, there is no cell whose value is strictly greater than the values of all neighboring cells.
In the third set of input data, the algorithm will select the cell (2,2) and then terminate. 
In the fourth set of input data, the algorithm will select the cell (1,1) three times and then the cell (2,3) twice." "1000  x26603"
    
1986A "X Axis" "brute force, geometry, math, sortings" "You are given three points with integer coordinates x1, x2, and x3 on the X axis (1\xe2\x89\xa4xi\xe2\x89\xa410). You can choose any point with an integer coordinate a on the X axis. Note that the point a may coincide with x1, x2, or x3. Let f(a) be the total distance from the given points to the point a. Find the smallest value of f(a).
The distance between points a and b is equal to |a\xe2\x88\x92b|. For example, the distance between points a=5 and b=2 is 3.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases. Then follows their descriptions.
The single line of each test case contains three integers x1, x2, and x3 (1\xe2\x89\xa4xi\xe2\x89\xa410)ï¿½\xe2\x80\x94 the coordinates of the points.
For each test case, output the smallest value of f(a).
In the first test case, the smallest value of f(a) is achieved when a=1: f(1)=|1\xe2\x88\x921|+|1\xe2\x88\x921|+|1\xe2\x88\x921|=0.
In the second test case, the smallest value of f(a) is achieved when a=5: f(5)=|1\xe2\x88\x925|+|5\xe2\x88\x925|+|9\xe2\x88\x925|=8.
In the third test case, the smallest value of f(a) is achieved when a=8: f(8)=|8\xe2\x88\x928|+|2\xe2\x88\x928|+|8\xe2\x88\x928|=6.
In the fourth test case, the smallest value of f(a) is achieved when a=9: f(10)=|10\xe2\x88\x929|+|9\xe2\x88\x929|+|3\xe2\x88\x929|=7." "800  x40481"
    
1985H2 "Maximize the Largest Component (Hard Version)" "data structures, dfs and similar, dp, dsu, implementation" "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. The only difference between the two versions is the operation.
Alex has a grid with n rows and m columns consisting of \'.\' and \'#\' characters. A set of \'#\' cells forms a connected component if from any cell in this set, it is possible to reach any other cell in this set by only moving to another cell in the set that shares a common side. The size of a connected component is the number of cells in the set.
In one operation, Alex selects any row r (1\xe2\x89\xa4r\xe2\x89\xa4n) and any column c (1\xe2\x89\xa4c\xe2\x89\xa4m), then sets every cell in row r and column c to be \'#\'. Help Alex find the maximum possible size of the largest connected component of \'#\' cells that he can achieve after performing the operation at most once.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa4106) \xe2\x80\x94 the number of rows and columns of the grid.
The next n lines each contain m characters. Each character is either \'.\' or \'#\'.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 106.
For each test case, output a single integer \xe2\x80\x94 the maximum possible size of a connected component of \'#\' cells that Alex can achieve.
In the fourth test case, it is optimal for Alex to set all cells in row 4 and column 2 to be \'#\'. Doing so will lead to the largest connected component of \'#\' having a size of 16.
In the fifth test case, it is optimal for Alex to set all cells in row 2 and column 4 to be \'#\'. Doing so will lead to the largest connected component of \'#\' having a size of 22." "2200  x1534"
    
1985H1 "Maximize the Largest Component (Easy Version)" "brute force, data structures, dfs and similar, dsu, graphs, implementation" "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. The only difference between the two versions is the operation.
Alex has a grid with n rows and m columns consisting of \'.\' and \'#\' characters. A set of \'#\' cells forms a connected component if from any cell in this set, it is possible to reach any other cell in this set by only moving to another cell in the set that shares a common side. The size of a connected component is the number of cells in the set.
In one operation, Alex selects any row r (1\xe2\x89\xa4r\xe2\x89\xa4n) or any column c (1\xe2\x89\xa4c\xe2\x89\xa4m), then sets every cell in row r or column c to be \'#\'. Help Alex find the maximum possible size of the largest connected component of \'#\' cells that he can achieve after performing the operation at most once.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa4106) \xe2\x80\x94 the number of rows and columns of the grid.
The next n lines each contain m characters. Each character is either \'.\' or \'#\'.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 106.
For each test case, output a single integer \xe2\x80\x94 the maximum possible size of a connected component of \'#\' cells that Alex can achieve.
In the second test case, it is optimal for Alex to set all cells in column 2 to be \'#\'. Doing so will lead to the largest connected component of \'#\' having a size of 6.
In the third test case, it is optimal for Alex to set all cells in row 2 to be \'#\'. Doing so will lead to the largest connected component of \'#\' having a size of 9.
In the fourth test case, it is optimal for Alex to set all cells in row 4 to be \'#\'. Doing so will lead to the largest connected component of \'#\' having a size of 11." "1700  x5608"
    
1985G D-Function "combinatorics, math, number theory" "Let D(n) represent the sum of digits of n. For how many integers n where 10l\xe2\x89\xa4n<10r satisfy D(k\xe2\x8b\x85n)=k\xe2\x8b\x85D(n)? Output the answer modulo 109+7.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x93 the number of test cases. 
Each test case contains three integers l, r, and k (0\xe2\x89\xa4l<r\xe2\x89\xa4109, 1\xe2\x89\xa4k\xe2\x89\xa4109).
For each test case, output an integer, the answer, modulo 109+7.
For the first test case, the only values of n that satisfy the condition are 1 and 2.
For the second test case, the only values of n that satisfy the condition are 1, 10, and 11.
For the third test case, all values of n between 10 inclusive and 100 exclusive satisfy the condition." "1600  x9405"
    
1985F "Final Boss" "binary search, data structures" "You are facing the final boss in your favorite video game. The boss enemy has h health. Your character has n attacks. The i\'th attack deals ai damage to the boss but has a cooldown of ci turns, meaning the next time you can use this attack is turn x+ci if your current turn is x. Each turn, you can use all attacks that are not currently on cooldown, all at once. If all attacks are on cooldown, you do nothing for the turn and skip to the next turn.
Initially, all attacks are not on cooldown. How many turns will you take to beat the boss? The boss is beaten when its health is 0 or less.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4104) ï¿½\xe2\x80\x93 the number of test cases.
The first line of each test case contains two integers h and n (1\xe2\x89\xa4h,n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x93 the health of the boss and the number of attacks you have.
The following line of each test case contains n integers a1,a2,...,an (1\xe2\x89\xa4ai\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x93 the damage of your attacks.
The following line of each test case contains n integers c1,c2,...,cn (1\xe2\x89\xa4ci\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x93 the cooldown of your attacks.
It is guaranteed that the sum of h and n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output an integer, the minimum number of turns required to beat the boss.
For the first test case, you can use attacks 1 and 2 on the first turn, dealing 3 damage in total, and slaying the boss.
For the second case, you can beat the boss in 3 turns by using the following attacks:
Turn 1: Use attacks 1 and 2, dealing 3 damage to the boss. The boss now has 2 health left.
Turn 2: Use attack 2, dealing 1 damage to the boss. The boss now has 1 health left.
Turn 3: Use attack 1, dealing 2 damage to the boss. The boss now has \xe2\x88\x921 health left. Since its health is less than or equal to 0, you beat the boss.
For the sixth test case: remember to use 64-bit integers as the answer can get large." "1500  x15341"
    
1985E "Secret Box" "brute force, combinatorics, math" "Ntarsis has a box BB with side lengths xx, yy, and zz. It lies in the 3D coordinate plane, extending from (0,0,0)(0,0,0) to (x,y,z)(x,y,z). 
Ntarsis has a secret box SS. He wants to choose its dimensions such that all side lengths are positive integers, and the volume of SS is kk. He can place SS somewhere within BB such that: 
SS is magical, so when placed at an integer location inside BB, it will not fall to the ground. 
Among all possible ways to choose the dimensions of SS, determine the maximum number of distinct locations he can choose to place his secret box SS inside BB. Ntarsis does not rotate SS once its side lengths are selected.
The first line consists of an integer tt, the number of test cases (1\xe2\x89\xa4t\xe2\x89\xa420001\xe2\x89\xa4t\xe2\x89\xa42000). The description of the test cases follows.
The first and only line of each test case contains four integers x,y,zx,y,z and kk (1\xe2\x89\xa4x,y,z\xe2\x89\xa420001\xe2\x89\xa4x,y,z\xe2\x89\xa42000, 1\xe2\x89\xa4k\xe2\x89\xa4x\xe2\x8b\x85y\xe2\x8b\x85z1\xe2\x89\xa4k\xe2\x89\xa4x\xe2\x8b\x85y\xe2\x8b\x85z).
It is guaranteed the sum of all xx, sum of all yy, and sum of all zz do not exceed 20002000 over all test cases.
Note that kk may not fit in a standard 32-bit integer data type.
For each test case, output the answer as an integer on a new line. If there is no way to select the dimensions of SS so it fits in BB, output 00.
For the first test case, it is optimal to choose SS with side lengths 22, 22, and 22, which has a volume of 2\xe2\x8b\x852\xe2\x8b\x852=82\xe2\x8b\x852\xe2\x8b\x852=8. It can be shown there are 88 ways to put SS inside BB.
The coordinate with the least xx, yy, and zz values for each possible arrangement of SS are: 
The arrangement of SS with a coordinate of (0,0,0)(0,0,0) is depicted below:
For the second test case, SS with side lengths 22, 33, and 33 are optimal." "1200  x19927"
    
1985D "Manhattan Circle" "implementation, math" "Given a n by m grid consisting of \'.\' and \'#\' characters, there exists a whole manhattan circle on the grid. The top left corner of the grid has coordinates (1,1), and the bottom right corner has coordinates (n,m).
Point (a,b) belongs to the manhattan circle centered at (h,k) if |h\xe2\x88\x92a|+|k\xe2\x88\x92b|<r, where r is a positive constant.
On the grid, the set of points that are part of the manhattan circle is marked as \'#\'. Find the coordinates of the center of the circle.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa41000) ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains n and m (1\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the height and width of the grid, respectively. 
The next n lines contains m characters \'.\' or \'#\'. If the character is \'#\', then the point is part of the manhattan circle.
It is guaranteed the sum of n\xe2\x8b\x85m over all test cases does not exceed 2\xe2\x8b\x85105, and there is a whole manhattan circle on the grid.
For each test case, output the two integers, the coordinates of the center of the circle." "900  x34582"
    
1985C "Good Prefixes" greedy "Alex thinks some array is good if there exists some element that can be represented as the sum of all other elements (the sum of all other elements is 0 if there are no other elements). For example, the array [1,6,3,2] is good since 1+3+2=6. Furthermore, the array [0] is also good. However, the arrays [1,2,3,4] and [1] are not good.
Alex has an array a1,a2,\xe2\x80\xa6,an. Help him count the number of good non-empty prefixes of the array a. In other words, count the number of integers i (1\xe2\x89\xa4i\xe2\x89\xa4n) such that the length i prefix (i.e. a1,a2,\xe2\x80\xa6,ai) is good.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of elements in the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105. 
For each test case, output a single integer \xe2\x80\x94 the number of good non-empty prefixes of the array a.
In the fourth test case, the array has five prefixes: 
As you can see, three of them are good, so the answer is 3." "1000  x32373"
    
1985B "Maximum Multiple Sum" "brute force, math, number theory" "Given an integer n, find an integer x such that: 
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
Each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4100).
For each test case, output an integer, the optimal value of x. It can be shown there is only one unique answer.
For n=3, the possible values of x are 2 and 3. The sum of all multiples of 2 less than or equal to n is just 2, and the sum of all multiples of 3 less than or equal to n is 3. Therefore, 3 is the optimal value of x.
For n=15, the optimal value of x is 2. The sum of all multiples of 2 less than or equal to n is 2+4+6+8+10+12+14=56, which can be proven to be the maximal over all other possible values of x." "800  x46336"
    
1985A "Creating Words" "implementation, strings" "Matthew is given two strings a and b, both of length 3. He thinks it\'s particularly funny to create two new words by swapping the first character of a with the first character of b. He wants you to output a and b after the swap.
Note that the new words may not necessarily be different.
The first line contains t (1\xe2\x89\xa4t\xe2\x89\xa4100) ï¿½\xe2\x80\x94 the number of test cases.
The first and only line of each test case contains two space-separated strings, a and b, both of length 3. The strings only contain lowercase Latin letters.
For each test case, after the swap, output a and b, separated by a space." "800  x53856"
    
1984H "Tower Capturing" "combinatorics, dp, geometry" "There are nn towers at nn distinct points (x1,y1),(x2,y2),\xe2\x80\xa6,(xn,yn)(x1,y1),(x2,y2),\xe2\x80\xa6,(xn,yn), such that no three are collinear and no four are concyclic. Initially, you own towers (x1,y1)(x1,y1) and (x2,y2)(x2,y2), and you want to capture all of them. To do this, you can do the following operation any number of times: 
Count the number of attack plans of minimal length. Note that it might not be possible to capture all towers, in which case the answer is 00. 
Since the answer may be large, output it modulo 998244353998244353.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa42501\xe2\x89\xa4t\xe2\x89\xa4250)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer nn (4\xe2\x89\xa4n\xe2\x89\xa41004\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of towers.
The ii-th of the next nn lines contains two integers xixi and yiyi (\xe2\x88\x92104\xe2\x89\xa4xi,yi\xe2\x89\xa4104\xe2\x88\x92104\xe2\x89\xa4xi,yi\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the location of the ii-th tower. Initially, you own towers (x1,y1)(x1,y1) and (x2,y2)(x2,y2).
All towers are at distinct locations, no three towers are collinear, and no four towers are concyclic.
The sum of nn over all test cases does not exceed 10001000.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of attack plans of minimal length after which you capture all towers, modulo 998244353998244353.
In the first test case, there is only one possible attack plan of shortest length, shown below.
In the second case, for example, you can never capture the tower at (3,10000)(3,10000)." "3300  x169"
    
1984G "Magic Trick II" "constructive algorithms, implementation, sortings" "The secret behind Oscar\'s first magic trick has been revealed! Because he still wants to impress Lura, he comes up with a new idea: he still wants to sort a permutation p1,p2,\xe2\x80\xa6,pn of [1,2,\xe2\x80\xa6,n].
This time, he chooses an integer k. He wants to sort the permutation in non-decreasing order using the following operation several times: 
To be as impressive as possible, Oscar would like to choose the maximal value of k such that he can sort his permutation. Please help him find the maximal k as well as a sequence of operations that will sort the permutation. You don\'t need to minimize the number of operations, but you are allowed to use at most 5n2 operations.
We have a proof that, for the maximal k such that you can sort the permutation in any number of operations, you can also sort it in at most 5n2 operations.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (5\xe2\x89\xa4n\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the length of the permutation.
The second line of each test case contains a permutation p1,p2,\xe2\x80\xa6,pn of [1,2,\xe2\x80\xa6,n].
The sum of n over all test cases does not exceed 2\xe2\x8b\x85103.
For each test case, first output the chosen value of k on a new line (1\xe2\x89\xa4k\xe2\x89\xa4n).
Then, output a single integer mï¿½\xe2\x80\x94 the number of operations used (0\xe2\x89\xa4m\xe2\x89\xa45n2).
Then, on each of the next m lines, output the operations denoted by two integers i and j (1\xe2\x89\xa4i,j\xe2\x89\xa4n\xe2\x88\x92k+1), representing an operation where you remove the subarray starting from index i and replace it back into p at index j.
In the first test case, it is enough to move the last four numbers to the front.
In the second test case, it can be shown that we cannot have k=4 or k=5. With k=3, we can move the first three numbers to the end, and then the middle three to the front to sort the permutation.
In the third test case, the permutation is already sorted. We can have k=6 and use no operations." "3200  x260"
    
1984F Reconstruction "brute force, dp, math" "There is a hidden array a1,a2,\xe2\x80\xa6,an of length n whose elements are integers between \xe2\x88\x92m and m, inclusive.
You are given an array b1,b2,\xe2\x80\xa6,bn of length n and a string s of length n consisting of the characters P, S, and ?.
For each i from 1 to n inclusive, we must have: 
Output the number of ways to replace all ? in s with either P or S such that there exists an array a1,a2,\xe2\x80\xa6,an with elements not exceeding m by absolute value satisfying the constraints given by the array b1,b2,\xe2\x80\xa6,bn and the string s.
Since the answer may be large, output it modulo 998244353.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85103, 2\xe2\x89\xa4m\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the length of the hidden array a1,a2,\xe2\x80\xa6,an and the maximum absolute value of an element ai.
The second line of each test case contains a string s of length n consisting of characters P, S, and ?.
The third line of each test case contains n integers b1,b2,\xe2\x80\xa6,bn (|bi|\xe2\x89\xa4m\xe2\x8b\x85n).
The sum of n over all test cases does not exceed 5\xe2\x8b\x85103.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of ways to replace all ? in s with either P or S that result in the existence of a valid array a1,a2,\xe2\x80\xa6,an, modulo 998244353.
In the first test case, we can see that the following array satisfies all constraints, thus the answer is 1: 
In the second test case, it can be shown that no array a with all |ai|\xe2\x89\xa4m=109 satisfies all constraints." "2500  x941"
    
1984E Shuffle "dp, greedy, trees" "Two hungry red pandas, Oscar and Lura, have a tree TT with nn nodes. They are willing to perform the following shuffle procedure on the whole tree TT exactly once. With this shuffle procedure, they will create a new tree out of the nodes of the old tree. 
After this, Oscar and Lura are left with a new tree T2T2. They can only eat leaves and are very hungry, so please find the maximum number of leaves over all trees that can be created in exactly one shuffle.
Note that leaves are all nodes with degree 11. Thus, the root may be considered as a leaf if it has only one child.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of every test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of nodes within the original tree TT.
The next n\xe2\x88\x921n\xe2\x88\x921 lines each contain two integers uu and vv (1\xe2\x89\xa4u,v\xe2\x89\xa4n1\xe2\x89\xa4u,v\xe2\x89\xa4n)ï¿½\xe2\x80\x94 an edge within the original tree TT. The given edges form a tree.
The sum of nn over all test cases does not exceed 3\xe2\x8b\x851053\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum number of leaves achievable with exactly one shuffle procedure on the whole tree.
In the first test case, it can be shown that the maximum number of leaves is 44. To accomplish this, we can start our shuffle with selecting node 33 as the new root. 
In our second test case, we have a line of five nodes. It can be shown that the maximum number of leaves after one shuffle is 33. We can start off with node 22, which forces node 11 to become a leaf. Then, if we select node 44 on the right side, we will also have nodes 33 and 55 as leaves.
The third test case is a star graph with six nodes. The number of leaves cannot increase, thus our answer will be 55 (if we start the shuffling with the original root node)." "2400  x1402"
    
1984D "''a'' String Problem" "brute force, hashing, implementation, math, string suffix structures, strings" "You are given a string s consisting of lowercase Latin characters. Count the number of nonempty strings t\xe2\x89\xa0 ""a"" such that it is possible to partition\xe2\x80\xa0 s into some substrings satisfying the following conditions: 
\xe2\x80\xa0 A partition of a string s is an ordered sequence of some k strings t1,t2,\xe2\x80\xa6,tk (called substrings) such that t1+t2+\xe2\x80\xa6+tk=s, where + represents the concatenation operation.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a string s consisting of lowercase Latin characters (2\xe2\x89\xa4|s|\xe2\x89\xa42\xe2\x8b\x85105).
The sum of |s| over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of nonempty strings t\xe2\x89\xa0 ""a"" that satisfy all constraints.
In the first test case, t can be ""aa"", ""aaa"", ""aaaa"", or the full string.
In the second test case, t can be ""b"", ""bab"", ""ba"", or the full string.
In the third test case, the only such t is the full string." "2000  x3286"
    
1984C2 "Magnitude (Hard Version)" "combinatorics, dp, greedy, math" "The two versions of the problem are different. You may want to read both versions. You can make hacks only if both versions are solved.
You are given an array a of length n. Start with c=0. Then, for each i from 1 to n (in increasing order) do exactly one of the following: 
Let the maximum final value of c after the procedure described above be equal to k. Find the number of unique procedures that result in c=k. Two procedures are different if at any index i, one procedure chose option 1 and another chose option 2, even if the value of c is equal for both procedures after that turn.
Since the answer may be large, output it modulo 998244353.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (\xe2\x88\x92109\xe2\x89\xa4ai\xe2\x89\xa4109).
The sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of unique procedures that result in c=k, modulo 998244353.
In the first test case, it can be shown that our maximal final value of c is 3. There are 12 ways to achieve this because in order to get 3, we have to take absolute value at indices 2 or 4, or both, resulting in 3 ways. For the other two indices, it doesn\'t change the value whether we take absolute value or not, so we have 2\xe2\x8b\x852=4 ways for them. In total, we have 3\xe2\x8b\x854=12 ways.
In the second test case, taking the absolute value will never change anything, so we can either take absolute value or not, for every index. This gives us 28=256 possible ways." "1700  x7415"
    
1984C1 "Magnitude (Easy Version)" "dp, greedy, math" "The two versions of the problem are different. You may want to read both versions. You can make hacks only if both versions are solved.
You are given an array a of length n. Start with c=0. Then, for each i from 1 to n (in increasing order) do exactly one of the following: 
Let the maximum final value of c after the procedure described above be equal to k. Find k.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each case contains n integers a1, a2, a3, \xe2\x80\xa6, an (\xe2\x88\x92109\xe2\x89\xa4ai\xe2\x89\xa4109).
The sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the value of k.
In the first test case, if we set c to its absolute value every time we add to it, we end up with 6. It can be shown that this is the maximum result.
In the second test case, taking the absolute value will never change anything, so we can just sum the array without doing anything to get 24.
In the third test case, it is optimal to wait until the end to set c to its absolute value, resulting in an answer of 6." "1300  x16650"
    
1984B "Large Addition" "implementation, math" "A digit is large if it is between 5 and 9, inclusive. A positive integer is large if all of its digits are large.
You are given an integer x. Can it be the sum of two large positive integers with the same number of digits?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single integer x (10\xe2\x89\xa4x\xe2\x89\xa41018).
For each test case, output YES if x satisfies the condition, and NO otherwise.
You can output YES and NO in any case (for example, strings yES, yes, and Yes will be recognized as a positive response).
In the first test case, we can have 658+679=1337.
In the second test case, it can be shown that no numbers of equal length and only consisting of large digits can add to 200.
In the third test case, we can have 696969+696969=1393938.
In the fourth test case, we can have 777+657=1434." "1100  x18301"
    
1984A "Strange Splitting" "constructive algorithms" "Define the range of a non-empty array to be the maximum value minus the minimum value. For example, the range of [1,4,2] is 4\xe2\x88\x921=3.
You are given an array a1,a2,\xe2\x80\xa6,an of length n\xe2\x89\xa53. It is guaranteed a is sorted.
You have to color each element of a red or blue so that: 
If there does not exist any such coloring, you should report it. If there are multiple valid colorings, you can print any of them.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (3\xe2\x89\xa4n\xe2\x89\xa450)ï¿½\xe2\x80\x94 the length of the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109). It is guaranteed a1\xe2\x89\xa4a2\xe2\x89\xa4\xe2\x80\xa6\xe2\x89\xa4an\xe2\x88\x921\xe2\x89\xa4an.
For each test case, if it is impossible to color a to satisfy all the constraints, output NO.
Otherwise, first output YES.
Then, output a string s of length n. For 1\xe2\x89\xa4i\xe2\x89\xa4n, if you color ai red, si should be R. For 1\xe2\x89\xa4i\xe2\x89\xa4n, if you color ai blue, si should be B. 
In the first test case, given the array [1,1,2,2], we can color the second element blue and the remaining elements red; then the range of the red elements [1,2,2] is 2\xe2\x88\x921=1, and the range of the blue elements [1] is 1\xe2\x88\x921=0.
In the second test case, we can color the first, second, fourth and fifth elements [1,2,4,5] blue and the remaining elements [3] red. 
The range of the red elements is 3\xe2\x88\x923=0 and the range of the blue elements is 5\xe2\x88\x921=4, which are different.
In the third test case, it can be shown there is no way to color a=[3,3,3] to satisfy the constraints." "800  x21155"
    
1983G "Your Loss" "bitmasks, brute force, dp, trees" "You are given a tree with n nodes numbered from 1 to n, along with an array of size n. The value of i-th node is ai. There are q queries. In each query, you are given 2 nodes numbered as x and y. 
Consider the path from the node numbered as x to the node numbered as y. Let the path be represented by x=p0,p1,p2,\xe2\x80\xa6,pr=y, where pi are the intermediate nodes. Compute the sum of api\xe2\x8a\x95i for each i such that 0\xe2\x89\xa4i\xe2\x89\xa4r where \xe2\x8a\x95 is the XOR operator. 
More formally, compute r\xe2\x88\x91i=0api\xe2\x8a\x95i. 
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Each test case contains several sets of input data.
The first line of each set of input data contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of nodes.
The next n\xe2\x88\x921 lines of each set of input data contain 2 integers, u and v representing an edge between the node numbered u and the node numbered v. It is guaranteed that u\xe2\x89\xa0v and that the edges form a tree. 
The next line of each set of input data contains n integers, a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 values of the nodes.
The next line contains a single integer q (1\xe2\x89\xa4q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of queries.
The next q lines describe the queries. The i-th query contains 2 integers x and y (1\xe2\x89\xa4x,y\xe2\x89\xa4n) denoting the starting and the ending node of the path. 
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105 and sum of q over all test cases does not exceed 105.
For each query, output a single numberï¿½\xe2\x80\x94 the sum from the problem statement." "3000  x212"
    
1983F array-value "binary search, bitmasks, data structures, greedy, two pointers" "You have an array of non-negative integers a1,a2,\xe2\x80\xa6,an.
The value of a sub-array of length \xe2\x89\xa52, a[l,r]=[al,al+1,\xe2\x80\xa6,ar] is the minimum value of ai\xe2\x8a\x95aj such that l\xe2\x89\xa4i<j\xe2\x89\xa4r, where \xe2\x8a\x95 is the xor (exclusive-or) operator.
You have to find the k-th smallest value over all sub-arrays of length \xe2\x89\xa52.
The first line of the input contains multiple test cases t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104).
The first line of each test case contains integer numbers n and k (2\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x8b\x85(n\xe2\x88\x921)2).
The second line of the input contains n non-negative integer numbers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the array itself.
It is guaranteed that the sum of n over all test cases does not exceed 105.
Print the k-th smallest value obtained over all subarrays of length at least 2.
In the first testcase, we have subarrays with their smallest exclusive-or pair as:
[1,2]:3
[2,3]:1
[3,4]:7
[4,5]:1
[1,2,3]:1
[2,3,4]:1
[3,4,5]:1
[1,2,3,4]:1
[2,3,4,5]:1
[1,2,3,4,5]:1
The sorted order would be: 1,1,1,1,1,1,1,1,3,7. Therefore, the second smallest element would be 1. " "2500  x1202"
    
1983E "I Love Balls" "combinatorics, math, probabilities" "Alice and Bob are playing a game. There are n balls, out of which k are special. Each ball has a value associated with it. 
The players play turn by turn. In each turn, the player randomly picks a ball and adds the value of the ball to their score, which is 0 at the beginning of the game. The selected ball is removed from the game. If the ball was special, the same player takes the next turn if at least one ball is remaining. If the ball picked was not special, the next player plays their turn.
They play this game until no balls are remaining in the game. Alice plays first.
Find the expected score that both the players have at the end of the game modulo 109+7. 
Formally, let M=109+7. It can be shown that the answer can be expressed as an irreducible fraction pq, where p and q are integers and q\xe2\x89\xa20(modM). Output the integer equal to p\xe2\x8b\x85q\xe2\x88\x921modM. In other words, output such an integer x that 0\xe2\x89\xa4x<M and x\xe2\x8b\x85q\xe2\x89\xa1p(modM).
There are multiple test cases. The first line of the input contains an integer t, the number of test cases (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85105).
Each test case description is on a new line. The first line of the test case contains two integers n and k in the respective order separated by a space (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa44\xe2\x8b\x85105).
The second line of the test case contains n integers: v1,v2,\xe2\x80\xa6,vn, the value for each ball separated by spaces. The first k balls are special (1\xe2\x89\xa4vi\xe2\x89\xa4107).
The sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
Output two integers per test case in a new line, the expected score of Alice and the expected score of Bob modulo 109+7.
In the first test case, Alice\'s expected score is 45, and Bob\'s is 30 at the end of the game." "2300  x2011"
    
1983D "Swap Dilemma" "constructive algorithms, data structures, divide and conquer, greedy, math, sortings" "Given two arrays of distinct positive integers a and b of length n, we would like to make both the arrays the same. Two arrays x and y of length k are said to be the same when for all 1\xe2\x89\xa4i\xe2\x89\xa4k, xi=yi.
Now in one move, you can choose some index l and r in a (l\xe2\x89\xa4r) and swap al and ar, then choose some p and q (p\xe2\x89\xa4q) in b such that r\xe2\x88\x92l=q\xe2\x88\x92p and swap bp and bq.
Is it possible to make both arrays the same?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the arrays a and b.
The second line of each test case contains n distinct integers a1,a2,a3,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the integers in the array a.
The third line of each test case contains n distinct integers b1,b2,b3,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the integers in the array b.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each testcase, print ""YES"" if the arrays a and b can be made the same. Otherwise, print ""NO"". can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first testcase, you don\'t need to perform any operations since the arrays are same.
In the second testcase, it can be proven there exists no way to make the arrays same.
In the third testcase, one of the ways to make the arrays same is to first choose l=1, r=3, p=1, q=3 then choose l=1, r=2, p=3, q=4." "1700  x8211"
    
1983C "Have Your Cake and Eat It Too" "binary search, brute force, greedy, implementation" "Alice, Bob and Charlie want to share a rectangular cake cut into n pieces. Each person considers every piece to be worth a different value. The i-th piece is considered to be of value ai by Alice, bi by Bob and ci by Charlie.
The sum over all ai, all bi and all ci individually is the same, equal to tot.
Given the values of each piece of the cake for each person, you need to give each person a contiguous slice of cake. In other words, the indices at the left and right ends of these subarrays (the slices given to each person) can be represented as (la,ra), (lb,rb) and (lc,rc) respectively for Alice, Bob and Charlie. The division needs to satisfy the following constraints:
Here, the notation \xe2\x8c\x88ab\xe2\x8c\x89 represents ceiling division. It is defined as the smallest integer greater than or equal to the exact division of a by b. In other words, it rounds up the division result to the nearest integer. For instance \xe2\x8c\x88103\xe2\x8c\x89=4 and \xe2\x8c\x88153\xe2\x8c\x89=5. 
The first line contains an integer t, the number of testcases, (1\xe2\x89\xa4t\xe2\x89\xa4104)
For each testcase:
The first line contains the integer n (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The following three lines contain n integers each:
One line with n integers a1,a2,\xe2\x80\xa6,an represents the values for Alice (1\xe2\x89\xa4ai\xe2\x89\xa4106).
The next line with n integers b1,b2,\xe2\x80\xa6,bn represents the values for Bob (1\xe2\x89\xa4bi\xe2\x89\xa4106).
The next line with n integers c1,c2,\xe2\x80\xa6,cn represents the values for Charlie (1\xe2\x89\xa4ci\xe2\x89\xa4106).
It is guaranteed that \xe2\x88\x91ni=1ai=\xe2\x88\x91ni=1bi=\xe2\x88\x91ni=1ci.
The sum of n over all testcases does not exceed 2\xe2\x8b\x85105.
For each testcase, output \xe2\x88\x921 if the required condition is impossible. 
Otherwise, output six numbers \xe2\x80\x93 la,ra,lb,rb,lc,rc, the respective starting and ending indices (1-indexed) of the subarrays for Alice, Bob and Charlie, respectively.
In the first testcase, the sum of either of the three arrays is 9. Each person needs a cake slice corresponding to a subarray with a total value of at least \xe2\x8c\x8893\xe2\x8c\x89=3. 
If we assign the subarray (1,1) to Alice, its total value to her is 5, which is \xe2\x89\xa53; the subarray (2,3) to Bob, its total value to him is 1+5=6, which is \xe2\x89\xa53; and the subarray (4,5) to Charlie, its total value to him 1+5=6, which is also \xe2\x89\xa53. Each person gets their own separate pieces of the cake, and no piece is common to two or more people.
It can be shown that for the third test case, it is not possible to give slices of the cake in a way that satisfies the given constraints." "1400  x12564"
    
1983B "Corner Twist" "constructive algorithms, greedy, implementation, math" "You are given two grids of numbers a and b, with n rows and m columns. All the values in the grid are 0, 1 or 2.
You can perform the following operation on a any number of times: 
Note that the operation only changes the values of the corners of the picked subrectangle.
Is it possible to convert the grid a into grid b by applying the above operation any number of times (possibly zero)?
The first line contains an integer t, the number of testcases (1\xe2\x89\xa4t\xe2\x89\xa4250).
For each testcase:
The first line contains two integers n and m, the number of rows and columns in the grid (2\xe2\x89\xa4n,m\xe2\x89\xa4500).
Each of the next n lines contain m characters \xe2\x80\x94 the j-th character of the i-th line represents ai,j.
Each of the next n lines contain m characters \xe2\x80\x94 the j-th character of the i-th line represents bi,j (0\xe2\x89\xa4ai,j,bi,j\xe2\x89\xa42).
It is guaranteed that the sum of n over all test cases and the sum of m over all test cases do not exceed 500.
For each test case print ""YES"" (without quotes) if it is possible to convert grid a into grid b and ""NO"" (without quotes) otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first testcase, grid a can be converted into b in the following manner:
000000000\xe2\x87\x92102000201\xe2\x87\x92102012222\xe2\x87\x92102102102\xe2\x87\x92111102120\xe2\x87\x92111111111
Here, in each operation, the top-right and bottom-left corners highlighted by a box are incremented by 2 modulo 3, while the top-left and bottom-right corners are incremented by 1 modulo 3.
In the fourth testcase, it can be proven that it is not possible to convert grid a into grid b using the above-mentioned operations any number of times." "1200  x16114"
    
1983A "Array Divisibility" "constructive algorithms, math" "An array of integers a1,a2,\xe2\x8b\xaf,an is beautiful subject to an integer k if it satisfies the following: 
It can be shown that an answer always exists.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first and only line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the size of the array.
For each test case, print the required array as described in the problem statement.
In the second test case, when n=6, for all integers k such that 1\xe2\x89\xa4k\xe2\x89\xa46, let S be the set of all indices of the array that are divisible by k." "800  x25654"
    
1982F "Sorting Problem Again" "binary search, data structures, sortings" "You have an array a of n elements. There are also q modifications of the array. Before the first modification and after each modification, you would like to know the following:
What is the minimum length subarray that needs to be sorted in non-decreasing order in order for the array a to be completely sorted in non-decreasing order?
More formally, you want to select a subarray of the array (l,r) with the minimum value of r\xe2\x88\x92l+1. After that, you will sort the elements al,al+1,\xe2\x80\xa6,ar and want the condition ai\xe2\x89\xa4ai+1 to hold for all 1\xe2\x89\xa4i<n. If the array is already sorted in non-decreasing order, then l and r should be considered as equal to \xe2\x88\x921.
Note that finding such (l,r) does not change the array in any way. The modifications themselves take the form: assign apos=x for given pos and x.
Each test consists of several test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa410)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105).
The second line of each test case contains n integers ai (0\xe2\x89\xa4|ai|\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial elements of the array a.
The third line of each test case contains a number q (0\xe2\x89\xa4q\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of modifications to the array.
The following q lines of each test case contain two integers posi (1\xe2\x89\xa4posi\xe2\x89\xa4n) and vali (0\xe2\x89\xa4|vali|\xe2\x89\xa4109)ï¿½\xe2\x80\x94 this means that for the i-th modification, aposi is assigned the value vali.
It is guaranteed that the sum of n and the sum of q for all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output q+1 lines. Each line should contain 2 integers l,rï¿½\xe2\x80\x94 the boundaries of the minimum subarray, such that sorting it will make the array a completely sorted. If a is already sorted, then output l=\xe2\x88\x921, r=\xe2\x88\x921.
Let\'s consider the first test case:
The red segments indicate the subarrays that need to be sorted in order for the entire array to be sorted in non-decreasing order." "2600  x956"
    
1982E "Number of k-good subarrays" "bitmasks, brute force, combinatorics, divide and conquer, dp, math, meet-in-the-middle" "Let bit(x) denote the number of ones in the binary representation of a non-negative integer x.
A subarray of an array is called k-good if it consists only of numbers with no more than k ones in their binary representation, i.e., a subarray (l,r) of array a is good if for any i such that l\xe2\x89\xa4i\xe2\x89\xa4r condition bit(ai)\xe2\x89\xa4k is satisfied.
You are given an array a of length n, consisting of consecutive non-negative integers starting from 0, i.e., ai=i for 0\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921 (in 0-based indexing). You need to count the number of k-good subarrays in this array.
As the answer can be very large, output it modulo 109+7.
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The following lines describe the test cases.
The single line of each test case contains two integers n, k (1\xe2\x89\xa4n\xe2\x89\xa41018,1\xe2\x89\xa4k\xe2\x89\xa460).
For each test case, output a single integerï¿½\xe2\x80\x94 the number of k-good subarrays modulo 109+7.
For the first test case a=[0,1,2,3,4,5], k=1.
To find the answer, let\'s write all the numbers in binary representation:
a=[000,001,010,011,100,101]
From this, it can be seen that the numbers 3 and 5 have 2\xe2\x89\xa5(k=1) ones in their binary representation, so the answer should include all subarrays that do not contain either 3 or 5, which are the subarrays (in 0-based indexing): (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2), (4, 4)." "2300  x1599"
    
1982D "Beauty of the mountains" "brute force, data structures, implementation, math, number theory" "Nikita loves mountains and has finally decided to visit the Berlyand mountain range! The range was so beautiful that Nikita decided to capture it on a map. The map is a table of nn rows and mm columns, with each cell containing a non-negative integer representing the height of the mountain.
He also noticed that mountains come in two types:
Nikita is a very pragmatic person. He wants the sum of the heights of the mountains with snowy caps to be equal to the sum of the heights of the mountains without them. He has arranged with the mayor of Berlyand, Polikarp Polikarpovich, to allow him to transform the landscape.
Nikita can perform transformations on submatrices of size k\xc3\x97kk\xc3\x97k as follows: he can add an integer constant cc to the heights of the mountains within this area, but the type of the mountain remains unchanged. Nikita can choose the constant cc independently for each transformation. Note that cc can be negative.
Before making the transformations, Nikita asks you to find out if it is possible to achieve equality of the sums, or if it is impossible. It doesn\'t matter at what cost, even if the mountains turn into canyons and have negative heights.
If only one type of mountain is represented on the map, then the sum of the heights of the other type of mountain is considered to be zero.
Each test consists of several test cases. The first line contains an integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. This is followed by a description of test cases.
The first line of each test case contains three integers n,m,kn,m,k (1\xe2\x89\xa4n,m\xe2\x89\xa4500,1\xe2\x89\xa4k\xe2\x89\xa4min(n,m)1\xe2\x89\xa4n,m\xe2\x89\xa4500,1\xe2\x89\xa4k\xe2\x89\xa4min(n,m)).
The next nn lines of each test case contain mm integers aijaij (0\xe2\x89\xa4aij\xe2\x89\xa41090\xe2\x89\xa4aij\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial heights of the mountains.
The next nn binary strings of length mm for each test case determine the type of mountain, \'00\'ï¿½\xe2\x80\x94 with snowy caps, \'11\'ï¿½\xe2\x80\x94 without them.
It is guaranteed that the sum of n\xe2\x8b\x85mn\xe2\x8b\x85m for all test cases does not exceed 250000250000.
For each test case, output ""YES"" without quotes if it is possible to equalize the sums of the mountain heights, otherwise output ""NO"" without quotes. You can output each letter in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
The mountain array from the first test case looks like this:
Initially, the sum of the heights of the mountains with snowy caps is 11+3+4+3+0+1+15=3711+3+4+3+0+1+15=37, and without them is 7+2=97+2=9.
To equalize these sums, we can perform two transformations:
First transformation:
Note that the constant cc can be negative.
After the first transformation, the mountain array looks like this:
Second transformation:
As a result, the mountain array looks like this:
The sum of the heights of the mountains with snowy caps is 17+9+9\xe2\x88\x9216\xe2\x88\x9220\xe2\x88\x9219+15=\xe2\x88\x92517+9+9\xe2\x88\x9216\xe2\x88\x9220\xe2\x88\x9219+15=\xe2\x88\x925, and without them is 7\xe2\x88\x9212=\xe2\x88\x9257\xe2\x88\x9212=\xe2\x88\x925, thus the answer is YES." "1700  x7157"
    
1982C "Boring Day" "binary search, data structures, dp, greedy, two pointers" "On another boring day, Egor got bored and decided to do something. But since he has no friends, he came up with a game to play.
Egor has a deck of n cards, the i-th card from the top has a number ai written on it. Egor wants to play a certain number of rounds until the cards run out. In each round, he takes a non-zero number of cards from the top of the deck and finishes the round. If the sum of the numbers on the cards collected during the round is between l and r, inclusive, the round is won; otherwise, it is lost. 
Egor knows by heart the order of the cards. Help Egor determine the maximum number of rounds he can win in such a game. Note that Egor is not required to win rounds consecutively.
Each test consists of several test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. This is followed by a description of the test cases.
The first line of each test case contains three integers n, l, and r (1\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4109).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the numbers on the cards from top to bottom.
It is guaranteed that the sum of n for all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single numberï¿½\xe2\x80\x94 the maximum number of rounds Egor can win.
In the first test case, Egor can win 3 rounds:
In the second test case, Egor cannot win any rounds, no matter how hard he tries.
In the third test case, you can take one card in each round, then the first and third rounds will be losing, and the second round will be winning.
In the fourth test case, you can take two cards in each round and always win." "1200  x17561"
    
1982B "Collatz Conjecture" "brute force, implementation, math, number theory" "Recently, the first-year student Maxim learned about the Collatz conjecture, but he didn\'t pay much attention during the lecture, so he believes that the following process is mentioned in the conjecture:
There is a variable x and a constant y. The following operation is performed k times: 
For example, if the number x=16, y=3, and k=2, then after one operation x becomes 17, and after another operation x becomes 2, because after adding one, x=18 is divisible by 3 twice.
Given the initial values of x, y, and k, Maxim wants to know what is the final value of x.
Each test consists of multiple test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The only line of each test case contains three integers x, y, and k (1\xe2\x89\xa4x,k\xe2\x89\xa4109, 2\xe2\x89\xa4y\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the initial variable, constant and the number of operations.
For each test case, output a single integerï¿½\xe2\x80\x94 the number obtained after applying k operations.
In the first test case, there is only one operation applied to x=1, resulting in x becoming 2.
In the second test case, for x=2, within one operation, one is added to x and it\'s divided by y=3, resulting in x becoming 1.
In the third test case, x changes as follows:" "1200  x16970"
    
1982A Soccer "greedy, implementation, math, sortings" "Dima loves watching soccer. In such a game, the score on the scoreboard is represented as x : y, where x is the number of goals of the first team, and y is the number of goals of the second team. At any given time, only one team can score a goal, so the score x : y can change to either (x+1) : y, or x : (y+1).
While watching a soccer game, Dima was distracted by very important matters, and after some time, he returned to watching the game. Dima remembers the score right before he was distracted, and the score right after he returned. Given these two scores, he wonders the following question. Is it possible that, while Dima was not watching the game, the teams never had an equal score?
It is guaranteed that at neither of the two time points Dima remembers the teams had equal scores. However, it is possible that the score did not change during his absence.
Help Dima and answer the question!
Each test consists of several test cases. The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Then follows the description of the test cases.
The first line of each test case contains two integers x1,y1 (0\xe2\x89\xa4x1,y1\xe2\x89\xa4109, x1\xe2\x89\xa0y1)ï¿½\xe2\x80\x94 the score before Dima was distracted.
The second line of each test case contains two integers x2,y2 (x1\xe2\x89\xa4x2\xe2\x89\xa4109, y1\xe2\x89\xa4y2\xe2\x89\xa4109, x2\xe2\x89\xa0y2)ï¿½\xe2\x80\x94 the score when Dima returned.
For each test case, output ""YES"" without quotes if it is possible, that the teams never had a tie while Dima was away, otherwise output ""NO"" without quotes.
You can output each letter in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
In the first test case, the score before Dima left was 1 : 0. When he leaves, the first team scores several goals in a row until the score becomes 5 : 0, so the answer is YES.
In the second test case, the score could only change as follows:
In this scenario, there is a moment when the teams have an equal score, so the answer is NO.
In the third test case, one of the possible developments is:
In this scenario, there was no time when the score was equal, so the answer is YES." "800  x25132"
    
1981F "Turtle and Paths on a Tree" "data structures, dp, trees" "Note the unusual definition of MEXMEX in this problem.
Piggy gave Turtle a binary tree\xe2\x80\xa0\xe2\x80\xa0 with nn vertices and a sequence a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an on his birthday. The binary tree is rooted at vertex 11.
If a set of paths P={(xi,yi)}P={(xi,yi)} in the tree covers each edge exactly once, then Turtle will think that the set of paths is good. Note that a good set of paths can cover a vertex twice or more.
Turtle defines the value of a set of paths as \xe2\x88\x91(x,y)\xe2\x88\x88Pf(x,y)\xe2\x88\x91(x,y)\xe2\x88\x88Pf(x,y), where f(x,y)f(x,y) denotes the MEX\xe2\x80\xa1MEX\xe2\x80\xa1 of all auau such that vertex uu is on the simple path from xx to yy in the tree (including the starting vertex xx and the ending vertex yy).
Turtle wonders the minimum value over all good sets of paths. Please help him calculate the answer!
\xe2\x80\xa0\xe2\x80\xa0A binary tree is a tree where every non-leaf vertex has at most 22 sons.
\xe2\x80\xa1MEX\xe2\x80\xa1MEX of a collection of integers c1,c2,\xe2\x80\xa6,ckc1,c2,\xe2\x80\xa6,ck is defined as the smallest positive integer xx which does not occur in the collection cc. For example, MEXMEX of [3,3,1,4][3,3,1,4] is 22, MEXMEX of [2,3][2,3] is 11.
Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa42.5\xe2\x8b\x851042\xe2\x89\xa4n\xe2\x89\xa42.5\xe2\x8b\x85104) \xe2\x80\x94 the number of vertices in the tree.
The second line of each test case contains nn integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41091\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the elements of the sequence aa.
The third line of each test case contains n\xe2\x88\x921n\xe2\x88\x921 integers p2,p3,\xe2\x80\xa6,pnp2,p3,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi<i1\xe2\x89\xa4pi<i) \xe2\x80\x94 the parent of each vertex in the tree.
Additional constraint on the input: the given tree is a binary tree, that is, every non-leaf vertex has at most 22 sons.
It is guaranteed that the sum of nn over all test cases does not exceed 105105.
For each test case, output a single integer \xe2\x80\x94 the minimum value over all good sets of paths.
In the first test case, the tree is as follows. The number in brackets denotes the weight of the vertex:
The good set of paths with the minimum value is {(2,3),(4,5)}{(2,3),(4,5)}.
Note that in this test case {(4,5)}{(4,5)} and {(3,4),(4,5)}{(3,4),(4,5)} are not good sets of paths because each edge should be covered exactly once.
In the second test case, the tree is as follows:
The set of good paths with the minimum value is {(1,2),(1,3),(4,5)}{(1,2),(1,3),(4,5)}.
In the third test case, the tree is as follows:
The set of good paths with the minimum value is {(1,6),(3,5)}{(1,6),(3,5)}." "3000  x274"
    
1981E "Turtle and Intersected Segments" "data structures, dsu, graphs, greedy" "Turtle just received nn segments and a sequence a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an. The ii-th segment is [li,ri][li,ri].
Turtle will create an undirected graph GG. If segment ii and segment jj intersect, then Turtle will add an undirected edge between ii and jj with a weight of |ai\xe2\x88\x92aj||ai\xe2\x88\x92aj|, for every i\xe2\x89\xa0ji\xe2\x89\xa0j.
Turtle wants you to calculate the sum of the weights of the edges of the minimum spanning tree of the graph GG, or report that the graph GG has no spanning tree.
We say two segments [l1,r1][l1,r1] and [l2,r2][l2,r2] intersect if and only if max(l1,l2)\xe2\x89\xa4min(r1,r2)max(l1,l2)\xe2\x89\xa4min(r1,r2).
Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41051\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The first line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105) \xe2\x80\x94 the number of segments.
The ii-th of the following nn lines contains three integers li,ri,aili,ri,ai (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4109,1\xe2\x89\xa4ai\xe2\x89\xa41091\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4109,1\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the ii-th segment and the ii-th element of the sequence.
It is guaranteed that the sum of nn over all test cases does not exceed 5\xe2\x8b\x851055\xe2\x8b\x85105.
For each test case, output a single integer \xe2\x80\x94 the sum of the weights of the edges of the minimum spanning tree of the graph GG. If the graph GG has no spanning tree, output \xe2\x88\x921\xe2\x88\x921.
In the first test case, the graph GG is as follows:
One of the minimum spanning trees of GG is as follows:
The sum of the weights of the edges of the minimum spanning tree is 99.
In the second test case, the graph GG is as follows:
GG is already a tree, and the sum of the weights of the tree is 1313.
In the third test case, the graph GG is as follows:
In the fourth test case, the graph GG is as follows:
It\'s easy to see that GG is not connected, so GG has no spanning tree." "2600  x906"
    
1981D "Turtle and Multiplication" "constructive algorithms, dfs and similar, graphs, number theory" "Turtle just learned how to multiply two integers in his math class, and he was very excited.
Then Piggy gave him an integer n, and asked him to construct a sequence a1,a2,\xe2\x80\xa6,an consisting of integers which satisfied the following conditions:
Of all such sequences, Piggy asked Turtle to find the one with the minimum number of distinct elements.
Turtle definitely could not solve the problem, so please help him!
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4106) \xe2\x80\x94 the length of the sequence a.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, output n integers a1,a2,\xe2\x80\xa6,an \xe2\x80\x94 the elements of the sequence a.
If there are multiple answers, print any of them.
In the third test case, a=[3,4,2,6] violates the second condition since a1\xe2\x8b\x85a2=a3\xe2\x8b\x85a4. a=[2,3,4,4] satisfy the conditions but its number of distinct elements isn\'t minimum." "2400  x1667"
    
1981C "Turtle and an Incomplete Sequence" "bitmasks, brute force, constructive algorithms, greedy, implementation, math" "Turtle was playing with a sequence a1,a2,\xe2\x80\xa6,an consisting of positive integers. Unfortunately, some of the integers went missing while playing.
Now the sequence becomes incomplete. There may exist an arbitrary number of indices i such that ai becomes \xe2\x88\x921. Let the new sequence be a\xe2\x80\xb2.
Turtle is sad. But Turtle remembers that for every integer i from 1 to n\xe2\x88\x921, either ai=\xe2\x8c\x8aai+12\xe2\x8c\x8b or ai+1=\xe2\x8c\x8aai2\xe2\x8c\x8b holds for the original sequence a.
Turtle wants you to help him complete the sequence. But sometimes Turtle makes mistakes, so you need to tell him if you can\'t complete the sequence.
Formally, you need to find another sequence b1,b2,\xe2\x80\xa6,bn consisting of positive integers such that:
If there is no sequence b1,b2,\xe2\x80\xa6,bn that satisfies all of the conditions above, you need to report \xe2\x88\x921.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of the sequence.
The second line of each test case contains n integers a\xe2\x80\xb21,a\xe2\x80\xb22,\xe2\x80\xa6,a\xe2\x80\xb2n (a\xe2\x80\xb2i=\xe2\x88\x921 or 1\xe2\x89\xa4a\xe2\x80\xb2i\xe2\x89\xa4108) \xe2\x80\x94 the elements of the sequence a\xe2\x80\xb2.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, if there is no sequence b1,b2,\xe2\x80\xa6,bn that satisfies all of the conditions, output a single integer \xe2\x88\x921.
Otherwise, output n integers b1,b2,\xe2\x80\xa6,bn \xe2\x80\x94 the elements of the sequence b1,b2,\xe2\x80\xa6,bn you find. The sequence should satisfy that 1\xe2\x89\xa4bi\xe2\x89\xa4109 for every integer i from 1 to n. If there are multiple answers, print any of them.
In the first test case, [4,2,1,2,1,2,1,3] can also be the answer, while [4,2,5,10,5,2,1,3] and [4,2,1,2,1,2,1,4] cannot.
In the second test case, [1,2,5,2] can also be the answer.
From the fourth to the sixth test cases, it can be shown that there is no answer, so you should output \xe2\x88\x921." "1800  x5345"
    
1981B "Turtle and an Infinite Sequence" "bitmasks, math" "There is a sequence a0,a1,a2,\xe2\x80\xa6 of infinite length. Initially ai=i for every non-negative integer i.
After every second, each element of the sequence will simultaneously change. ai will change to ai\xe2\x88\x921\xe2\x88\xa3ai\xe2\x88\xa3ai+1 for every positive integer i. a0 will change to a0\xe2\x88\xa3a1. Here, | denotes bitwise OR.
Turtle is asked to find the value of an after m seconds. In particular, if m=0, then he needs to find the initial value of an. He is tired of calculating so many values, so please help him!
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n,m (0\xe2\x89\xa4n,m\xe2\x89\xa4109).
For each test case, output a single integer \xe2\x80\x94 the value of an after m seconds.
After 1 second, [a0,a1,a2,a3,a4,a5] will become [1,3,3,7,7,7].
After 2 seconds, [a0,a1,a2,a3,a4,a5] will become [3,3,7,7,7,7]." "1300  x13741"
    
1981A "Turtle and Piggy Are Playing a Game" "brute force, greedy, math" "Turtle and Piggy are playing a number game.
First, Turtle will choose an integer x, such that l\xe2\x89\xa4x\xe2\x89\xa4r, where l,r are given. It\'s also guaranteed that 2l\xe2\x89\xa4r.
Then, Piggy will keep doing the following operation until x becomes 1:
The score is initially 0. Both Turtle and Piggy want to maximize the score. Please help them to calculate the maximum score.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers l,r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4109,2l\xe2\x89\xa4r) \xe2\x80\x94 The range where Turtle can choose the integer from.
For each test case, output a single integer \xe2\x80\x94 the maximum score.
In the first test case, Turtle can choose an integer x, such that 2\xe2\x89\xa4x\xe2\x89\xa44. He can choose x=4. Then Piggy can choose p=2 for 2 times. After that, x will become 1, and the score will be 2, which is maximized.
In the second test case, Turtle can choose an integer 3\xe2\x89\xa4x\xe2\x89\xa46. He can choose x=6. Then Piggy can choose p=2, then choose p=3. After that, x will become 1, and the score will be 2, which is maximum.
In the third test case, Turtle can choose x=12.
In the fourth test case, Turtle can choose x=16." "800  x22299"
    
1980G "Yasya and the Mysterious Tree" "bitmasks, data structures, dfs and similar, graphs, greedy, strings, trees" "Yasya was walking in the forest and accidentally found a tree with n vertices. A tree is a connected undirected graph with no cycles.
Next to the tree, the girl found an ancient manuscript with m queries written on it. The queries can be of two types.
The first type of query is described by the integer y. The weight of each edge in the tree is replaced by the bitwise exclusive OR of the weight of that edge and the integer y.
The second type is described by the vertex v and the integer x. Yasya chooses a vertex u (1\xe2\x89\xa4u\xe2\x89\xa4n, u\xe2\x89\xa0v) and mentally draws a bidirectional edge of weight x from v to u in the tree.
Then Yasya finds a simple cycle in the resulting graph and calculates the bitwise exclusive OR of all the edges in it. She wants to choose a vertex u such that the calculated value is maximum. This calculated value will be the answer to the query. It can be shown that such a cycle exists and is unique under the given constraints (independent of the choice of u). If an edge between v and u already existed, a simple cycle is the path v\xe2\x86\x92u\xe2\x86\x92v.
Note that the second type of query is performed mentally, meaning the tree does not change in any way after it.
Help Yasya answer all the queries.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
The descriptions of the test cases follow.
The first line of each test case contains two integers n, m (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of vertices in the tree and the number of queries.
The next n\xe2\x88\x921 lines of each test case contain three integers v, u, w (1\xe2\x89\xa4v,u\xe2\x89\xa4n, 1\xe2\x89\xa4w\xe2\x89\xa4109) \xe2\x80\x94 the ends of some edge in the tree and its weight.
It is guaranteed that the given set of edges forms a tree.
The next m lines of each test case describe the queries: 
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105. The same is guaranteed for m.
For each test case, output the answers to the queries of the second type." "2300  x1252"
    
1980F2 "Field Division (hard version)" "math, sortings" "This is a hard version of the problem; it differs from the easy version only by the question. The easy version only needs you to print whether some values are non-zero or not. The hard version needs you to print the exact values.
Alice and Bob are dividing the field. The field is a rectangle of size n\xc3\x97m (2\xe2\x89\xa4n,m\xe2\x89\xa4109); the rows are numbered from 1 to n from top to bottom, and the columns are numbered from 1 to m from left to right. The cell at the intersection of row r and column c is denoted as (r,c).
Bob has k (2\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85105) fountains, all of them are located in different cells of the field. Alice is responsible for dividing the field, but she must meet several conditions:
Alice wants to divide the field in such a way as to get as many cells as possible.
Bob wants to keep ownership of all the fountains, but he can give one of them to Alice. First, output the integer \xce\xb1 \xe2\x80\x94 the maximum possible size of Alice\'s plot, if Bob does not give her any fountain (i.e., all fountains will remain on Bob\'s plot).
Then output k non-negative integers a1,a2,\xe2\x80\xa6,ak, where ai is a value such that after Bob gives Alice the i-th fountain, the maximum size of her plot will be \xce\xb1+ai.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, m, and k (2\xe2\x89\xa4n,m\xe2\x89\xa4109, 2\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the field sizes and the number of fountains, respectively.
Then follow k lines, each containing two numbers ri and ci (1\xe2\x89\xa4ri\xe2\x89\xa4n, 1\xe2\x89\xa4ci\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the coordinates of the cell with the i-th fountain. It is guaranteed that all cells are distinct and none of them is (n,1).
It is guaranteed that the sum of k over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, first output \xce\xb1ï¿½\xe2\x80\x94 the maximum size of the plot that can belong to Alice if Bob does not give her any of the fountains. Then output k non-negative integers a1,a2,\xe2\x80\xa6,ak, where ai is a value such that after Bob gives Alice the i-th fountain, the maximum size of her plot will be \xce\xb1+ai.
Below are the images for the second example: 
Note that if Bob gives Alice fountain 1 or fountain 3, then that fountain cannot be on Alice\'s plot." "2400  x999"
    
1980F1 "Field Division (easy version)" "data structures, math, sortings" "This is an easy version of the problem; it differs from the hard version only by the question. The easy version only needs you to print whether some values are non-zero or not. The hard version needs you to print the exact values.
Alice and Bob are dividing the field. The field is a rectangle of size n\xc3\x97m (2\xe2\x89\xa4n,m\xe2\x89\xa4109), the rows are numbered from 1 to n from top to bottom, and the columns are numbered from 1 to m from left to right. The cell at the intersection of row r and column c is denoted as (r,c).
Bob has k (2\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85105) fountains, all of them are located in different cells of the field. Alice is responsible for dividing the field, but she must meet several conditions:
Alice wants to divide the field in such a way as to get as many cells as possible.
Bob wants to keep ownership of all the fountains, but he can give one of them to Alice. First, output the integer \xce\xb1 \xe2\x80\x94 the maximum possible size of Alice\'s plot, if Bob does not give her any fountain (i.e., all fountains will remain on Bob\'s plot). Then output k non-negative integers a1,a2,\xe2\x80\xa6,ak, where:
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, m, and k (2\xe2\x89\xa4n,m\xe2\x89\xa4109, 2\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the field sizes and the number of fountains, respectively.
Then follow k lines, each containing two numbers ri and ci (1\xe2\x89\xa4ri\xe2\x89\xa4n, 1\xe2\x89\xa4ci\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the coordinates of the cell with the i-th fountain. It is guaranteed that all cells are distinct and none of them is (n,1).
It is guaranteed that the sum of k over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, first output \xce\xb1ï¿½\xe2\x80\x94 the maximum size of the plot that can belong to Alice if Bob does not give her any of the fountains. Then output k non-negative integers a1,a2,\xe2\x80\xa6,ak, where:
If you output any other positive number instead of 1 that fits into a 64-bit signed integer type, it will also be recognized as 1. Thus, a solution to the hard version of this problem will also pass the tests for the easy version.
Below are the images for the second example: 
Note that if Bob gives Alice fountain 1 or fountain 3, then that fountain cannot be on Alice\'s plot." "1900  x3744"
    
1980E "Permutation of Rows and Columns" "constructive algorithms, data structures, greedy, hashing, implementation, math, matrices, sortings" "You have been given a matrix a of size n by m, containing a permutation of integers from 1 to n\xe2\x8b\x85m.
A permutation of n integers is an array containing all numbers from 1 to n exactly once. For example, the arrays [1], [2,1,3], [5,4,3,2,1] are permutations, while the arrays [1,1], [100], [1,2,4,5] are not.
A matrix contains a permutation if, when all its elements are written out, the resulting array is a permutation. Matrices [[1,2],[3,4]], [[1]], [[1,5,3],[2,6,4]] contain permutations, while matrices [[2]], [[1,1],[2,2]], [[1,2],[100,200]] do not.
You can perform one of the following two actions in one operation:
You can perform any number of operations.
You are given the original matrix a and the matrix b. Your task is to determine whether it is possible to transform matrix a into matrix b using the given operations.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The descriptions of the test cases follow.
The first line of each test case description contains 2 integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4n\xe2\x8b\x85m\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the sizes of the matrix.
The next n lines contain m integers aij each (1\xe2\x89\xa4aij\xe2\x89\xa4n\xe2\x8b\x85m). It is guaranteed that matrix a is a permutation.
The next n lines contain m integers bij each (1\xe2\x89\xa4bij\xe2\x89\xa4n\xe2\x8b\x85m). It is guaranteed that matrix b is a permutation.
It is guaranteed that the sum of the values n\xe2\x8b\x85m for all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output ""YES"" if the second matrix can be obtained from the first, and ""NO"" otherwise.
You can output each letter in any case (lowercase or uppercase). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive answer.
In the second example, the original matrix looks like this:
(1234)
By swapping rows 1 and 2, it becomes:
(3412)
By swapping columns 1 and 2, it becomes equal to matrix b:
(4321)" "1600  x10521"
    
1980D GCD-sequence "greedy, implementation, math, number theory" "GCD (Greatest Common Divisor) of two integers x and y is the maximum integer z by which both x and y are divisible. For example, GCD(36,48)=12, GCD(5,10)=5, and GCD(7,11)=1.
Kristina has an array a consisting of exactly n positive integers. She wants to count the GCD of each neighbouring pair of numbers to get a new array b, called GCD-sequence. 
So, the elements of the GCD-sequence b will be calculated using the formula bi=GCD(ai,ai+1) for 1\xe2\x89\xa4i\xe2\x89\xa4n\xe2\x88\x921.
Determine whether it is possible to remove exactly one number from the array a so that the GCD sequence b is non-decreasing (i.e., bi\xe2\x89\xa4bi+1 is always true).
For example, let Khristina had an array a = [20,6,12,3,48,36]. If she removes a4=3 from it and counts the GCD-sequence of b, she gets:
The first line of input data contains a single number t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 he number of test cases in the test.
This is followed by the descriptions of the test cases.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of elements in the array a.
The second line of each test case contains exactly n integers ai (1\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the elements of array a.
It is guaranteed that the sum of n over all test case does not exceed 2\xe2\x8b\x85105.
For each test case, output a single line: 
You can output the answer in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will all be recognized as a positive answer).
The first test case is explained in the problem statement." "1400  x14317"
    
1980C "Sofia and the Lost Operations" "constructive algorithms, greedy" "Sofia had an array of n integers a1,a2,\xe2\x80\xa6,an. One day she got bored with it, so she decided to sequentially apply m modification operations to it.
Each modification operation is described by a pair of numbers \xe2\x9f\xa8cj,dj\xe2\x9f\xa9 and means that the element of the array with index cj should be assigned the value dj, i.e., perform the assignment acj=dj. After applying all modification operations sequentially, Sofia discarded the resulting array.
Recently, you found an array of n integers b1,b2,\xe2\x80\xa6,bn. You are interested in whether this array is Sofia\'s array. You know the values of the original array, as well as the values d1,d2,\xe2\x80\xa6,dm. The values c1,c2,\xe2\x80\xa6,cm turned out to be lost.
Is there a sequence c1,c2,\xe2\x80\xa6,cm such that the sequential application of modification operations \xe2\x9f\xa8c1,d1,\xe2\x9f\xa9,\xe2\x9f\xa8c2,d2,\xe2\x9f\xa9,\xe2\x80\xa6,\xe2\x9f\xa8cm,dm\xe2\x9f\xa9 to the array a1,a2,\xe2\x80\xa6,an transforms it into the array b1,b2,\xe2\x80\xa6,bn?
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Then follow the descriptions of the test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the size of the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the original array.
The third line of each test case contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the found array.
The fourth line contains an integer m (1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of modification operations.
The fifth line contains m integers d1,d2,\xe2\x80\xa6,dm (1\xe2\x89\xa4dj\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the preserved value for each modification operation.
It is guaranteed that the sum of the values of n for all test cases does not exceed 2\xe2\x8b\x85105, similarly the sum of the values of m for all test cases does not exceed 2\xe2\x8b\x85105.
Output t lines, each of which is the answer to the corresponding test case. As an answer, output ""YES"" if there exists a suitable sequence c1,c2,\xe2\x80\xa6,cm, and ""NO"" otherwise.
You can output the answer in any case (for example, the strings ""yEs"", ""yes"", ""Yes"" and ""YES"" will be recognized as a positive answer)." "1300  x18623"
    
1980B "Choosing Cubes" "sortings, sortings" "Dmitry has n cubes, numbered from left to right from 1 to n. The cube with index f is his favorite.
Dmitry threw all the cubes on the table, and the i-th cube showed the value ai (1\xe2\x89\xa4ai\xe2\x89\xa4100). After that, he arranged the cubes in non-increasing order of their values, from largest to smallest. If two cubes show the same value, they can go in any order.
After sorting, Dmitry removed the first k cubes. Then he became interested in whether he removed his favorite cube (note that its position could have changed after sorting).
For example, if n=5, f=2, a=[4,3,3,2,3] (the favorite cube is highlighted in green), and k=2, the following could have happened:
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases. Then follow the descriptions of the test cases.
The first line of each test case description contains three integers n, f, and k (1\xe2\x89\xa4f,k\xe2\x89\xa4n\xe2\x89\xa4100) \xe2\x80\x94 the number of cubes, the index of Dmitry\'s favorite cube, and the number of removed cubes, respectively.
The second line of each test case description contains n integers ai (1\xe2\x89\xa4ai\xe2\x89\xa4100) \xe2\x80\x94 the values shown on the cubes.
For each test case, output one line \xe2\x80\x94 ""YES"" if the cube will be removed in all cases, ""NO"" if it will not be removed in any case, ""MAYBE"" if it may be either removed or left.
You can output the answer in any case. For example, the strings ""YES"", ""nO"", ""mAyBe"" will be accepted as answers." "800  x34701"
    
1980A "Problem Generator" math "Vlad is planning to hold m rounds next month. Each round should contain one problem of difficulty levels \'A\', \'B\', \'C\', \'D\', \'E\', \'F\', and \'G\'.
Vlad already has a bank of n problems, where the i-th problem has a difficulty level of ai. There may not be enough of these problems, so he may have to come up with a few more problems.
Vlad wants to come up with as few problems as possible, so he asks you to find the minimum number of problems he needs to come up with in order to hold m rounds.
For example, if m=1, n=10, a= \'BGECDCBDED\', then he needs to come up with two problems: one of difficulty level \'A\' and one of difficulty level \'F\'.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa450, 1\xe2\x89\xa4m\xe2\x89\xa45)ï¿½\xe2\x80\x94 the number of problems in the bank and the number of upcoming rounds, respectively.
The second line of each test case contains a string a of n characters from \'A\' to \'G\'ï¿½\xe2\x80\x94 the difficulties of the problems in the bank.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of problems that need to come up with to hold m rounds." "800  x40665"
    
1979F "Kostyanych's Theorem" "brute force, constructive algorithms, graphs, interactive" "This is an interactive problem.
Kostyanych has chosen a complete undirected graph\xe2\x80\xa0\xe2\x80\xa0 with nn vertices, and then removed exactly (n\xe2\x88\x922)(n\xe2\x88\x922) edges from it. You can ask queries of the following type:
Find a Hamiltonian path\xe2\x80\xa1\xe2\x80\xa1 in the original graph in at most nn queries. It can be proven that under these constraints, a Hamiltonian path always exists.
\xe2\x80\xa0\xe2\x80\xa0A complete undirected graph is a graph in which there is exactly one undirected edge between any pair of distinct vertices. Thus, a complete undirected graph with nn vertices contains n(n\xe2\x88\x921)2n(n\xe2\x88\x921)2 edges.
\xe2\x80\xa1\xe2\x80\xa1A Hamiltonian path in a graph is a path that passes through each vertex exactly once.
Each test consists of multiple test cases. The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105) \xe2\x80\x94 the number of vertices in the graph.
It is guaranteed that the sum of nn over all test cases does not exceed 105105.
Interaction for each test case begins with reading the integer nn.
Then you can make no more than nn queries.
To make a query, output a line in the format ""? dd"" (without quotes) (0\xe2\x89\xa4d\xe2\x89\xa4n\xe2\x88\x9210\xe2\x89\xa4d\xe2\x89\xa4n\xe2\x88\x921). After each query, read two integersï¿½\xe2\x80\x94 the answer to your query.
When you are ready to report the answer, output a line in the format ""! v1ï¿½v2\xe2\x80\xa6vnv1ï¿½v2\xe2\x80\xa6vn"" (without quotes)ï¿½\xe2\x80\x94 the vertices in the order of their occurrence in the Hamiltonian path. Outputting the answer does not count as one of the nn queries. After solving one test case, the program should immediately move on to the next one. After solving all test cases, the program should be terminated immediately.
If your program makes more than nn queries for one test case or makes an incorrect query, then the response to the query will be \xe2\x88\x921\xe2\x88\x921, and after receiving such a response, your program should immediately terminate to receive the verdict Wrong answer. Otherwise, it may receive any other verdict.
After outputting a query, do not forget to output an end of line and flush the output buffer. Otherwise, you will receive the verdict Idleness limit exceeded. To do this, use:
The interactor is non-adaptive. The graph does not change during the interaction.
Hacks
To hack, use the following format:
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
The only line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105) \xe2\x80\x94 the number of vertices in the graph.
Each of the following (n\xe2\x88\x922)(n\xe2\x88\x922) lines should contains two integers uu and vv (1\xe2\x89\xa4u,v\xe2\x89\xa4n1\xe2\x89\xa4u,v\xe2\x89\xa4n, u\xe2\x89\xa0vu\xe2\x89\xa0v) \xe2\x80\x94 ends of the edge that was removed from the graph. Each edge must not occur more than once.
The sum of nn over all test cases should not exceed 105105.
In the first test case, the original graph looks as follows:
Consider the queries:
The path 4\xe2\x88\x923\xe2\x88\x921\xe2\x88\x9224\xe2\x88\x923\xe2\x88\x921\xe2\x88\x922 is a Hamiltonian path.
In the second test case, the original graph looks as follows:
Consider the queries:
The path 4\xe2\x88\x921\xe2\x88\x922\xe2\x88\x9234\xe2\x88\x921\xe2\x88\x922\xe2\x88\x923 is a Hamiltonian path.
In the third test case, the graph consists of 22 vertices connected by an edge." "2900  x315"
    
1979E "Manhattan Triangle" "binary search, constructive algorithms, data structures, geometry, implementation, two pointers" "The Manhattan distance between two points (x1,y1)(x1,y1) and (x2,y2)(x2,y2) is defined as: |x1\xe2\x88\x92x2|+|y1\xe2\x88\x92y2|.|x1\xe2\x88\x92x2|+|y1\xe2\x88\x92y2|.
We call a Manhattan triangle three points on the plane, the Manhattan distances between each pair of which are equal.
You are given a set of pairwise distinct points and an even integer dd. Your task is to find any Manhattan triangle, composed of three distinct points from the given set, where the Manhattan distance between any pair of vertices is equal to dd.
Each test consists of multiple test cases. The first line contains one integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers nn and dd (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851053\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 2\xe2\x89\xa4d\xe2\x89\xa44\xe2\x8b\x851052\xe2\x89\xa4d\xe2\x89\xa44\xe2\x8b\x85105, dd is even)ï¿½\xe2\x80\x94 the number of points and the required Manhattan distance between the vertices of the triangle.
The (i+1)(i+1)-th line of each test case contains two integers xixi and yiyi (\xe2\x88\x92105\xe2\x89\xa4xi,yi\xe2\x89\xa4105\xe2\x88\x92105\xe2\x89\xa4xi,yi\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the coordinates of the ii-th point. It is guaranteed that all points are pairwise distinct.
It is guaranteed that the sum of nn over all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.
For each test case, output three distinct integers ii, jj, and kk (1\xe2\x89\xa4i,j,k\xe2\x89\xa4n1\xe2\x89\xa4i,j,k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the indices of the points forming the Manhattan triangle. If there is no solution, output ""0ï¿½0ï¿½00ï¿½0ï¿½0"" (without quotes).
If there are multiple solutions, output any of them.
In the first test case:
In the third test case:
In the fourth test case, there are no two points with a Manhattan distance of 44, and therefore there is no suitable Manhattan triangle." "2400  x1451"
    
1979D "Fixing a Binary String" "bitmasks, brute force, constructive algorithms, dp, greedy, hashing, strings" "You are given a binary string s of length n, consisting of zeros and ones. You can perform the following operation exactly once:
For example, if you apply the operation to the string 110001100110 with p=3, after the second step, the string will become 011001100110, and after the third step, it will become 001100110011.
A string s is called k-proper if two conditions are met:
For example, with k=3, the strings 000, 111000111, and 111000 are k-proper, while the strings 000000, 001100, and 1110000 are not.
You are given an integer k, which is a divisor of n. Find an integer p (1\xe2\x89\xa4p\xe2\x89\xa4n) such that after performing the operation, the string s becomes k-proper, or determine that it is impossible. Note that if the string is initially k-proper, you still need to apply exactly one operation to it.
Each test consists of multiple test cases. The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n, 2\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the string s and the value of k. It is guaranteed that k is a divisor of n.
The second line of each test case contains a binary string s of length n, consisting of the characters 0 and 1.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the value of p to make the string k-proper, or \xe2\x88\x921 if it is impossible.
If there are multiple solutions, output any of them.
In the first test case, if you apply the operation with p=3, after the second step of the operation, the string becomes 11100001, and after the third step, it becomes 00001111. This string is 4-proper.
In the second test case, it can be shown that there is no operation after which the string becomes 2-proper.
In the third test case, if you apply the operation with p=7, after the second step of the operation, the string becomes 100011100011, and after the third step, it becomes 000111000111. This string is 3-proper.
In the fourth test case, after the operation with any p, the string becomes 5-proper." "1800  x6644"
    
1979C "Earning on Bets" "binary search, combinatorics, constructive algorithms, number theory" "You have been offered to play a game. In this game, there are n possible outcomes, and for each of them, you must bet a certain integer amount of coins. In the event that the i-th outcome turns out to be winning, you will receive back the amount of coins equal to your bet on that outcome, multiplied by ki. Note that exactly one of the n outcomes will be winning.
Your task is to determine how to distribute the coins in such a way that you will come out ahead in the event of any winning outcome. More formally, the total amount of coins you bet on all outcomes must be strictly less than the number of coins received back for each possible winning outcome.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of outcomes.
The second line of each test case contains n integers k1,k2,\xe2\x80\xa6,kn (2\xe2\x89\xa4ki\xe2\x89\xa420)ï¿½\xe2\x80\x94 the multiplier for the amount of coins if the i-th outcome turns out to be winning.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output \xe2\x88\x921 if there is no way to distribute the coins as required. Otherwise, output n integers x1,x2,\xe2\x80\xa6,xn (1\xe2\x89\xa4xi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 your bets on the outcomes.
It can be shown that if a solution exists, there is always a solution that satisfies these constraints.
If there are multiple suitable solutions, output any of them.
In the first test case, the coins can be distributed as follows: 27 coins on the first outcome, 41 coins on the second outcome, 12 coins on the third outcome. Then the total amount of coins bet on all outcomes is 27+41+12=80 coins. If the first outcome turns out to be winning, you will receive back 3\xe2\x8b\x8527=81 coins, if the second outcome turns out to be winning, you will receive back 2\xe2\x8b\x8541=82 coins, if the third outcome turns out to be winning, you will receive back 7\xe2\x8b\x8512=84 coins. All these values are strictly greater than 80.
In the second test case, one way is to bet one coin on each of the outcomes." "1200  x18795"
    
1979B "XOR Sequences" "bitmasks, greedy" "You are given two distinct non-negative integers x and y. Consider two infinite sequences a1,a2,a3,\xe2\x80\xa6 and b1,b2,b3,\xe2\x80\xa6, where
Here, x\xe2\x8a\x95y denotes the bitwise XOR operation of integers x and y.
For example, with x=6, the first 8 elements of sequence a will look as follows: [7,4,5,2,3,0,1,14,\xe2\x80\xa6]. Note that the indices of elements start with 1.
Your task is to find the length of the longest common subsegment\xe2\x80\xa0 of sequences a and b. In other words, find the maximum integer m such that ai=bj,ai+1=bj+1,\xe2\x80\xa6,ai+m\xe2\x88\x921=bj+m\xe2\x88\x921 for some i,j\xe2\x89\xa51.
\xe2\x80\xa0A subsegment of sequence p is a sequence pl,pl+1,\xe2\x80\xa6,pr, where 1\xe2\x89\xa4l\xe2\x89\xa4r.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains two integers x and y (0\xe2\x89\xa4x,y\xe2\x89\xa4109,x\xe2\x89\xa0y)ï¿½\xe2\x80\x94 the parameters of the sequences.
For each test case, output a single integerï¿½\xe2\x80\x94 the length of the longest common subsegment.
In the first test case, the first 7 elements of sequences a and b are as follows:
a=[1,2,3,4,5,6,7,\xe2\x80\xa6]
b=[0,3,2,5,4,7,6,\xe2\x80\xa6]
It can be shown that there isn\'t a positive integer k such that the sequence [k,k+1] occurs in b as a subsegment. So the answer is 1.
In the third test case, the first 20 elements of sequences a and b are as follows:
a=[56,59,58,61,60,63,62,49,48,51,50,53,52,55,54,41, 40, 43, 42,45,\xe2\x80\xa6]
b=[36,39,38,33,32,35,34,45,44,47,46,41, 40, 43, 42,53,52,55,54,49,\xe2\x80\xa6]
It can be shown that one of the longest common subsegments is the subsegment [41,40,43,42] with a length of 4." "1000  x22610"
    
1979A "Guess the Maximum" "brute force, greedy, implementation" "Alice and Bob came up with a rather strange game. They have an array of integers a1,a2,\xe2\x80\xa6,an. Alice chooses a certain integer k and tells it to Bob, then the following happens:
Help Alice find the maximum k at which she is guaranteed to win.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85104)ï¿½\xe2\x80\x94 the number of elements in the array.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85104.
For each test case, output one integer \xe2\x80\x94 the maximum integer k at which Alice is guaranteed to win.
In the first test case, all possible subsegments that Bob can choose look as follows: [2,4],[2,4,1],[2,4,1,7],[4,1],[4,1,7],[1,7]. The maximums on the subsegments are respectively equal to 4,4,7,4,7,7. It can be shown that 3 is the largest integer such that any of the maximums will be strictly greater than it.
In the third test case, the only segment that Bob can choose is [1,1]. So the answer is 0." "800  x29048"
    
1978F "Large Graph" "data structures, dfs and similar, dsu, graphs, number theory, two pointers" "Given an array a of length n. Let\'s construct a square matrix b of size n\xc3\x97n, in which the i-th row contains the array a cyclically shifted to the right by (i\xe2\x88\x921). For example, for the array a=[3,4,5], the obtained matrix is
b=[345534453]
Let\'s construct the following graph:
Your task is to calculate the number of connected components\xe2\x80\xa0 in the obtained graph.
\xe2\x80\xa0A connected component of a graph is a set of vertices in which any vertex is reachable from any other via edges, and adding any other vertex to the set violates this rule.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa4106, 2\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85106) \xe2\x80\x94 the length of the array and the parameter k. 
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106) \xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, output a single integer \xe2\x80\x94 the number of connected components in the obtained graph.
In the first test case, the matrix b is given in the statement. The first connected component contains the vertices (1,1), (2,2), and (3,3). The second connected component contains the vertices (1,2), (2,3), and (3,1). The third connected component contains the vertices (1,3), (2,1), and (3,2). Thus, the graph has 3 connected components.
In the second test case, the following matrix is obtained:
b=[349934493]
The first connected component contains all vertices corresponding to elements with values 3 and 9. The second connected component contains all vertices corresponding to elements with the value 4.
In the fourth test case, all vertices are in one connected component." "2400  x1342"
    
1978E "Computing Machine" "brute force, data structures, dp, greedy, implementation" "Sasha has two binary strings s and t of the same length n, consisting of the characters 0 and 1.
There is also a computing machine that can perform two types of operations on binary strings a and b of the same length k:
Sasha became interested in the following: if we consider the string a=slsl+1\xe2\x80\xa6sr and the string b=tltl+1\xe2\x80\xa6tr, what is the maximum number of 1 characters in the string a that can be obtained using the computing machine. Since Sasha is very curious but lazy, it is up to you to answer this question for several pairs (li,ri) that interest him.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the strings s and t.
The second line of each test case contains a binary string s of length n, consisting of the characters 0 and 1.
The third line of each test case contains a binary string t of length n, consisting of the characters 0 and 1.
The fourth line of each test case contains a single integer q (1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of queries.
The i-th of the following lines contains two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n) \xe2\x80\x94 the boundaries of the i-th pair of substrings that interest Sasha.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105 and the sum of q over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output q integers \xe2\x80\x94 the answers to all queries.
In the first test case: 
In the second test case: " "2000  x3829"
    
1978D Elections "data structures, greedy, implementation, math" "Elections are taking place in Berland. There are n candidates participating in the elections, numbered from 1 to n. The i-th candidate has ai fans who will vote for him. Additionally, there are c people who are undecided about their favorite candidate, let\'s call them undecided. Undecided people will vote for the candidate with the lowest number.
The candidate who receives the maximum number of votes wins the elections, and if multiple candidates receive the same maximum number of votes, the candidate with the lowest number among them wins.
You found these elections too boring and predictable, so you decided to exclude some candidates from them. If you do not allow candidate number i to participate in the elections, all ai of his fans will become undecided, and will vote for the candidate with the lowest number.
You are curious to find, for each i from 1 to n, the minimum number of candidates that need to be excluded from the elections for candidate number i to win the elections.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and c (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4c\xe2\x89\xa4109) \xe2\x80\x94 the number of candidates in the elections and the number of undecided people.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the number of fans for each candidate.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output n integers, the i-th of which should be equal to the minimum number of candidates that need to be excluded from the elections for candidate number i to win.
In the first test case: 
In the second test case, candidate number 1 will win if candidate number 2 is not allowed to participate." "1600  x11329"
    
1978C "Manhattan Permutations" "constructive algorithms, data structures, greedy, implementation, math" "Let\'s call the Manhattan value of a permutation\xe2\x80\xa0 p the value of the expression |p1\xe2\x88\x921|+|p2\xe2\x88\x922|+\xe2\x80\xa6+|pn\xe2\x88\x92n|.
For example, for the permutation [1,2,3], the Manhattan value is |1\xe2\x88\x921|+|2\xe2\x88\x922|+|3\xe2\x88\x923|=0, and for the permutation [3,1,2], the Manhattan value is |3\xe2\x88\x921|+|1\xe2\x88\x922|+|2\xe2\x88\x923|=2+1+1=4.
You are given integers n and k. Find a permutation p of length n such that its Manhattan value is equal to k, or determine that no such permutation exists.
\xe2\x80\xa0A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105,0\xe2\x89\xa4k\xe2\x89\xa41012) \xe2\x80\x94 the length of the permutation and the required Manhattan value.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, if there is no suitable permutation, output ""No"". Otherwise, in the first line, output ""Yes"", and in the second line, output n distinct integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n) \xe2\x80\x94 a suitable permutation.
If there are multiple solutions, output any of them.
You can output the answer in any case (for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as a positive answer).
In the first test case, the permutation [3,1,2] is suitable, its Manhattan value is |3\xe2\x88\x921|+|1\xe2\x88\x922|+|2\xe2\x88\x923|=2+1+1=4.
In the second test case, it can be proven that there is no permutation of length 4 with a Manhattan value of 5.
In the third test case, the permutation [1,2,3,4,5,6,7] is suitable, its Manhattan value is |1\xe2\x88\x921|+|2\xe2\x88\x922|+|3\xe2\x88\x923|+|4\xe2\x88\x924|+|5\xe2\x88\x925|+|6\xe2\x88\x926|+|7\xe2\x88\x927|=0." "1300  x14979"
    
1978B "New Bakery" "binary search, greedy, math, ternary search" "Bob decided to open a bakery. On the opening day, he baked n buns that he can sell. The usual price of a bun is a coins, but to attract customers, Bob organized the following promotion:
Note that k can be equal to 0. In this case, Bob will sell all the buns at a coins each.
Help Bob determine the maximum profit he can obtain by selling all n buns.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains three integers n, a, and b (1\xe2\x89\xa4n,a,b\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of buns, the usual price of a bun, and the price of the first bun to be sold at a modified price.
For each test case, output a single integerï¿½\xe2\x80\x94 the maximum profit that Bob can obtain.
In the first test case, it is optimal for Bob to choose k=1. Then he will sell one bun for 5 coins, and three buns at the usual price for 4 coins each. Then the profit will be 5+4+4+4=17 coins.
In the second test case, it is optimal for Bob to choose k=5. Then he will sell all the buns at the modified price and obtain a profit of 9+8+7+6+5=35 coins.
In the third test case, it is optimal for Bob to choose k=0. Then he will sell all the buns at the usual price and obtain a profit of 10\xe2\x8b\x8510=100 coins." "800  x22374"
    
1978A "Alice and Books" "constructive algorithms, greedy, sortings" "Alice has n books. The 1-st book contains a1 pages, the 2-nd book contains a2 pages, \xe2\x80\xa6, the n-th book contains an pages. Alice does the following:
Alice loves reading very much. Help her find the maximum total number of pages she can read by dividing the books into two piles.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4500) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4100) \xe2\x80\x94 the number of books Alice has.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109) \xe2\x80\x94 the number of pages in each book.
For each test case, output a single integer \xe2\x80\x94 the maximum number of pages Alice can read.
In the first test case, Alice can put book number 1 in the first pile, and book number 2 in the second pile. Then she will read a1+a2=1+1=2 pages.
In the second test case, Alice can put books with numbers 2 and 3 in the first pile, and books with numbers 1 and 4 in the second pile. Then she will read the book with the highest number 3 from the first pile, and the book with the highest number 4 from the second pile. Then she will read a3+a4=3+1=4 pages." "800  x25706"
    
1977E Tensor "constructive algorithms, graphs, interactive" "This is an interactive problem.
You are given an integer nn.
The jury has hidden from you a directed graph with nn vertices (numbered from 11 to nn) and some number of edges. You additionally know that: 
You want to color each vertex in either black or white such that for any two vertices ii and jj (1\xe2\x89\xa4i<j\xe2\x89\xa4n1\xe2\x89\xa4i<j\xe2\x89\xa4n) of the same color, vertex ii is reachable from vertex jj.
To do that, you can ask queries of the following type: 
Find any valid vertex coloring of the hidden graph in at most 2\xe2\x8b\x85n2\xe2\x8b\x85n queries. It can be proven that such a coloring always exists.
Note that the grader is not adaptive: the graph is fixed before any queries are made.
\xe2\x80\xa0\xe2\x80\xa0 Vertex aa is reachable from vertex bb if there exists a path from vertex bb to vertex aa in the graph.
Each test contains multiple test cases. The first line of input contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains a single integer nn (3\xe2\x89\xa4n\xe2\x89\xa41003\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of vertices in the hidden graph.
It is guaranteed that the sum of nn over all test cases does not exceed 10001000.
The interaction for each test case begins by reading the integer nn.
To make a query, output ""? i j"" without quotes (1\xe2\x89\xa4i<j\xe2\x89\xa4n1\xe2\x89\xa4i<j\xe2\x89\xa4n). If vertex ii is reachable from vertex jj, you will get YES as an answer. Otherwise, you will get NO as an answer.
If you receive the integer \xe2\x88\x921\xe2\x88\x921 instead of an answer or a valid value of nn, it means your program has made an invalid query, has exceeded the limit of queries, or has given an incorrect answer on the previous test case. Your program must terminate immediately to receive a Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
When you are ready to give the final answer, output ""! c1ï¿½c2ï¿½\xe2\x80\xa6ï¿½cnc1ï¿½c2ï¿½\xe2\x80\xa6ï¿½cn"" without quotesï¿½\xe2\x80\x94 the colors of the vertices, where ci=0ci=0 if the vertex is black, and ci=1ci=1 if the vertex is white. After solving all test cases, your program should be terminated immediately.
After printing a query, do not forget to output an end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: 
Hacks
To hack, use the following format:
The first line contains an integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers nn and mm (3\xe2\x89\xa4n\xe2\x89\xa41003\xe2\x89\xa4n\xe2\x89\xa4100, 0\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x8b\x85(n\xe2\x88\x921)20\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x8b\x85(n\xe2\x88\x921)2)ï¿½\xe2\x80\x94 the number of vertices and edges in the graph.
Each of the following mm lines should contain two integers aa and bb (1\xe2\x89\xa4b<a\xe2\x89\xa4n1\xe2\x89\xa4b<a\xe2\x89\xa4n), indicating that there is the edge a\xe2\x86\x92ba\xe2\x86\x92b in the graph. The graph should satisfy the conditions above.
The sum of nn over all test cases should not exceed 10001000.
The hidden graph in the first test case: 
The hidden graph in the second test case: 
The interaction happens as follows:


Note that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction." "2600  x684"
    
1977D XORificator "bitmasks, brute force, greedy, hashing" "You are given a binary (consisting only of 0s and 1s) n\xc3\x97m matrix. You are also given a XORificator, using which you can invert all the values in a chosen row (i.e. replace 0 with 1 and 1 with 0).
A column in the matrix is considered special if it contains exactly one 1. Your task is to find the maximum number of columns that can be made special at the same time, and the set of rows the XORificator should be used on to achieve that.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa43\xe2\x8b\x85105, n\xe2\x8b\x85m\xe2\x89\xa43\xe2\x8b\x85105).
Each of the following n lines of the test case contains a binary string of length m.
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output two lines.
In the first line, output the maximum number of special columns that is possible to get simultaneously.
In the second line, output a binary string of length n, where the i-th character is 0, if you don\'t use the XORificator on the i-th row, and 1, if you use the XORificator on the i-th row.
If there are multiple valid XORificator configurations that achieve the optimal answer, you can output any of them.
In the first test case, you can use the XORificator on the second row to make the columns 2, 3, and 4 special.
In the second test case, the only column is already special, so you don\'t need to use the XORificator." "2300  x1856"
    
1977C "Nikita and LCM" "brute force, data structures, dp, greedy, math, number theory, sortings" "Nikita is a student passionate about number theory and algorithms. He faces an interesting problem related to an array of numbers.
Suppose Nikita has an array of integers a of length n. He will call a subsequence\xe2\x80\xa0 of the array special if its least common multiple (LCM) is not contained in a. The LCM of an empty subsequence is equal to 0.
Nikita wonders: what is the length of the longest special subsequence of a? Help him answer this question!
\xe2\x80\xa0 A sequence b is a subsequence of a if b can be obtained from a by the deletion of several (possibly, zero or all) elements, without changing the order of the remaining elements. For example, [5,2,3] is a subsequence of [1,5,7,8,2,4,3].
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa42000)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42000)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 2000.
For each test case, output a single integerï¿½\xe2\x80\x94 the length of the longest special subsequence of a.
In the first test case, the LCM of any non-empty subsequence is contained in a, so the answer is 0.
In the second test case, we can take the subsequence [3,2,10,1], its LCM is equal to 30, which is not contained in a.
In the third test case, we can take the subsequence [2,3,6,100003], its LCM is equal to 600018, which is not contained in a." "1900  x6761"
    
1977B "Binary Colouring" "bitmasks, constructive algorithms, greedy, math" "You are given a positive integer x. Find any array of integers a0,a1,\xe2\x80\xa6,an\xe2\x88\x921 for which the following holds: 
It can be proven that under the constraints of the problem, a valid array always exists.
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains a single positive integer x (1\xe2\x89\xa4x<230).
For each test case, output two lines.
On the first line, output an integer n (1\xe2\x89\xa4n\xe2\x89\xa432)ï¿½\xe2\x80\x94 the length of the array a0,a1,\xe2\x80\xa6,an\xe2\x88\x921.
On the second line, output the array a0,a1,\xe2\x80\xa6,an\xe2\x88\x921.
If there are multiple valid arrays, you can output any of them.
In the first test case, one valid array is [1], since (1)\xe2\x8b\x8520=1.
In the second test case, one possible valid array is [0,\xe2\x88\x921,0,0,1], since (0)\xe2\x8b\x8520+(\xe2\x88\x921)\xe2\x8b\x8521+(0)\xe2\x8b\x8522+(0)\xe2\x8b\x8523+(1)\xe2\x8b\x8524=\xe2\x88\x922+16=14." "1100  x17651"
    
1977A "Little Nikita" math "The little boy Nikita was given some cubes as a present. He decided to build a tower out of them.
Initially, the tower doesn\'t have any cubes. In one move, Nikita either puts exactly 1 cube on top of the tower or removes exactly 1 cube from the top of the tower. Is it possible that after n moves, the resulting tower has exactly m cubes?
Each test contains multiple test cases. The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The only line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4100).
For each test case, output ""Yes"" (without quotes) if Nikita can obtain a tower with m cubes, and ""No"" (without quotes) otherwise.
You can output each letter in any case (lowercase or uppercase). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive answer.
In the first test case, Nikita can put 1 cube on top of the tower 3 times in a row, so the answer is ""Yes"".
In the second test case, Nikita can only end up with either a tower with no blocks or a tower with 2 blocks, so the answer is ""No""." "800  x33055"
    
1976F "Remove Bridges" "data structures, dfs and similar, dp, greedy, sortings, trees" "You are given a rooted tree, consisting of n vertices, numbered from 1 to n. Vertex 1 is the root. Additionally, the root only has one child.
You are asked to add exactly k edges to the tree (possibly, multiple edges and/or edges already existing in the tree).
Recall that a bridge is such an edge that, after you remove it, the number of connected components in the graph increases. So, initially, all edges of the tree are bridges.
After k edges are added, some original edges of the tree are still bridges and some are not anymore. You want to satisfy two conditions: 
Solve the task for all values of k from 1 to n\xe2\x88\x921 and output the smallest number of bridges.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of testcases.
The first line of each testcase contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of vertices of the tree.
Each of the next n\xe2\x88\x921 lines contain two integers v and u (1\xe2\x89\xa4v,u\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the description of the edges of the tree. It\'s guaranteed that the given edges form a valid tree.
Additional constraint on the input: the root (vertex 1) has exactly one child.
The sum of n over all testcases doesn\'t exceed 3\xe2\x8b\x85105.
For each testcase, print n\xe2\x88\x921 integers. For each k from 1 to n\xe2\x88\x921 print the smallest number of bridges that can be left after you add k edges to the tree." "2800  x589"
    
1976E "Splittable Permutations" "combinatorics, data structures, dfs and similar, greedy, math, trees" "Initially, we had one array, which was a permutation of size n (an array of size n where each integer from 1 to n appears exactly once).
We performed q operations. During the i-th operation, we did the following:
For example, suppose the initial array was [6,3,4,1,2,5], and we performed the following operations:
You are given two integers n and q, and two sequences [l1,l2,\xe2\x80\xa6,lq] and [r1,r2,\xe2\x80\xa6,rq]. A permutation of size n is called valid if we can perform q operations and produce the given sequences [l1,l2,\xe2\x80\xa6,lq] and [r1,r2,\xe2\x80\xa6,rq].
Calculate the number of valid permutations.
The first line contains two integers n and q (1\xe2\x89\xa4q<n\xe2\x89\xa43\xe2\x8b\x85105).
The second line contains q integers l1,l2,\xe2\x80\xa6,lq (1\xe2\x89\xa4li\xe2\x89\xa4n).
The third line contains q integers r1,r2,\xe2\x80\xa6,rq (1\xe2\x89\xa4ri\xe2\x89\xa4n).
Additional constraint on the input: there exists at least one permutation which can produce the given sequences [l1,l2,\xe2\x80\xa6,lq] and [r1,r2,\xe2\x80\xa6,rq].
Print one integer \xe2\x80\x94 the number of valid permutations, taken modulo 998244353." "2500  x1043"
    
1976D "Invertible Bracket Sequences" "binary search, combinatorics, data structures, divide and conquer, implementation, two pointers" "A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \'1\' and \'+\' between the original characters of the sequence. For example:
Let\'s define the inverse of the bracket sequence as follows: replace all brackets \'(\' with \')\', and vice versa (all brackets \')\' with \'(\'). For example, strings ""()(("" and "")())"" are inverses of each other.
You are given a regular bracket sequence s. Calculate the number of pairs of integers (l,r) (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4|s|) such that if you replace the substring of s from the l-th character to the r-th character (inclusive) with its inverse, s will still be a regular bracket sequence.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a non-empty regular bracket sequence; it consists only of characters \'(\' and/or \')\'.
Additional constraint on the input: the total length of the regular bracket sequences over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the number of pairs (l,r) meeting the conditions from the statement.
In the first example, there is only one pair: 
In the second example, there are no pairs.
In the third example, there are three pairs: " "2000  x4624"
    
1976C "Job Interview" "binary search, dp, greedy, implementation, two pointers" "Monocarp is opening his own IT company. He wants to hire n programmers and m testers. 
There are n+m+1 candidates, numbered from 1 to n+m+1 in chronological order of their arriving time. The i-th candidate has programming skill ai and testing skill bi (a person\'s programming skill is different from their testing skill). The skill of the team is the sum of the programming skills of all candidates hired as programmers, and the sum of the testing skills of all candidates hired as testers.
When a candidate arrives to interview, Monocarp tries to assign them to the most suitable position for them (if their programming skill is higher, then he hires them as a programmer, otherwise as a tester). If all slots for that position are filled, Monocarp assigns them to the other position.
Your task is, for each candidate, calculate the skill of the team if everyone except them comes to interview. Note that it means that exactly n+m candidates will arrive, so all n+m positions in the company will be filled.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case consists of three lines:
Additional constraint on the input: the sum of (n+m+1) over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print n+m+1 integers, where the i-th integer should be equal to the skill of the team if everyone except the i-th candidate comes to interview.
Let\'s consider the third test case of the example:" "1600  x10408"
    
1976B Increase/Decrease/Copy "greedy, implementation" "You are given two integer arrays: array a of length n and array b of length n+1.
You can perform the following operations any number of times in any order: 
Your task is to calculate the minimum number of aforementioned operations (possibly zero) required to transform the array a into the array b. It can be shown that under the constraints of the problem, it is always possible.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
Each test case consists of three lines:
Additional constraint on the input: the sum of n over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum number of operations (possibly zero) required to transform the array a into the array b.
In the first example, you can transform a into b as follows: [2]\xe2\x86\x92[2,2]\xe2\x86\x92[1,2]\xe2\x86\x92[1,3]." "1100  x22277"
    
1976A "Verify Password" "implementation, sortings, strings" "Monocarp is working on his new site, and the current challenge is to make the users pick strong passwords.
Monocarp decided that strong passwords should satisfy the following conditions: 
Note that it\'s allowed for the password to have only letters or only digits.
Monocarp managed to implement the first condition, but he struggles with the remaining ones. Can you help him to verify the passwords?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of testcases.
The first line of each testcase contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa420)ï¿½\xe2\x80\x94 the length of the password.
The second line contains a string, consisting of exactly n characters. Each character is either a lowercase Latin letter or a digit.
For each testcase, print ""YES"" if the given password is strong and ""NO"" otherwise.
In the second testcase, the letters are not sorted in the non-decreasing order.
In the fourth testcase, there is a digit that comes after a letterï¿½\xe2\x80\x94 digit \'1\' after a letter \'c\'." "800  x28608"
    
1975I "Mind Bloom" dp "Jellyfish is playing a one-player card game called ""Slay the Spire"". There are n cards in total numbered from 1 to n. The i-th card has power ci.
There is a binary string s of length n. If si=0, the i-th card is initially in the draw pile. If si=1, the i-th card is initially in Jellyfish\'s hand.
Jellyfish will repeat the following process until either her hand or the draw pile is empty. 
At the end of this process, find the probability that Jellyfish can empty the draw pile, modulo 1000000007.
Formally, let M=1000000007. It can be shown that the answer can be expressed as an irreducible fraction pq, where p and q are integers and q\xe2\x89\xa20(modM). Output the integer equal to p\xe2\x8b\x85q\xe2\x88\x921modM. In other words, output such an integer x that 0\xe2\x89\xa4x<M and x\xe2\x8b\x85q\xe2\x89\xa1p(modM).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4120)ï¿½\xe2\x80\x94 the number of cards.
The second line of each test case contains n integers c1,c2,\xe2\x80\xa6,cn (0\xe2\x89\xa4ci\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the powers of the cards. It is guaranteed that c1\xe2\x89\xa4c2\xe2\x89\xa4\xe2\x80\xa6\xe2\x89\xa4cn.
The third line of each test case contains a binary string s of length n. If si=0, the i-th card is initially in the draw pile. If si=1, the i-th card is initially in Jellyfish\'s hand.
It is guaranteed that the sum of n2 over all test cases does not exceed 1202.
For each test case, output the probability that Jellyfish can empty the draw pile modulo 1000000007.
In the first test case, Jellyfish will keep playing cards with power 1 until Jellyfish draws a card with power 0 or power 2. If Jellyfish draws a card with power 0, she will eventually empty her hand. If Jellyfish draws a card with power 2, she will eventually empty the draw pile. Since there is an equal chance of drawing 0 or 2, the answer is 12, and 2\xe2\x8b\x85500000004\xe2\x89\xa11(mod109+7)" "3500  x100"
    
1975H "378QAQ and Core" "greedy, strings" "378QAQ has a string s of length n. Define the core of a string as the substring\xe2\x80\xa0 with maximum lexicographic\xe2\x80\xa1 order.
For example, the core of ""bazoka"" is ""zoka"", and the core of ""aaa"" is ""aaa"".
378QAQ wants to rearrange the string s so that the core is lexicographically minimum. Find the lexicographically minimum possible core over all rearrangements of s.
\xe2\x80\xa0 A substring of string s is a continuous segment of letters from s. For example, ""defor"", ""code"" and ""o"" are all substrings of ""codeforces"" while ""codes"" and ""aaa"" are not.
\xe2\x80\xa1 A string p is lexicographically smaller than a string q if and only if one of the following holds: 
For example, ""code"" and ""coda"" are both lexicographically smaller than ""codeforces"" while ""codeforceston"" and ""z"" are not.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4105). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the length of string s.
The next line of each test case contains the string s of length n. The string s consists of lowercase English letters.
It is guaranteed that the sum of n over all test cases does not exceed 106.
For each test case, output the lexicographically minimum possible core over all rearrangements of s.
In the first test case, all possible rearrangements and their corresponding cores are as follows: 
So the core with the minimum lexicographic order in all rearrangement plans is ""qaq""." "3500  x116"
    
1975G "Zimpha Fan Club" "fft, greedy, math, strings" "One day, Zimpha casually came up with a problem. As a member of ""Zimpha fan club"", you decided to solve that problem.
You are given two strings s and t of length n and m, respectively. Both strings only consist of lowercase English letters, - and *.
You need to replace all occurrences of * and -, observing the following rules:
Note that you can replace two different instances of - with different characters. You can also replace each two different instances of * with different strings.
Suppose s and t have been transformed into s\xe2\x80\xb2 and t\xe2\x80\xb2. Now you\'re wondering if there\'s a replacement that makes s\xe2\x80\xb2=t\xe2\x80\xb2.
The first line of input contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85106)ï¿½\xe2\x80\x94 the length of the strings s and t, respectively.
The second line contains the string s of length n. It is guaranteed that s only consists of lowercase English letters, - and *.
The third line contains the string t of length m. It is guaranteed that t only consists of lowercase English letters, - and *.
For each test case, output ""Yes"" if there is a replacement that makes s\xe2\x80\xb2=t\xe2\x80\xb2, and output ""No"" otherwise.
You can output ""Yes"" and ""No"" in any case (for example, strings ""yEs"", ""yes"", ""Yes"" and ""YES"" will be recognized as a positive response).
In the second test case, we can transform both strings into ttklwxx. In s, - will be replaced with l. In t, * will be replaced by the empty string with the first and second - will be replaced with k and w respectively.
In the fifth test case, we can transform both strings into bulijiojioxdibuliduo." "3000  x225"
    
1975F Set "bitmasks, brute force, combinatorics, dfs and similar, divide and conquer, dp, math" "Define the binary encoding of a finite set of natural numbers T\xe2\x8a\x86{0,1,2,\xe2\x80\xa6} as f(T)=\xe2\x88\x91i\xe2\x88\x88T2i. For example, f({0,2})=20+22=5 and f({})=0. Notice that f is a bijection from all such sets to all non-negative integers. As such, f\xe2\x88\x921 is also defined.
You are given an integer n along with 2n\xe2\x88\x921 sets V1,V2,\xe2\x80\xa6,V2n\xe2\x88\x921.
Find all sets S that satisfy the following constraint: 
Due to the large input and output, both input and output will be given in terms of binary encodings of the sets.
The first line of input contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa420).
The second line of input contains 2n\xe2\x88\x921 integers v1,v2,\xe2\x80\xa6,v2n\xe2\x88\x921 (0\xe2\x89\xa4vi<2n+1)ï¿½\xe2\x80\x94 the sets Vi given in their binary encoding where Vi=f\xe2\x88\x921(vi).
The first line of output should contain an integer k indicating the number of possible S.
In the following k lines, you should output f(S) for all possible S in increasing order.
In the first test case, one possible S is f\xe2\x88\x921(3)={0,1}. All the non-empty subsets T\xe2\x8a\x86{0,1,2} and the corresponding |S\xe2\x88\xa9T|, f(T) and Vf(T) are as follows:" "2600  x829"
    
1975E "Chain Queries" "binary search, data structures, dfs and similar, implementation, trees" "You are given a tree of nn vertices numbered from 11 to nn. Initially, all vertices are colored white or black.
You are asked to perform qq queries:
After each query, you should answer whether all the black vertices form a chain. That is, there exist two black vertices such that the simple path between them passes through all the black vertices and only the black vertices. Specifically, if there is only one black vertex, they form a chain. If there are no black vertices, they do not form a chain.
Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers nn and qq (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each test case contains nn integers c1,c2,\xe2\x80\xa6,cnc1,c2,\xe2\x80\xa6,cn (ci\xe2\x88\x88{0,1}ci\xe2\x88\x88{0,1})ï¿½\xe2\x80\x94 the initial color of the vertices. cici denotes the color of vertex ii where 00 denotes the color white, and 11 denotes the color black.
Then n\xe2\x88\x921n\xe2\x88\x921 lines follow, each line contains two integers xixi and yiyi (1\xe2\x89\xa4xi,yi\xe2\x89\xa4n1\xe2\x89\xa4xi,yi\xe2\x89\xa4n), indicating an edge between vertices xixi and yiyi. It is guaranteed that these edges form a tree.
The following qq lines each contain an integer uiui (1\xe2\x89\xa4ui\xe2\x89\xa4n1\xe2\x89\xa4ui\xe2\x89\xa4n), indicating the color of vertex uiui needs to be toggled.
It is guaranteed that the sum of nn and qq over all test cases respectively does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.
For each query, output ""Yes"" if the black vertices form a chain, and output ""No"" otherwise.
You can output ""Yes"" and ""No"" in any case (for example, strings ""yEs"", ""yes"", ""Yes"" and ""YES"" will be recognized as a positive response).
In the second test case, the color of the vertices are as follows:
The initial tree: 
The first query toggles the color of vertex 44: 
The second query toggles the color of vertex 33: 
The third query toggles the color of vertex 22: 
The fourth query toggles the color of vertex 55: " "2100  x2326"
    
1975D "Paint the Tree" "brute force, dfs and similar, dp, greedy, shortest paths, trees" "378QAQ has a tree with n vertices. Initially, all vertices are white. 
There are two chess pieces called PA and PB on the tree. PA and PB are initially located on vertices a and b respectively. In one step, 378QAQ will do the following in order:
Initially, the vertex a is painted red. If a=b, the vertex a is painted blue instead. Note that both the chess pieces must be moved in each step. Two pieces can be on the same vertex at any given time.
378QAQ wants to know the minimum number of steps to paint all vertices blue.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
The second line of each test case contains two integers a and b (1\xe2\x89\xa4a,b\xe2\x89\xa4n).
Then n\xe2\x88\x921 lines follow, each line contains two integers xi and yi (1\xe2\x89\xa4xi,yi\xe2\x89\xa4n), indicating an edge between vertices xi and yi. It is guaranteed that these edges form a tree.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the minimum number of steps to paint all vertices blue.
In the first test case, 378QAQ can paint all vertices blue in the following order:" "1700  x6036"
    
1975C "Chamo and Mocha's Array" "binary search, brute force, greedy" "Mocha likes arrays, so before her departure, Chamo gave her an array a consisting of n positive integers as a gift.
Mocha doesn\'t like arrays containing different numbers, so Mocha decides to use magic to change the array. Mocha can perform the following three-step operation some (possibly, zero) times: 
Suppose a=[1,2,3,4,5] initially: 
Mocha will perform the operation until the array contains only the same number. Mocha wants to know what is the maximum possible value of this number.
\xe2\x80\xa0 The median in an array b of length m is an element that occupies position number \xe2\x8c\x8am+12\xe2\x8c\x8b after we sort the elements in non-decreasing order. For example, the median of [3,1,4,1,5] is 3 and the median of [5,25,20,24] is 20.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output the maximum value of the number.
In the first test case, a=[1,2]. Mocha can only choose the interval (l,r)=(1,2). The array will be changed to a=[1,1]. Therefore, the answer is 1.
In the second test case, Mocha can perform the following operations:
The array contains only the same number, which is 4. It can be proven that the maximum value of the final number cannot be greater than 4." "1200  x14588"
    
1975B "378QAQ and Mocha's Array" "brute force, greedy, math, sortings" "Mocha likes arrays, so before her departure, 378QAQ gave her an array a consisting of n positive integers as a gift.
Mocha thinks that a is beautiful if there exist two numbers i and j (1\xe2\x89\xa4i,j\xe2\x89\xa4n, i\xe2\x89\xa0j) such that for all k (1\xe2\x89\xa4k\xe2\x89\xa4n), ak is divisible\xe2\x80\xa0 by either ai or aj.
Determine whether a is beautiful.
\xe2\x80\xa0 x is divisible by y if there exists an integer z such that x=y\xe2\x8b\x85z.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output ""Yes"" if array a is beautiful, and output ""No"" otherwise.
You can output ""Yes"" and ""No"" in any case (for example, strings ""yEs"", ""yes"", ""Yes"" and ""YES"" will be recognized as a positive response).
In the first test case, any two numbers in the array are coprime, so the answer is ""No"".
In the second test case, we can pick i=2 and j=1. Since every number in the array is divisible by ai=1, the answer is ""Yes"".
In the third test case, we can pick i=3 and j=5. 2 and 4 is divisible by ai=2 while 3, 6 and 12 is divisible by aj=3, so the answer is ""Yes""." "1000  x17871"
    
1975A "Bazoka and Mocha's Array" "brute force, greedy, implementation, sortings" "Mocha likes arrays, so before her departure, Bazoka gave her an array a consisting of n positive integers as a gift.
Now Mocha wants to know whether array a could become sorted in non-decreasing order after performing the following operation some (possibly, zero) times:
For example, if a=[3,1,4,1,5], we can choose x=[3,1] and y=[4,1,5], satisfying a=x+y. Then, we can set a:=y+x=[4,1,5,3,1]. We can also choose x=[3,1,4,1,5] and y=[], satisfying a=x+y. Then, we can set a:=y+x=[3,1,4,1,5]. Note that we are not allowed to choose x=[3,1,1] and y=[4,5], neither are we allowed to choose x=[1,3] and y=[5,1,4], as both these choices do not satisfy a=x+y.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa41000). The description of the test cases follows.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa450)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the elements of array a.
For each test case, output ""Yes"" if a could become non-decreasing after performing the operation any number of times, and output ""No"" if not.
You can output ""Yes"" and ""No"" in any case (for example, strings ""yEs"", ""yes"", ""Yes"" and ""YES"" will be recognized as a positive response).
In the first test case, it can be proven that a cannot become non-decreasing after performing the operation any number of times.
In the second test case, we can perform the following operations to make a sorted in non-decreasing order: " "800  x18509"
    
1974G "Money Buys Less Happiness Now" "data structures, greedy, sortings" "You can never buy enough happiness, so here we go again! In this version, you can only buy hi=1 unit of happiness each month, but the number of months is hugely increased. We are in the realm of quantum happiness and time dilation.
Being a physicist, Charlie likes to plan his life in simple and precise terms. 
For the next m months, starting with no money, Charlie will work hard and earn x pounds per month. For the i-th month (1\xe2\x89\xa4i\xe2\x89\xa4m), there\'ll be a single opportunity of paying cost ci pounds to obtain one unit of happiness. You cannot buy more than one unit each month.
Borrowing is not allowed. Money earned in the i-th month can only be spent in a later j-th month (j>i).
Since physicists don\'t code, help Charlie find the maximum reachable units of happiness.
The first line of the input contains t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. 
The first line of each test case contains two integers, m and x (1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4x\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the total number of months and the monthly salary. 
The second line of each test case contains m integers c1,c2,\xe2\x80\xa6,cm (1\xe2\x89\xa4ci\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the cost of one unit of happiness for each month.
It is guaranteed that sum of m over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output one integerï¿½\xe2\x80\x94 the maximal amount of happiness Charlie can get." "2000  x4367"
    
1974F "Cutting Game" "binary search, brute force, data structures, implementation, sortings, two pointers" "Alice and Bob were playing a game again. They have a grid of size a\xc3\x97b (1\xe2\x89\xa4a,b\xe2\x89\xa4109), on which there are n chips, with at most one chip in each cell. The cell at the intersection of the x-th row and the y-th column has coordinates (x,y).
Alice made the first move, and the players took turns. On each move, a player could cut several (but not all) rows or columns from the beginning or end of the remaining grid and earn a point for each chip that was on the cut part of the grid. Each move can be described by the character \'U\', \'D\', \'L\', or \'R\' and an integer k:
Based on the initial state of the grid and the players\' moves, determine the number of points earned by Alice and Bob, respectively.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains four integers a, b, n, and m (2\xe2\x89\xa4a,b\xe2\x89\xa4109, 1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the dimensions of the grid, the number of chips, and the number of moves.
Each of the next n lines contain two integers xi and yi (1\xe2\x89\xa4xi\xe2\x89\xa4a, 1\xe2\x89\xa4yi\xe2\x89\xa4b)ï¿½\xe2\x80\x94 the coordinates of the chips. All pairs of coordinates are distinct.
Each of the next m lines contain a character cj and an integer kjï¿½\xe2\x80\x94 the description of the j-th move. It is guaranteed that k is less than the number of rows/columns in the current grid. In other words, a player cannot cut the entire remaining grid on their move.
It is guaranteed that the sum of the values of n across all test cases in the test does not exceed 2\xe2\x8b\x85105. It is guaranteed that the sum of the values of m across all test cases in the test does not exceed 2\xe2\x8b\x85105.
For each test case, output two integersï¿½\xe2\x80\x94 the number of points earned by Alice and Bob, respectively.
Below is the game from the first example:
On her turn, Alice cut 2 rows from the bottom and scored 2 points, then Bob cut 1 column from the right and scored one point. Note that if Bob had cut 1 row from the bottom, he would have also scored 1 point." "1900  x3579"
    
1974E "Money Buys Happiness" dp "Being a physicist, Charlie likes to plan his life in simple and precise terms. 
For the next m months, starting with no money, Charlie will work hard and earn x pounds per month. For the i-th month (1\xe2\x89\xa4i\xe2\x89\xa4m), there\'ll be a single opportunity of paying cost ci pounds to obtain happiness hi.
Borrowing is not allowed. Money earned in the i-th month can only be spent in a later j-th month (j>i).
Since physicists don\'t code, help Charlie find the maximum obtainable sum of happiness.
The first line of input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers, m and x (1\xe2\x89\xa4m\xe2\x89\xa450, 1\xe2\x89\xa4x\xe2\x89\xa4108)ï¿½\xe2\x80\x94 the total number of months and the monthly salary.
The i-th of the following m lines contains two integers, ci and hi (0\xe2\x89\xa4ci\xe2\x89\xa4108, 1\xe2\x89\xa4hi\xe2\x89\xa4103)ï¿½\xe2\x80\x94 the cost and happiness on offer for the i-th month. Note that some happiness may be free (ci=0 for some i\'s).
It is guaranteed that the sum of \xe2\x88\x91ihi over all test cases does not exceed 105.
For each test case, print a single integer, the maximum sum of happiness Charlie could obtain.
In the first test case, Charlie only gets paid at the end of the month, so is unable to afford anything.
In the second test case, Charlie obtains the free happiness in the first month.
In the third test case, it\'s optimal for Charlie to buy happiness in the second month. Even with money left at the end, Charlie could not go back in time to obtain the happiness on offer in the first month." "1800  x8054"
    
1974D Ingenuity-2 "constructive algorithms, greedy, implementation" "Let\'s imagine the surface of Mars as an infinite coordinate plane. Initially, the rover Perseverance-2 and the helicopter Ingenuity-2 are located at the point with coordinates (0,0)(0,0). A set of instructions ss consisting of nn instructions of the following types was specially developed for them:
Each instruction must be executed either by the rover or by the helicopter. Moreover, each device must execute at least one instruction. Your task is to distribute the instructions in such a way that after executing all nn instructions, the helicopter and the rover end up at the same point, or determine that this is impossible.
The first line of input contains tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer nn (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of instructions.
The second line of each test case contains a string ss of length nn consisting of the characters \'N\', \'S\', \'E\', \'W\'ï¿½\xe2\x80\x94 the sequence of instructions.
It is guaranteed that the sum of nn over all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.
For each test case, if the required distribution of instructions exists, output a string pp of length nn consisting of the characters \'R\', \'H\'. If the ii-th operation should be executed by the rover, then pi=Rpi=R, if the ii-th operation should be executed by the helicopter, then pi=Hpi=H. If there are multiple solutions, output any of them.
Otherwise, output NO.
Let\'s consider the first example: the string S=NENSNES=NENSNE. One of the possible solutions, shown in the figure below, is p=RRHRRHp=RRHRRH, using which both the rover and the helicopter will end up one meter north and one meter east.
For WWW, the solution is impossible." "1400  x14838"
    
1974C "Beautiful Triple Pairs" "combinatorics, data structures" "Polycarp was given an array a of n integers. He really likes triples of numbers, so for each j (1\xe2\x89\xa4j\xe2\x89\xa4n\xe2\x88\x922) he wrote down a triple of elements [aj,aj+1,aj+2].
Polycarp considers a pair of triples b and c beautiful if they differ in exactly one position, that is, one of the following conditions is satisfied:
Find the number of beautiful pairs of triples among the written triples [aj,aj+1,aj+2].
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of the values of n for all test cases in the test does not exceed 2\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of beautiful pairs of triples among the pairs of the form [aj,aj+1,aj+2].
Note that the answer may not fit into 32-bit data types.
In the first example, a=[3,2,2,2,3], Polycarp will write the following triples: 
In the third example, a=[1,2,3,2,2,3,4,2], Polycarp will write the following triples: " "1400  x15796"
    
1974B "Symmetric Encoding" "implementation, sortings, strings" "Polycarp has a string s, which consists of lowercase Latin letters. He encodes this string using the following algorithm:
For example, encoding the string s=""codeforces"" happens as follows:
Thus, the result of encoding the string s=""codeforces"" is the string ""serofedsoc"".
Write a program that performs decoding \xe2\x80\x94 that is, restores the original string s from the encoding result.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the string b.
The second line of each test case contains a string b of length n, consisting of lowercase Latin letters \xe2\x80\x94 the result of encoding the original string s.
It is guaranteed that the sum of the values of n over all test cases in the test does not exceed 2\xe2\x8b\x85105.
For each test case, output the string s from which the encoding result b was obtained." "800  x30278"
    
1974A "Phone Desktop" "greedy, math" "Little Rosie has a phone with a desktop (or launcher, as it is also called). The desktop can consist of several screens. Each screen is represented as a grid of size 5\xc3\x9735\xc3\x973, i.e., five rows and three columns.
There are xx applications with an icon size of 1\xc3\x9711\xc3\x971 cells; such an icon occupies only one cell of the screen. There are also yy applications with an icon size of 2\xc3\x9722\xc3\x972 cells; such an icon occupies a square of 44 cells on the screen. Each cell of each screen can be occupied by no more than one icon.
Rosie wants to place the application icons on the minimum number of screens. Help her find the minimum number of screens needed.
The first line of the input contains tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. 
The first and only line of each test case contains two integers xx and yy (0\xe2\x89\xa4x,y\xe2\x89\xa4990\xe2\x89\xa4x,y\xe2\x89\xa499)ï¿½\xe2\x80\x94 the number of applications with a 1\xc3\x9711\xc3\x971 icon and the number of applications with a 2\xc3\x9722\xc3\x972 icon, respectively.
For each test case, output the minimal number of required screens on a separate line.
The solution for the first test case can look as follows:
The solution for the third test case can look as follows:" "800  x33258"
    
1973F "Maximum GCD Sum Queries" "bitmasks, brute force, dp, implementation, number theory" "For k positive integers x1,x2,\xe2\x80\xa6,xk, the value gcd(x1,x2,\xe2\x80\xa6,xk) is the greatest common divisor of the integers x1,x2,\xe2\x80\xa6,xkï¿½\xe2\x80\x94 the largest integer z such that all the integers x1,x2,\xe2\x80\xa6,xk are divisible by z.
You are given three arrays a1,a2,\xe2\x80\xa6,an, b1,b2,\xe2\x80\xa6,bn and c1,c2,\xe2\x80\xa6,cn of length n, containing positive integers. 
You also have a machine that allows you to swap ai and bi for any i (1\xe2\x89\xa4i\xe2\x89\xa4n). Each swap costs you ci coins.
Find the maximum possible value of gcd(a1,a2,\xe2\x80\xa6,an)+gcd(b1,b2,\xe2\x80\xa6,bn) that you can get by paying in total at most d coins for swapping some elements. The amount of coins you have changes a lot, so find the answer to this question for each of the q possible values d1,d2,\xe2\x80\xa6,dq.
There are two integers on the first lineï¿½\xe2\x80\x94 the numbers n and q (1\xe2\x89\xa4n\xe2\x89\xa45\xe2\x8b\x85105, 1\xe2\x89\xa4q\xe2\x89\xa45\xe2\x8b\x85105).
On the second line, there are n integersï¿½\xe2\x80\x94 the numbers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4108).
On the third line, there are n integersï¿½\xe2\x80\x94 the numbers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4108).
On the fourth line, there are n integersï¿½\xe2\x80\x94 the numbers c1,c2,\xe2\x80\xa6,cn (1\xe2\x89\xa4ci\xe2\x89\xa4109).
On the fifth line, there are q integersï¿½\xe2\x80\x94 the numbers d1,d2,\xe2\x80\xa6,dq (0\xe2\x89\xa4di\xe2\x89\xa41015).
Print q integersï¿½\xe2\x80\x94 the maximum value you can get for each of the q possible values d.
In the first query of the first example, we are not allowed to do any swaps at all, so the answer is gcd(1,2,3)+gcd(4,5,6)=2. In the second query, one of the ways to achieve the optimal value is to swap a2 and b2, then the answer is gcd(1,5,3)+gcd(4,2,6)=3.
In the second query of the second example, it\'s optimal to perform swaps on positions 1 and 3, then the answer is gcd(3,3,6,9,3)+gcd(8,4,4,8,4)=7 and we have to pay 40 coins in total." "3100  x229"
    
1973E "Cat, Fox and Swaps" "graphs, math, sortings" "Fox has found an array p1,p2,\xe2\x80\xa6,pn, that is a permutation of length n\xe2\x80\xa0 of the numbers 1,2,\xe2\x80\xa6,n. She wants to sort the elements in increasing order. Cat wants to help her \xe2\x80\x94 he is able to swap any two numbers x and y in the array, but only if l\xe2\x89\xa4x+y\xe2\x89\xa4r (note that the constraint is imposed on the values of the elements, not their positions). He can make such swaps any number of times.
They don\'t know the numbers l, r yet, they only know that it\'s true that 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa42\xe2\x8b\x85n. 
You are given the number n and the array p1,p2,\xe2\x80\xa6,pn. Determine how many pairs (l,r) satisfying the conditions are there such that you can sort the permutation if you can only swap two number (x,y) such that l\xe2\x89\xa4x+y\xe2\x89\xa4r (arbitrary number of times, possibly 0).
\xe2\x80\xa0 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
Description of each test case consists of two lines. The first line contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa4105).
The second line contains n integers: the array p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n). It is guaranteed that this array is a permutation of length n. 
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, print the number of pairs of integers (l,r) such that 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa42\xe2\x8b\x85n, and you can sort the array under the constraints.
In the first example, we need to be able to swap 1 and 2, so we must be able to swap numbers with sum 3. There are exactly 6 pairs satisfying the condition: (1,3),(2,3),(3,3),(1,4),(2,4) and (3,4), so the answer is 6.
In the second example, the 11 pairs satisfying the condition are (1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6),(4,5) and (4,6). For example, if we pick the pair (3,4) we can first swap the numbers 1 and 2 and then the numbers 1 and 3, after this, the permutation is sorted." "2500  x800"
    
1973D "Cat, Fox and Maximum Array Split" "brute force, interactive, math" "This is an interactive problem.
Fox gave Cat two positive integers n and k. She has a hidden array a1,\xe2\x80\xa6,an of length n, such that 1\xe2\x89\xa4ai\xe2\x89\xa4n for every i. Now they are going to play the following game:
For any two integers l,r such that 1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n, define f(l,r)=(r\xe2\x88\x92l+1)\xe2\x8b\x85rmaxx=lax. In other words, f(l,r) is equal to the maximum of the subarray al,\xe2\x80\xa6,ar multiplied by its size.
Cat can ask Fox at most 2n questions about the array. He will tell her two integers l and x (1\xe2\x89\xa4l\xe2\x89\xa4n,1\xe2\x89\xa4x\xe2\x89\xa4109), and she will tell him one integer p as the answer \xe2\x80\x94 the smallest positive integer r such that f(l,r)=x, or n+1 if no such r exists.
Now, Cat needs to find the largest value m such that there exists a sequence c1,\xe2\x80\xa6,ck\xe2\x88\x921 such that 1\xe2\x89\xa4c1<\xe2\x80\xa6<ck\xe2\x88\x921<n and f(1,c1)=f(c1+1,c2)=\xe2\x80\xa6=f(ck\xe2\x88\x921+1,n)=m. If no such m exists, he should indicate this and take \xe2\x88\x921 as the answer. Note that for k=1, m is always equal to f(1,n).
In other words, the goal is to find the largest m such that you can split the array into exactly k subarrays (k is the constant given to you in the beginning of the interaction) so that all the subarrays have the product of their length and their maximum equal to m, or determine that no such m exists. Every element should belong in exactly one of the subarrays.
Cat doesn\'t know what he should do, so he asked you to play the game for him.
Each test contains multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4103) \xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two positive integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa4104) \xe2\x80\x94 the length of the hidden array and the number of subarrays in the desired split.
Now you are allowed to make queries in the following way \xe2\x80\x94 print one line of the form ""?ï¿½lï¿½x"" (it must hold that 1\xe2\x89\xa4l\xe2\x89\xa4n, 1\xe2\x89\xa4x\xe2\x89\xa4109) and you will receive the smallest integer r such that l\xe2\x89\xa4r\xe2\x89\xa4n and f(l,r)=x, or n+1 if no such r exists. 
If you want to print the answer, output ""!ï¿½m"" and you will recieve 1 if your answer is correct and \xe2\x88\x921 otherwise. In the first case, the interaction continues with the next test case. Note that printing the answer doesn\'t count towards the number of queries made. Please note that you don\'t receive the values for the next test case immediately, you will first have to read whether your answer to the last test case was correct. 
If you receive the integer \xe2\x88\x921 at any moment, it means your program has made an invalid query, exceeded the query limit, or gave an incorrect answer. Your program must terminate immediately to receive a Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream. 
After printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:
It is guaranteed that the total sum of n over the test cases won\'t exceed 104.
Hacks
The format of the hacks should be the following: the first line should contain one integer t (1\xe2\x89\xa4t\xe2\x89\xa4103) \xe2\x80\x94 the number of test cases. The description of the test cases should follow.
The first line of each test case should contain two integers n and k (1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa4104) \xe2\x80\x94 the length of the array a and the number of subarrays you want to split it into.
The second line should contain n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n). 
The sum of n over all test cases should not exceed 104.
The hidden arrays in the three testcases are [1], [1,2] and [1,3,6,1,2,1]. In the second testcase, no split satisfies the constraints, so the answer is \xe2\x88\x921. 
The answer for the first query of the third testcase is 7 since no valid r exists. For the second query of the third testcase, since 2\xe2\x8b\x85max(1,3)=6, we will get 2 as the answer, since r=1 doesn\'t satisfy the constraint.
The sample interaction guessed all three answers (1,\xe2\x88\x921 and 6) correctly, so it received 1 after each answer." "2400  x1915"
    
1973C "Cat, Fox and Double Maximum" "constructive algorithms, greedy, implementation, math, sortings" "Fox loves permutations! She came up with the following problem and asked Cat to solve it:
You are given an even positive integer n and a permutation\xe2\x80\xa0 p of length n. 
The score of another permutation q of length n is the number of local maximums in the array a of length n, where ai=pi+qi for all i (1\xe2\x89\xa4i\xe2\x89\xa4n). In other words, the score of q is the number of i such that 1<i<n (note the strict inequalities), ai\xe2\x88\x921<ai, and ai>ai+1 (once again, note the strict inequalities). 
Find the permutation q that achieves the maximum score for given n and p. If there exist multiple such permutations, you can pick any of them.
\xe2\x80\xa0 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
The first line of input contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases in the input you will have to solve.
The first line of each test case contains one even integer n (4\xe2\x89\xa4n\xe2\x89\xa4105, n is even)ï¿½\xe2\x80\x94 the length of the permutation p.
The second line of each test case contains the n integers p1,p2,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n). It is guaranteed that p is a permutation of length n.
It is guaranteed that the sum of n across all test cases doesn\'t exceed 105.
For each test case, output one line containing any permutation of length n (the array q), such that q maximizes the score under the given constraints.
In the first example, a=[3,6,4,7]. The array has just one local maximum (on the second position), so the score of the chosen permutation q is 1. It can be proven that this score is optimal under the constraints.
In the last example, the resulting array a=[6,6,12,7,14,7,14,6] has 3 local maximumsï¿½\xe2\x80\x94 on the third, fifth and seventh positions. " "1700  x8382"
    
1973B "Cat, Fox and the Lonely Array" "binary search, bitmasks, data structures, greedy, math, two pointers" "Today, Cat and Fox found an array a consisting of n non-negative integers. 
Define the loneliness of a as the smallest positive integer k (1\xe2\x89\xa4k\xe2\x89\xa4n) such that for any two positive integers i and j (1\xe2\x89\xa4i,j\xe2\x89\xa4n\xe2\x88\x92k+1), the following holds: ai|ai+1|\xe2\x80\xa6|ai+k\xe2\x88\x921=aj|aj+1|\xe2\x80\xa6|aj+k\xe2\x88\x921, where x|y denotes the bitwise OR of x and y. In other words, for every k consecutive elements, their bitwise OR should be the same. Note that the loneliness of a is well-defined, because for k=n the condition is satisfied.
Cat and Fox want to know how lonely the array a is. Help them calculate the loneliness of the found array.
Each test consists of multiple test cases. The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the length of the array a.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai<220)ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of n over all test cases doesn\'t exceed 105.
For each test case, print one integer ï¿½\xe2\x80\x94 the loneliness of the given array.
In the first example, the loneliness of an array with a single element is always 1, so the answer is 1. 
In the second example, the OR of each subarray of length k=1 is 2, so the loneliness of the whole array is 1.
In the seventh example, it\'s true that (0|1|3)=(1|3|2)=(3|2|2)=(2|2|1)=(2|1|0)=(1|0|3)=3, so the condition is satisfied for k=3. We can verify that the condition is not true for any smaller k, so the answer is indeed 3." "1300  x14125"
    
1973A "Chess For Three" "brute force, dp, implementation, math" "Three friends gathered to play a few games of chess together.
In every game, two of them play against each other. The winner gets 2 points while the loser gets 0, and in case of a draw, both players get 1 point each. Note that the same pair of players could have played any non-negative number of times (possibly zero). It is also possible that no games were played at all. 
You\'ve been told that their scores after all the games were played were p1, p2 and p3. Additionally, it is guaranteed that p1\xe2\x89\xa4p2\xe2\x89\xa4p3 holds.
Find the maximum number of draws that could have happened and print it. If there isn\'t any way to obtain p1, p2 and p3 as a result of a non-negative number of games between the three players, print \xe2\x88\x921 instead.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of the test cases follows.
The first line of each test case contains three integers p1, p2 and p3 (0\xe2\x89\xa4p1\xe2\x89\xa4p2\xe2\x89\xa4p3\xe2\x89\xa430) \xe2\x80\x94 the scores of the three players, sorted non-decreasingly.
For each testcase, print one number \xe2\x80\x94 the maximum possible number of draws that could\'ve happened, or \xe2\x88\x921 if the scores aren\'t consistent with any valid set of games and results.
In the first example, no games were played at all, so no draws could occur either.
For the second example, exactly one game occurred between the second and the third player and it ended in draw, so the answer is 1.
It\'s easy to see that there\'s no set of games achieving the scores in third example, so the answer for it is \xe2\x88\x921." "900  x24572"
    
1972B "Coin Games" games "There are n coins on the table forming a circle, and each coin is either facing up or facing down. Alice and Bob take turns to play the following game, and Alice goes first.
In each operation, the player chooses a facing-up coin, removes the coin, and flips the two coins that are adjacent to it. If (before the operation) there are only two coins left, then one will be removed and the other won\'t be flipped (as it would be flipped twice). If (before the operation) there is only one coin left, no coins will be flipped. If (before the operation) there are no facing-up coins, the player loses.
Decide who will win the game if they both play optimally. It can be proved that the game will end in a finite number of operations, and one of them will win.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains only one positive integer n (1\xe2\x89\xa4n\xe2\x89\xa4100), representing the number of the coins.
A string s of length n follows on the second line of each test case, containing only ""U"" and ""D"", representing that each coin is facing up or facing down.
For each test case, print ""YES"" if Alice will win the game, and ""NO"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first test case, the game may go as follows.
It can be proved that Bob will always lose if they both play optimally." "900  x21638"
    
1972A "Contest Proposal" "brute force, greedy, two pointers" "A contest contains n problems and the difficulty of the i-th problem is expected to be at most bi. There are already n problem proposals and the difficulty of the i-th problem is ai. Initially, both a1,a2,\xe2\x80\xa6,an and b1,b2,\xe2\x80\xa6,bn are sorted in non-decreasing order.
Some of the problems may be more difficult than expected, so the writers must propose more problems. When a new problem with difficulty w is proposed, the most difficult problem will be deleted from the contest, and the problems will be sorted in a way that the difficulties are non-decreasing.
In other words, in each operation, you choose an integer w, insert it into the array a, sort array a in non-decreasing order, and remove the last element from it.
Find the minimum number of new problems to make ai\xe2\x89\xa4bi for all i.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains only one positive integer n (1\xe2\x89\xa4n\xe2\x89\xa4100), representing the number of problems.
The second line of each test case contains an array a of length n (1\xe2\x89\xa4a1\xe2\x89\xa4a2\xe2\x89\xa4\xe2\x8b\xaf\xe2\x89\xa4an\xe2\x89\xa4109).
The third line of each test case contains an array b of length n (1\xe2\x89\xa4b1\xe2\x89\xa4b2\xe2\x89\xa4\xe2\x8b\xaf\xe2\x89\xa4bn\xe2\x89\xa4109).
For each test case, print an integer as your answer in a new line.
In the first test case:
It can be proved that it\'s impossible to reach the goal by proposing fewer new problems.
In the second test case:
It can be proved that it\'s impossible to reach the goal by proposing fewer new problems." "800  x22968"
    
1971H ï¿½1 "2-sat, dfs and similar, graphs" "Bob has a grid with 3 rows and n columns, each of which contains either ai or \xe2\x88\x92ai for some integer 1\xe2\x89\xa4i\xe2\x89\xa4n. For example, one possible grid for n=4 is shown below:
[a1\xe2\x88\x92a2\xe2\x88\x92a3\xe2\x88\x92a2\xe2\x88\x92a4a4\xe2\x88\x92a1\xe2\x88\x92a3a1a2\xe2\x88\x92a2a4]
Alice and Bob play a game as follows: 
For example, suppose Alice gives Bob the array [1,\xe2\x88\x921,\xe2\x88\x921,1] for the grid above. Then the following will happen (colors are added for clarity):
[a1\xe2\x88\x92a2\xe2\x88\x92a3\xe2\x88\x92a2\xe2\x88\x92a4a4\xe2\x88\x92a1\xe2\x88\x92a3a1a2\xe2\x88\x92a2a4][1,\xe2\x88\x921,\xe2\x88\x921,1]\xe2\x86\x92[1111\xe2\x88\x9211\xe2\x88\x92111\xe2\x88\x92111]sort each column\xe2\x86\x92[\xe2\x88\x921\xe2\x88\x921\xe2\x88\x921111111111]. Since the middle row is all 1, Alice wins.
Given Bob\'s grid, determine whether or not Alice can choose the array a to win the game.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of columns of Bob\'s grid.
The next three lines each contain n integers, the i-th of which contains gi,1,gi,2,\xe2\x80\xa6,gi,n (\xe2\x88\x92n\xe2\x89\xa4gi,j\xe2\x89\xa4n, gi,j\xe2\x89\xa00), representing Bob\'s grid. 
If cell x>0 is in the input, that cell in Bob\'s grid should contain ax; if x<0 is in the input, that cell in Bob\'s grid should contain \xe2\x88\x92a\xe2\x88\x92x. See the sample input and notes for a better understanding.
For each test case, output ""YES"" (without quotes) if Alice can win, and ""NO"" (without quotes) otherwise.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yEs"", ""yes"", and ""Yes"" will be recognized as a positive response).
The first test case is described in the statement.
In the second test case, Bob\'s grid is as follows:
[a1a2\xe2\x88\x92a1\xe2\x88\x92a2a2\xe2\x88\x92a2]
For the last column to have 1 in the middle row when sorted, Alice must pick a2=\xe2\x88\x921. However, it is then impossible to choose a1 such that the first column has 1 in the middle when sorted. Thus, Alice cannot win.
In the third test case, Alice can pick a=[1,1,1,1,1]." "2100  x1849"
    
1971G XOUR "data structures, dsu, sortings" "You are given an array a consisting of n nonnegative integers. 
You can swap the elements at positions i and j if aiï¿½XORï¿½aj<4, where XOR is the bitwise XOR operation.
Find the lexicographically smallest array that can be made with any number of swaps.
An array x is lexicographically smaller than an array y if in the first position where x and y differ, xi<yi.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the array.
The second line of each test case contains n integers ai (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of the array.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output n integersï¿½\xe2\x80\x94 the lexicographically smallest array that can be made with any number of swaps.
For the first test case, you can swap any two elements, so we can produce the sorted array.
For the second test case, you can swap 2 and 1 (their XOR is 3), 7 and 5 (their XOR is 2), and 7 and 6 (their XOR is 1) to get the lexicographically smallest array." "1700  x9294"
    
1971F "Circle Perimeter" "binary search, brute force, dfs and similar, geometry, implementation, math" "Given an integer rr, find the number of lattice points that have a Euclidean distance from (0,0)(0,0) greater than or equal to rr but strictly less than r+1r+1.
A lattice point is a point with integer coordinates. The Euclidean distance from (0,0)(0,0) to the point (x,y)(x,y) is x2+y2\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x9ax2+y2.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single integer rr (1\xe2\x89\xa4r\xe2\x89\xa41051\xe2\x89\xa4r\xe2\x89\xa4105).
The sum of rr over all test cases does not exceed 105105.
For each test case, output a single integerï¿½\xe2\x80\x94 the number of lattice points that have an Euclidean distance dd from (0,0)(0,0) such that r\xe2\x89\xa4d<r+1r\xe2\x89\xa4d<r+1.
The points for the first three test cases are shown below. " "1600  x10017"
    
1971E "Find the Car" "binary search, math, sortings" "Timur is in a car traveling on the number line from point 00 to point nn. The car starts moving from point 00 at minute 00.
There are k+1k+1 signs on the line at points 0,a1,a2,\xe2\x80\xa6,ak0,a1,a2,\xe2\x80\xa6,ak, and Timur knows that the car will arrive there at minutes 0,b1,b2,\xe2\x80\xa6,bk0,b1,b2,\xe2\x80\xa6,bk, respectively. The sequences aa and bb are strictly increasing with ak=nak=n.
Between any two adjacent signs, the car travels with a constant speed. Timur has qq queries: each query will be an integer dd, and Timur wants you to output how many minutes it takes the car to reach point dd, rounded down to the nearest integer.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers nn, kk, and qq, (k\xe2\x89\xa4n\xe2\x89\xa4109k\xe2\x89\xa4n\xe2\x89\xa4109; 1\xe2\x89\xa4k,q\xe2\x89\xa41051\xe2\x89\xa4k,q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the final destination, the number of points Timur knows the time for, and the number of queries respectively.
The second line of each test case contains kk integers aiai (1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n; ai<ai+1ai<ai+1 for every 1\xe2\x89\xa4i\xe2\x89\xa4k\xe2\x88\x9211\xe2\x89\xa4i\xe2\x89\xa4k\xe2\x88\x921; ak=nak=n). 
The third line of each test case contains kk integers bibi (1\xe2\x89\xa4bi\xe2\x89\xa41091\xe2\x89\xa4bi\xe2\x89\xa4109; bi<bi+1bi<bi+1 for every 1\xe2\x89\xa4i\xe2\x89\xa4k\xe2\x88\x9211\xe2\x89\xa4i\xe2\x89\xa4k\xe2\x88\x921).
Each of the following qq lines contains a single integer dd (0\xe2\x89\xa4d\xe2\x89\xa4n0\xe2\x89\xa4d\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the distance that Timur asks the minutes passed for.
The sum of kk over all test cases doesn\'t exceed 105105, and the sum of qq over all test cases doesn\'t exceed 105105.
For each query, output a single integerï¿½\xe2\x80\x94 the number of minutes passed until the car reaches the point dd, rounded down.
For the first test case, the car goes from point 00 to point 1010 in 1010 minutes, so the speed is 11 unit per minute and:
For the second test case, between points 00 and 44, the car travels at a speed of 11 unit per minute and between 44 and 1010 with a speed of 22 units per minute and:
For the fourth test case, the car travels with 1.21.2 units per minute, so the answers to the queries are:" "1500  x14327"
    
1971D "Binary Cut" "dp, greedy, implementation, sortings, strings" "You are given a binary string\xe2\x80\xa0\xe2\x80\xa0. Please find the minimum number of pieces you need to cut it into, so that the resulting pieces can be rearranged into a sorted binary string.
Note that: 
\xe2\x80\xa0\xe2\x80\xa0 A binary string is a string consisting of characters 00 and 11. A sorted binary string is a binary string such that all characters 00 come before all characters 11.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa45001\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single string ss (1\xe2\x89\xa4|s|\xe2\x89\xa45001\xe2\x89\xa4|s|\xe2\x89\xa4500) consisting of characters 00 and 11, where |s||s| denotes the length of the string ss.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of pieces needed to be able to rearrange the string into a sorted binary string.
The first test case is pictured in the statement. It can be proven that you can\'t use fewer than 33 pieces.
In the second and third test cases, the binary string is already sorted, so only 11 piece is needed.
In the fourth test case, you need to make a single cut between the two characters and rearrange them to make the string 0101." "1100  x25935"
    
1971C "Clock and Strings" implementation "There is a clock labeled with the numbers 1 through 12 in clockwise order, as shown below.
In this example, (a,b,c,d)=(2,9,10,6), and the strings intersect. 
Alice and Bob have four distinct integers a, b, c, d not more than 12. Alice ties a red string connecting a and b, and Bob ties a blue string connecting c and d. Do the strings intersect? (The strings are straight line segments.)
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa45940)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains four distinct integers a, b, c, d (1\xe2\x89\xa4a,b,c,d\xe2\x89\xa412).
For each test case, output ""YES"" (without quotes) if the strings intersect, and ""NO"" (without quotes) otherwise.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yEs"", ""yes"", and ""Yes"" will be recognized as a positive response).
The first test case is pictured in the statement.
In the second test case, the strings do not intersect, as shown below. " "900  x33100"
    
1971B "Different String" "implementation, strings" "You are given a string s consisting of lowercase English letters.
Rearrange the characters of s to form a new string r that is not equal to s, or report that it\'s impossible.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a string s of length at most 10 consisting of lowercase English letters.
For each test case, if no such string r exists as described in the statement, output ""NO"" (without quotes).
Otherwise, output ""YES"" (without quotes). Then, output one lineï¿½\xe2\x80\x94 the string r, consisting of letters of string s.
You can output ""YES"" and ""NO"" in any case (for example, strings ""yEs"", ""yes"", and ""Yes"" will be recognized as a positive response).
If multiple answers are possible, you can output any of them.
In the first test case, another possible answer is forcescode.
In the second test case, all rearrangements of aaaaa are equal to aaaaa." "800  x37006"
    
1971A "My First Sorting Problem" "implementation, sortings" "You are given two integers x and y. 
Output two integers: the minimum of x and y, followed by the maximum of x and y.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains two space-separated integers x and y (0\xe2\x89\xa4x,y\xe2\x89\xa49).
For each test case, output two integers: the minimum of x and y, followed by the maximum of x and y." "800  x45290"
    
1970G3 "Min-Fund Prison (Hard)" "bitmasks, dfs and similar, dp, graphs, trees" "In the hard version, 2\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa41052\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa4105 and 1\xe2\x89\xa4\xe2\x88\x91m\xe2\x89\xa45\xc3\x971051\xe2\x89\xa4\xe2\x88\x91m\xe2\x89\xa45\xc3\x97105
After a worker\'s strike organized by the Dementors asking for equal rights, the prison of Azkaban has suffered some damage. After settling the spirits, the Ministry of Magic is looking to renovate the prison to ensure that the Dementors are kept in check. The prison consists of nn prison cells and mm bi-directional corridors. The ithith corridor is from cells uiui to vivi. A subset of these cells SS is called a complex if any cell in SS is reachable from any other cell in SS. Formally, a subset of cells SS is a complex if xx and yy are reachable from each other for all x,y\xe2\x88\x88Sx,y\xe2\x88\x88S, using only cells from SS on the way. The funding required for a complex SS consisting of kk cells is defined as k2k2.
As part of your Intro to Magical Interior Design course at Hogwarts, you have been tasked with designing the prison. The Ministry of Magic has asked that you divide the prison into 22 complexes with exactly one corridorexactly one corridor connecting them, so that the Dementors can\'t organize union meetings. For this purpose, you are allowed to build bi-directional corridors. The funding required to build a corridor between any 22 cells is cc. 
Due to budget cuts and the ongoing fight against the Death Eaters, you must find the minimum total fundingminimum total funding required to divide the prison as per the Ministry\'s requirements or \xe2\x88\x921\xe2\x88\x921 if no division is possible.
Note: The total funding is the sum of the funding required for the 22 complexes and the corridors built. If after the division, the two complexes have xx and yy cells respectively and you have built a total of aa corridors, the total funding will be x2+y2+c\xc3\x97ax2+y2+c\xc3\x97a. Note that x+y=nx+y=n.
The first line contains one integer tt (1\xe2\x89\xa4t\xe2\x89\xa41051\xe2\x89\xa4t\xe2\x89\xa4105) \xe2\x80\x94 the number of test cases. Then tt test cases follow.
The first line of each test case consists of three integers n,mn,m and cc (2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105, 1\xe2\x89\xa4m\xe2\x89\xa45\xc3\x971051\xe2\x89\xa4m\xe2\x89\xa45\xc3\x97105, 1\xe2\x89\xa4c\xe2\x89\xa41091\xe2\x89\xa4c\xe2\x89\xa4109)
mm lines follow, each consisting of 2 integers \xe2\x80\x94 ui,viui,vi indicating a corridor is present between cells uiui and vivi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n1\xe2\x89\xa4ui,vi\xe2\x89\xa4n, ui\xe2\x89\xa0viui\xe2\x89\xa0vi)
It is guaranteed that the sum of nn over all test cases does not exceed 105105.
It is guaranteed that the sum of mm over all test cases does not exceed 5\xc3\x971055\xc3\x97105.
It is guaranteed that there exists at most one corridor between any two cells.
Print the minimum fundingminimum funding required to divide the prison as per the Ministry\'s requirements or \xe2\x88\x921\xe2\x88\x921 if no division is possible.
In the first test case of the sample input, there is no way to divide the prison according to the Ministry\'s requirements.
In the second test case, consider the corridor between cells 11 and 55 as the connection between the 22 complexes consisting of {2,3,5,6}{2,3,5,6} and {1,4}{1,4} cells respectively. There are no new corridors built. The total funding is 42+22=2042+22=20. You can verify this is the minimum funding required. 
In the third test case, build a corridor between 22 and 44. Consider the corridor between cells 11 and 55 as the connection between the 22 complexes consisting of {3,5,6}{3,5,6} and {1,2,4}{1,2,4} cells respectively. The total funding is 32+32+7\xc3\x971=2532+32+7\xc3\x971=25. You can verify this is the minimum funding required. 
In the fourth test case, build a corridor between 22 and 44 and between 55 and 77. Consider the corridor between cells 55 and 77 as the connection between the 22 complexes consisting of {1,2,4,7}{1,2,4,7} and {3,5,6}{3,5,6} cells respectively. The total funding is 42+32+4\xc3\x972=3342+32+4\xc3\x972=33. You can verify this is the minimum funding required. 
Note for all test cases that there may be multiple ways to get the same funding but there is no other division which will have a more optimal minimum funding." "2400  x343"
    
1970G2 "Min-Fund Prison (Medium)" "brute force, dfs and similar, dp, graphs, trees" "In the medium version, 2\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa4300 and 1\xe2\x89\xa4\xe2\x88\x91m\xe2\x89\xa4300
After a worker\'s strike organized by the Dementors asking for equal rights, the prison of Azkaban has suffered some damage. After settling the spirits, the Ministry of Magic is looking to renovate the prison to ensure that the Dementors are kept in check. The prison consists of n prison cells and m bi-directional corridors. The ith corridor is from cells ui to vi. A subset of these cells S is called a complex if any cell in S is reachable from any other cell in S. Formally, a subset of cells S is a complex if x and y are reachable from each other for all x,y\xe2\x88\x88S, using only cells from S on the way. The funding required for a complex S consisting of k cells is defined as k2.
As part of your Intro to Magical Interior Design course at Hogwarts, you have been tasked with designing the prison. The Ministry of Magic has asked that you divide the prison into 2 complexes with exactly one corridor connecting them, so that the Dementors can\'t organize union meetings. For this purpose, you are allowed to build bi-directional corridors. The funding required to build a corridor between any 2 cells is c. 
Due to budget cuts and the ongoing fight against the Death Eaters, you must find the minimum total funding required to divide the prison as per the Ministry\'s requirements or \xe2\x88\x921 if no division is possible.
Note: The total funding is the sum of the funding required for the 2 complexes and the corridors built. If after the division, the two complexes have x and y cells respectively and you have built a total of a corridors, the total funding will be x2+y2+c\xc3\x97a. Note that x+y=n.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4300) \xe2\x80\x94 the number of test cases. Then t test cases follow.
The first line of each test case consists of three integers n,m and c (2\xe2\x89\xa4n\xe2\x89\xa4300, 1\xe2\x89\xa4m\xe2\x89\xa4300, 1\xe2\x89\xa4c\xe2\x89\xa4109)
m lines follow, each consisting of 2 integers \xe2\x80\x94 ui,vi indicating a corridor is present between cells ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n, ui\xe2\x89\xa0vi)
It is guaranteed that the sum of n over all test cases does not exceed 300.
It is guaranteed that the sum of m over all test cases does not exceed 300.
It is guaranteed that there exists at most one corridor between any two cells.
Print the minimum funding required to divide the prison as per the Ministry\'s requirements or \xe2\x88\x921 if no division is possible.
In the first test case of the sample input, there is no way to divide the prison according to the Ministry\'s requirements.
In the second test case, consider the corridor between cells 1 and 5 as the connection between the 2 complexes consisting of {2,3,5,6} and {1,4} cells respectively. There are no new corridors built. The total funding is 42+22=20. You can verify this is the minimum funding required. 
In the third test case, build a corridor between 2 and 4. Consider the corridor between cells 1 and 5 as the connection between the 2 complexes consisting of {3,5,6} and {1,2,4} cells respectively. The total funding is 32+32+7\xc3\x971=25. You can verify this is the minimum funding required. 
In the fourth test case, build a corridor between 2 and 4 and between 5 and 7. Consider the corridor between cells 5 and 7 as the connection between the 2 complexes consisting of {1,2,4,7} and {3,5,6} cells respectively. The total funding is 42+32+4\xc3\x972=33. You can verify this is the minimum funding required. 
Note for all test cases that there may be multiple ways to get the same funding but there is no other division which will have a more optimal minimum funding." "2200  x587"
    
1970G1 "Min-Fund Prison (Easy)" "dfs and similar, trees" "In the easy version, m=n\xe2\x88\x921 and there exists a path between u and v for all u,v (1\xe2\x89\xa4u,v\xe2\x89\xa4n).
After a worker\'s strike organized by the Dementors asking for equal rights, the prison of Azkaban has suffered some damage. After settling the spirits, the Ministry of Magic is looking to renovate the prison to ensure that the Dementors are kept in check. The prison consists of n prison cells and m bi-directional corridors. The ith corridor is from cells ui to vi. A subset of these cells S is called a complex if any cell in S is reachable from any other cell in S. Formally, a subset of cells S is a complex if x and y are reachable from each other for all x,y\xe2\x88\x88S, using only cells from S on the way. The funding required for a complex S consisting of k cells is defined as k2.
As part of your Intro to Magical Interior Design course at Hogwarts, you have been tasked with designing the prison. The Ministry of Magic has asked that you divide the prison into 2 complexes with exactly one corridor connecting them, so that the Dementors can\'t organize union meetings. For this purpose, you are allowed to build bi-directional corridors. The funding required to build a corridor between any 2 cells is c. 
Due to budget cuts and the ongoing fight against the Death Eaters, you must find the minimum total funding required to divide the prison as per the Ministry\'s requirements or \xe2\x88\x921 if no division is possible.
Note: The total funding is the sum of the funding required for the 2 complexes and the corridors built. If after the division, the two complexes have x and y cells respectively and you have built a total of a corridors, the total funding will be x2+y2+c\xc3\x97a. Note that x+y=n.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4105) \xe2\x80\x94 the number of test cases. Then t test cases follow.
The first line of each test case consists of three integers n,m and c (2\xe2\x89\xa4n\xe2\x89\xa4105, m=n\xe2\x88\x921, 1\xe2\x89\xa4c\xe2\x89\xa4109)
m lines follow, each consisting of 2 integers \xe2\x80\x94 ui,vi indicating a corridor is present between cells ui and vi (1\xe2\x89\xa4ui,vi\xe2\x89\xa4n, ui\xe2\x89\xa0vi)
It is guaranteed that the sum of n over all test cases does not exceed 105.
It is guaranteed that the sum of m over all test cases does not exceed 5\xc3\x97105.
It is guaranteed that there exists at most one corridor between any two cells.
Print the minimum funding required to divide the prison as per the Ministry\'s requirements or \xe2\x88\x921 if no division is possible." "1900  x1355"
    
1970F3 "Playing Quidditch (Hard)" implementation "This afternoon, you decided to enjoy the first days of Spring by taking a walk outside. As you come near the Quidditch field, you hear screams. Once again, there is a conflict about the score: the two teams are convinced that they won the game! To prevent this problem from happening one more time, you decide to get involved in the refereeing of the matches.
Now, you will stay in the stadium to watch the game and count the score. At the end of the game, you will decide the winner.
Today, two teams are competing: the red Gryffindor (R) and the blue Ravenclaw (B) team. Each team is composed of P players (1\xe2\x89\xa4P\xe2\x89\xa410).
The field is a rectangle of N lines and M columns (3\xe2\x89\xa4N,M\xe2\x89\xa499, N and M are odd). All the positions are integers, and several entities are allowed to be at the same position in the field. At the beginning of the game, the field contains goals for the two teams (each team can own between one and five goals), the players, and exactly one Quaffle. In this version of the problem, one Bludger and a Golden Snitch can be present.
A game is composed of T steps (0\xe2\x89\xa4T\xe2\x89\xa410000). At each step, one entity on the field (a player or a ball) performs one action. All entities can move. A player can also catch a ball or throw the Quaffle that it is carrying. To catch a ball, a player must be located on the same cell as it. The Quaffle does not perform any action while it is being carried; it only follows the movements of the player. If a player carrying the Quaffle decides to throw it, the Quaffle is simply put at the current position of the player. If a player is on the same cell as a Bludger (either after a movement from the player or the Bludger), the player is eliminated. If the player is eliminated while it is carrying the Quaffle, the Quaffle remains on the cell containing both the player and the Bludger after the move. It is guaranteed that this never occurs while the player is in a cell containing a goal.
To win a point, a player must leave the Quaffle at a goal of the other team. When it does, the team of the player wins one point, and the Quaffle instantly moves to the middle of the field (the cell at the (M+1)/2-th column of the (N+1)/2-th line of the field, starting from 1). There is no goal in the middle of the field. If a player puts the ball in its own goal, the other team wins the point. If a player catches the Golden Snitch, their team wins 10 points and the game is over.
On the first line, the integers N and M.
The description of the field follows: N lines of M pairs of characters separated by spaces. Each pair of characters represents a position on the field. It can be either: 
The next line contains T, the number of steps that compose the game. T lines follow, each describing one action. It contains several pieces of information separated by a space. First, a pair of characters representing the entity that must perform the action. Second, the description of the action: 
All the actions performed by the entities are guaranteed to be valid: the players stay in the field, don\'t catch a ball if they are not in the same cell, don\'t release the Quaffle if they are not carrying it, ...
You must output the description of the main events of the game, one event per line. More precisely:
The events must be printed in ascending order of t. If several players are eliminated at the same time, the events must be written is alphabetical order: B0, ..., B9, R0, ... R9.
At the end of the game, you must print the final score as: FINAL SCORE: r b, where r is the score of the red team and b is the score of the blue team.
In the first example, the red player takes the Quaffle, move it and throw it. The blue player catches the ball, goes to the red goal and scores.
In the second example, the red player takes the ball and scores in the goal of their own team: the blue team wins a point.
In the third example, the Bludger goes at the position of R0: R0 is eliminated. Then, B0 moves to the position of the Bludger: B0 is eliminated too.
In the fourth example, a red player catches the Golden Snitch. Their team wins 10 points, and the game ends.
You can find one more example in the easy version of the problem" "2300  x359"
    
1970F2 "Playing Quidditch (Medium)" implementation "This afternoon, you decided to enjoy the first days of Spring by taking a walk outside. As you come near the Quidditch field, you hear screams. Once again, there is a conflict about the score: the two teams are convinced that they won the game! To prevent this problem from happening one more time, you decide to get involved in the refereeing of the matches.
Now, you will stay in the stadium to watch the game and count the score. At the end of the game, you will decide the winner.
Today, two teams are competing: the red Gryffindor (R) and the blue Ravenclaw (B) team. Each team is composed of P players (1\xe2\x89\xa4P\xe2\x89\xa410).
The field is a rectangle of N lines and M columns (3\xe2\x89\xa4N,M\xe2\x89\xa499, N and M are odd). All the positions are integers, and several entities are allowed to be at the same position in the field. At the beginning of the game, the field contains goals for the two teams (each team can own between one and five goals), the players, and exactly one Quaffle. In this version of the problem, one Bludger can be present. An other type of ball will be available in the harder version of the problem.
A game is composed of T steps (0\xe2\x89\xa4T\xe2\x89\xa410000). At each step, one entity on the field (a player or a ball) performs one action. All entities can move. A player can also catch a ball or throw the Quaffle that it is carrying. To catch a ball, a player must be located on the same cell as it. The Quaffle does not perform any action while it is being carried; it only follows the movements of the player. If a player carrying the Quaffle decides to throw it, the Quaffle is simply put at the current position of the player. If a player is on the same cell as a Bludger (either after a movement from the player or the Bludger), the player is eliminated. If the player is eliminated while it is carrying the Quaffle, the Quaffle remains on the cell containing both the player and the Bludger after the move. It is guaranteed that this never occurs while the player is in a cell containing a goal.
To win a point, a player must leave the Quaffle at a goal of the other team. When it does, the team of the player wins one point, and the Quaffle instantly moves to the middle of the field (the cell at the (M+1)/2-th column of the (N+1)/2-th line of the field, starting from 1). There is no goal in the middle of the field. If a player puts the ball in its own goal, the other team wins the point.
On the first line, the integers N and M.
The description of the field follows: N lines of M pairs of characters separated by spaces. Each pair of characters represents a position on the field. It can be either: 
The next line contains T, the number of steps that compose the game. T lines follow, each describing one action. It contains several pieces of information separated by a space. First, a pair of characters representing the entity that must perform the action. Second, the description of the action: 
All the actions performed by the entities are guaranteed to be valid: the players stay in the field, don\'t catch a ball if they are not in the same cell, don\'t release the Quaffle if they are not carrying it, ...
You must output the description of the main events of the game, one event per line. More precisely:
The events must be printed in ascending order of t. If several players are eliminated at the same time, the events must be written in alphabetical order: B0, ..., B9, R0, ... R9.
At the end of the game, you must print the final score as: FINAL SCORE: r b, where r is the score of the red team and b is the score of the blue team.
In the first example, the red player takes the Quaffle, move it and throw it. The blue player catches the ball, goes to the red goal and scores.
In the second example, the red player takes the ball and scores in the goal of their own team: the blue team wins a point.
In the third example, the Bludger goes at the position of R0: R0 is eliminated. Then, B0 moves to the position of the Bludger: B0 is eliminated too.
You can find one more example in the easy version of the problem" "2300  x346"
    
1970F1 "Playing Quidditch (Easy)" implementation "This afternoon, you decided to enjoy the first days of Spring by taking a walk outside. As you come near the Quidditch field, you hear screams. Once again, there is a conflict about the score: the two teams are convinced that they won the game! To prevent this problem from happening one more time, you decide to get involved in the refereeing of the matches.
Now, you will stay in the stadium to watch the game and count the score. At the end of the game, you will decide the winner.
Today, two teams are competing: the red Gryffindor (R) and the blue Ravenclaw (B) team. Each team is composed of P players (1\xe2\x89\xa4P\xe2\x89\xa410).
The field is a rectangle of N lines and M columns (3\xe2\x89\xa4N,M\xe2\x89\xa499, N and M are odd). All the positions are integers, and several entities are allowed to be at the same position in the field. At the beginning of the game, the field contains goals for the two teams (each team can own between one and five goals), the players, and exactly one Quaffle. Other types of balls will be available in the harder versions of the problem.
A game is composed of T steps (0\xe2\x89\xa4T\xe2\x89\xa410000). At each step, one entity on the field (a player or a ball) performs one action. All entities can move. A player can also catch a ball or throw the Quaffle that it is carrying. To catch a ball, a player must be located on the same cell as it. The Quaffle does not perform any action while it is being carried; it only follows the movements of the player. If a player carrying the Quaffle decides to throw it, the Quaffle is simply put at the current position of the player.
To win a point, a player must leave the Quaffle at a goal of the other team. When it does, the team of the player wins one point, and the Quaffle instantly moves to the middle of the field (the cell at the (M+1)/2-th column of the (N+1)/2-th line of the field, starting from 1). There is no goal in the middle of the field. If a player puts the ball in its own goal, the other team wins the point.
On the first line, the integers N and M.
The description of the field follows: N lines of M pairs of characters separated by spaces. Each pair of characters represents a position on the field. It can be either: 
The next line contains T, the number of steps that compose the game. T lines follow, each describing one action. It contains several pieces of information separated by a space. First, a pair of characters representing the entity that must perform the action. Second, the description of the action: 
All the actions performed by the entities are guaranteed to be valid: the players stay in the field, don\'t catch a ball if they are not in the same cell, don\'t release the Quaffle if they are not carrying it, ...
You must output the description of the main events of the game, one event per line. More precisely:
The events must be printed in ascending order of t.
At the end of the game, you must print the final score as: FINAL SCORE: r b, where r is the score of the red team and b is the score of the blue team.
In the first example, a blue player goes to the middle of the grid, at the position of the Quaffle. He takes it, goes to the goal of the red team, and lets the ball there. He scores! The ball gets back to the middle of the field, a red player takes it and scores too.
In the second example, the red player takes the Quaffle, move it and throw it. The blue player catches the ball, goes to the red goal and scores.
In the third example, the red player takes the ball and scores in the goal of their own team: the blue team wins a point." "2300  x426"
    
1.97E+06 "Trails (Hard)" "dp, matrices" "Harry Potter is hiking in the Alps surrounding Lake Geneva. In this area there are m cabins, numbered 1 to m. Each cabin is connected, with one or more trails, to a central meeting point next to the lake. Each trail is either short or long. Cabin i is connected with si short trails and li long trails to the lake.
Each day, Harry walks a trail from the cabin where he currently is to Lake Geneva, and then from there he walks a trail to any of the m cabins (including the one he started in). However, as he has to finish the hike in a day, at least one of the two trails has to be short.
How many possible combinations of trails can Harry take if he starts in cabin 1 and walks for n days?
Give the answer modulo 109+7.
The first line contains the integers m and n.
The second line contains m integers, s1,\xe2\x80\xa6,sm, where si is the number of short trails between cabin i and Lake Geneva.
The third and last line contains m integers, l1,\xe2\x80\xa6,lm, where li is the number of long trails between cabin i and Lake Geneva.
We have the following constraints:
0\xe2\x89\xa4si,li\xe2\x89\xa4103.
1\xe2\x89\xa4m\xe2\x89\xa4105.
1\xe2\x89\xa4n\xe2\x89\xa4109.
The number of possible combinations of trails, modulo 109+7." "2200  x746"
    
1.97E+05 "Trails (Medium)" "dp, matrices" "Harry Potter is hiking in the Alps surrounding Lake Geneva. In this area there are m cabins, numbered 1 to m. Each cabin is connected, with one or more trails, to a central meeting point next to the lake. Each trail is either short or long. Cabin i is connected with si short trails and li long trails to the lake.
Each day, Harry walks a trail from the cabin where he currently is to Lake Geneva, and then from there he walks a trail to any of the m cabins (including the one he started in). However, as he has to finish the hike in a day, at least one of the two trails has to be short.
How many possible combinations of trails can Harry take if he starts in cabin 1 and walks for n days?
Give the answer modulo 109+7.
The first line contains the integers m and n.
The second line contains m integers, s1,\xe2\x80\xa6,sm, where si is the number of short trails between cabin i and Lake Geneva.
The third and last line contains m integers, l1,\xe2\x80\xa6,lm, where li is the number of long trails between cabin i and Lake Geneva.
We have the following constraints:
0\xe2\x89\xa4si,li\xe2\x89\xa4103.
1\xe2\x89\xa4m\xe2\x89\xa4102.
1\xe2\x89\xa4n\xe2\x89\xa4109.
The number of possible combinations of trails, modulo 109+7." "2000  x1305"
    
1.97E+04 "Trails (Easy)" dp "Harry Potter is hiking in the Alps surrounding Lake Geneva. In this area there are m cabins, numbered 1 to m. Each cabin is connected, with one or more trails, to a central meeting point next to the lake. Each trail is either short or long. Cabin i is connected with si short trails and li long trails to the lake.
Each day, Harry walks a trail from the cabin where he currently is to Lake Geneva, and then from there he walks a trail to any of the m cabins (including the one he started in). However, as he has to finish the hike in a day, at least one of the two trails has to be short.
How many possible combinations of trails can Harry take if he starts in cabin 1 and walks for n days?
Give the answer modulo 109+7.
The first line contains the integers m and n.
The second line contains m integers, s1,\xe2\x80\xa6,sm, where si is the number of short trails between cabin i and Lake Geneva.
The third and last line contains m integers, l1,\xe2\x80\xa6,lm, where li is the number of long trails between cabin i and Lake Geneva.
We have the following constraints:
0\xe2\x89\xa4si,li\xe2\x89\xa4103.
1\xe2\x89\xa4m\xe2\x89\xa4102.
1\xe2\x89\xa4n\xe2\x89\xa4103.
The number of possible combinations of trails, modulo 109+7." "1800  x2214"
    
1970D3 "Arithmancy (Hard)" interactive "The only difference between the versions of this problem is the maximum value of n.
Professor Vector is preparing to teach her Arithmancy class. She needs to prepare n distinct magic words for the class. Each magic word is a string consisting of characters X and O. A spell is a string created by concatenating two magic words together. The power of a spell is equal to the number of its different non-empty substrings. For example, the power of the spell XOXO is equal to 7, because it has 7 different substrings: X, O, XO, OX, XOX, OXO and XOXO.
Each student will create their own spell by concatenating two magic words. Since the students are not very good at magic yet, they will choose each of the two words independently and uniformly at random from the n words provided by Professor Vector. It is therefore also possible that the two words a student chooses are the same. Each student will then compute the power of their spell, and tell it to Professor Vector. In order to check their work, and of course to impress the students, Professor Vector needs to find out which two magic words and in which order were concatenated by each student.
Your program needs to perform the role of Professor Vector: first, create n distinct magic words, and then handle multiple requests where it is given the spell power and needs to determine the indices of the two magic words, in the correct order, that were used to create the corresponding spell.
This is an interactive problem.
First, your program should read a single integer n (1\xe2\x89\xa4n\xe2\x89\xa41000), the number of magic words to prepare. Then, it should print n magic words it has created, one per line. The magic words must be distinct, each magic word must have at least 1 and at most 30\xe2\x8b\x85n characters, and each character must be either X or O. We will denote the i-th magic word you printed as wi (1\xe2\x89\xa4i\xe2\x89\xa4n).
Then, your program should read a single integer q (1\xe2\x89\xa4q\xe2\x89\xa41000), the number of students in the class. Then, it should repeat the following process q times, one per student.
For the j-th student, it should first read a single integer pj, the power of their spell. It is guaranteed that this number is computed by choosing two indices uj and vj independently and uniformly at random between 1 and n inclusive, concatenating wuj and wvj, and finding the number of different non-empty substrings of the resulting string. Then, your program must print the numbers uj and vj, in this order (1\xe2\x89\xa4uj,vj\xe2\x89\xa4n).
Note that it is not enough to find any two magic words that concatenate into a spell with the given power. You must find the exact words used by the student in the exact order.
Remember to flush the output stream after printing all magic words and after printing uj and vj for each student." "3100  x110"
    
1970D2 "Arithmancy (Medium)" "constructive algorithms, interactive, probabilities, strings" "The only difference between the versions of this problem is the maximum value of n.
Professor Vector is preparing to teach her Arithmancy class. She needs to prepare n distinct magic words for the class. Each magic word is a string consisting of characters X and O. A spell is a string created by concatenating two magic words together. The power of a spell is equal to the number of its different non-empty substrings. For example, the power of the spell XOXO is equal to 7, because it has 7 different substrings: X, O, XO, OX, XOX, OXO and XOXO.
Each student will create their own spell by concatenating two magic words. Since the students are not very good at magic yet, they will choose each of the two words independently and uniformly at random from the n words provided by Professor Vector. It is therefore also possible that the two words a student chooses are the same. Each student will then compute the power of their spell, and tell it to Professor Vector. In order to check their work, and of course to impress the students, Professor Vector needs to find out which two magic words and in which order were concatenated by each student.
Your program needs to perform the role of Professor Vector: first, create n distinct magic words, and then handle multiple requests where it is given the spell power and needs to determine the indices of the two magic words, in the correct order, that were used to create the corresponding spell.
This is an interactive problem.
First, your program should read a single integer n (1\xe2\x89\xa4n\xe2\x89\xa430), the number of magic words to prepare. Then, it should print n magic words it has created, one per line. The magic words must be distinct, each magic word must have at least 1 and at most 30\xe2\x8b\x85n characters, and each character must be either X or O. We will denote the i-th magic word you printed as wi (1\xe2\x89\xa4i\xe2\x89\xa4n).
Then, your program should read a single integer q (1\xe2\x89\xa4q\xe2\x89\xa41000), the number of students in the class. Then, it should repeat the following process q times, one per student.
For the j-th student, it should first read a single integer pj, the power of their spell. It is guaranteed that this number is computed by choosing two indices uj and vj independently and uniformly at random between 1 and n inclusive, concatenating wuj and wvj, and finding the number of different non-empty substrings of the resulting string. Then, your program must print the numbers uj and vj, in this order (1\xe2\x89\xa4uj,vj\xe2\x89\xa4n).
Note that it is not enough to find any two magic words that concatenate into a spell with the given power. You must find the exact words used by the student in the exact order.
Remember to flush the output stream after printing all magic words and after printing uj and vj for each student." "2600  x207"
    
1970D1 "Arithmancy (Easy)" "brute force, constructive algorithms, interactive, strings" "Professor Vector is preparing to teach her Arithmancy class. She needs to prepare n distinct magic words for the class. Each magic word is a string consisting of characters X and O. A spell is a string created by concatenating two magic words together. The power of a spell is equal to the number of its different non-empty substrings. For example, the power of the spell XOXO is equal to 7, because it has 7 different substrings: X, O, XO, OX, XOX, OXO and XOXO.
Each student will create their own spell by concatenating two magic words. Since the students are not very good at magic yet, they will choose each of the two words independently and uniformly at random from the n words provided by Professor Vector. It is therefore also possible that the two words a student chooses are the same. Each student will then compute the power of their spell, and tell it to Professor Vector. In order to check their work, and of course to impress the students, Professor Vector needs to find out which two magic words and in which order were concatenated by each student.
Your program needs to perform the role of Professor Vector: first, create n distinct magic words, and then handle multiple requests where it is given the spell power and needs to determine the indices of the two magic words, in the correct order, that were used to create the corresponding spell.
This is an interactive problem.
First, your program should read a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43), the number of magic words to prepare. Then, it should print n magic words it has created, one per line. The magic words must be distinct, each magic word must have at least 1 and at most 30\xe2\x8b\x85n characters, and each character must be either X or O. We will denote the i-th magic word you printed as wi (1\xe2\x89\xa4i\xe2\x89\xa4n).
Then, your program should read a single integer q (1\xe2\x89\xa4q\xe2\x89\xa41000), the number of students in the class. Then, it should repeat the following process q times, one per student.
For the j-th student, it should first read a single integer pj, the power of their spell. It is guaranteed that this number is computed by choosing two indices uj and vj independently and uniformly at random between 1 and n inclusive, concatenating wuj and wvj, and finding the number of different non-empty substrings of the resulting string. Then, your program must print the numbers uj and vj, in this order (1\xe2\x89\xa4uj,vj\xe2\x89\xa4n).
Note that it is not enough to find any two magic words that concatenate into a spell with the given power. You must find the exact words used by the student in the exact order.
Remember to flush the output stream after printing all magic words and after printing uj and vj for each student." "2100  x648"
    
1970C3 "Game on Tree (Hard)" "dfs and similar, dp, games, trees" "This is the hard version of the problem. The only difference in this version is the constraint on t.
Ron and Hermione are playing a game on a tree of n nodes that are initially inactive. The game consists of t rounds, each of which starts with a stone on exactly one node, which is considered as activated. A move consists of picking an inactive neighbor of the node with a stone on it and moving the stone there (thus activating this neighbor). Ron makes the first move, after which he alternates with Hermione until no valid move is available. The player that cannot make a move loses the round. If both players play optimally, who wins each round of this game? 
Note that all the rounds are played with the same tree; only the starting node changes. Moreover, after each round, all active nodes are considered inactive again.
The first line contains integers n (2\xe2\x89\xa4n\xe2\x89\xa42\xc3\x97105), t (1\xe2\x89\xa4t\xe2\x89\xa4n), the number of nodes in the tree and the number of rounds, respectively.
The next n\xe2\x88\x921 lines contain two integers 1\xe2\x89\xa4u,v\xe2\x89\xa4n each, corresponding to an edge of the tree.
The next line contains t integers 1\xe2\x89\xa4u1,\xe2\x80\xa6,ut\xe2\x89\xa4n, corresponding to the node where the stone is initially put.
The output consists of t lines, each line being either ""Ron"" or ""Hermione""." "1900  x1586"
    
1970C2 "Game on Tree (Medium)" "dfs and similar, dp, games, trees" "This is the medium version of the problem. The difference in this version is that t=1 and we work on trees.
Ron and Hermione are playing a game on a tree of n nodes that are initially inactive. The game consists of t rounds, each of which starts with a stone on exactly one node, which is considered as activated. A move consists of picking an inactive neighbor of the node with a stone on it and moving the stone there (thus activating this neighbor). Ron makes the first move, after which he alternates with Hermione until no valid move is available. The player that cannot make a move loses the round. If both players play optimally, who wins each round of this game? 
Note that all the rounds are played with the same tree; only the starting node changes. Moreover, after each round, all active nodes are considered inactive again.
The first line contains integers n (2\xe2\x89\xa4n\xe2\x89\xa42\xc3\x97105), t (t=1), the number of nodes in the tree and the number of rounds, respectively.
The next n\xe2\x88\x921 lines contain two integers 1\xe2\x89\xa4u,v\xe2\x89\xa4n each, corresponding to an edge of the tree.
The next line contains t integers 1\xe2\x89\xa4u1,\xe2\x80\xa6,ut\xe2\x89\xa4n, corresponding to the node where the stone is initially put.
The output consists of t=1 line which is either ""Ron"" or ""Hermione""." "1700  x2767"
    
1970C1 "Game on Tree (Easy)" games "This is the easy version of the problem. The difference in this version is that t=1 and we work on an array-like tree.
Ron and Hermione are playing a game on a tree of n nodes that are initially inactive. This tree is special because it has exactly two leaves. It can thus be seen as an array. The game consists of t rounds, each of which starts with a stone on exactly one node, which is considered as activated. A move consists of picking an inactive neighbor of the node with a stone on it and moving the stone there (thus activating this neighbor). Ron makes the first move, after which he alternates with Hermione until no valid move is available. The player that cannot make a move loses the round. If both players play optimally, who wins each round of this game? 
Note that all the rounds are played with the same tree; only the starting node changes. Moreover, after each round, all active nodes are considered inactive again.
The first line contains integers n (2\xe2\x89\xa4n\xe2\x89\xa42\xc3\x97105), t (t=1), the number of nodes in the tree and the number of rounds, respectively.
The next n\xe2\x88\x921 lines contain two integers 1\xe2\x89\xa4u,v\xe2\x89\xa4n each, corresponding to an edge of the tree. It is guaranteed that the tree has exactly two leaves.
The next line contains t integers 1\xe2\x89\xa4u1,\xe2\x80\xa6,ut\xe2\x89\xa4n, corresponding to the node where the stone is initially put.
The output consists of t=1 line which is either ""Ron"" or ""Hermione""." "1400  x3491"
    
1970B3 "Exact Neighbours (Hard)" "constructive algorithms" "After some recent attacks on Hogwarts Castle by the Death Eaters, the Order of the Phoenix has decided to station nn members in Hogsmead Village. The houses will be situated on a picturesque n\xc3\x97nn\xc3\x97n square field. Each wizard will have their own house, and every house will belong to some wizard. Each house will take up the space of one square.
However, as you might know wizards are very superstitious. During the weekends, each wizard ii will want to visit the house that is exactly aiai (0\xe2\x89\xa4ai\xe2\x89\xa4n)(0\xe2\x89\xa4ai\xe2\x89\xa4n) away from their own house. The roads in the village are built horizontally and vertically, so the distance between points (xi,yi)(xi,yi) and (xj,yj)(xj,yj) on the n\xc3\x97nn\xc3\x97n field is |xi\xe2\x88\x92xj|+|yi\xe2\x88\x92yj||xi\xe2\x88\x92xj|+|yi\xe2\x88\x92yj|. The wizards know and trust each other, so one wizard can visit another wizard\'s house when the second wizard is away. The houses to be built will be big enough for all nn wizards to simultaneously visit any house.
Apart from that, each wizard is mandated to have a view of the Hogwarts Castle in the north and the Forbidden Forest in the south, so the house of no other wizard should block the view. In terms of the village, it means that in each column of the n\xc3\x97nn\xc3\x97n field, there can be at most one house, i.e. if the ii-th house has coordinates (xi,yi)(xi,yi), then xi\xe2\x89\xa0xjxi\xe2\x89\xa0xj for all i\xe2\x89\xa0ji\xe2\x89\xa0j.
The Order of the Phoenix doesn\'t yet know if it is possible to place nn houses in such a way that will satisfy the visit and view requirements of all nn wizards, so they are asking for your help in designing such a plan.
If it is possible to have a correct placement, where for the ii-th wizard there is a house that is aiai away from it and the house of the ii-th wizard is the only house in their column, output YES, the position of houses for each wizard, and to the house of which wizard should each wizard go during the weekends.
If it is impossible to have a correct placement, output NO.
The first line contains nn (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105), the number of houses to be built.
The second line contains nn integers a1,\xe2\x80\xa6,ana1,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4n)(0\xe2\x89\xa4ai\xe2\x89\xa4n)
If there exists such a placement, output YES on the first line; otherwise, output NO.
If the answer is YES, output n+1n+1 more lines describing the placement.
The next nn lines should contain the positions of the houses 1\xe2\x89\xa4xi,yi\xe2\x89\xa4n1\xe2\x89\xa4xi,yi\xe2\x89\xa4n for each wizard.
The ii-th element of the last line should contain the index of the wizard, the house of which is exactly aiai away from the house of the ii-th wizard. If there are multiple such wizards, you can output any.
If there are multiple house placement configurations, you can output any.
For the sample, the house of the 1st wizard is located at (4,4)(4,4), of the 2nd at (1,3)(1,3), of the 3rd at (2,4)(2,4), of the 4th at (3,1)(3,1).
The distance from the house of the 1st wizard to the house of the 1st wizard is |4\xe2\x88\x924|+|4\xe2\x88\x924|=0|4\xe2\x88\x924|+|4\xe2\x88\x924|=0.
The distance from the house of the 2nd wizard to the house of the 1st wizard is |1\xe2\x88\x924|+|3\xe2\x88\x924|=4|1\xe2\x88\x924|+|3\xe2\x88\x924|=4.
The distance from the house of the 3rd wizard to the house of the 1st wizard is |2\xe2\x88\x924|+|4\xe2\x88\x924|=2|2\xe2\x88\x924|+|4\xe2\x88\x924|=2.
The distance from the house of the 4th wizard to the house of the 3rd wizard is |3\xe2\x88\x922|+|1\xe2\x88\x924|=4|3\xe2\x88\x922|+|1\xe2\x88\x924|=4.
The view and the distance conditions are satisfied for all houses, so the placement is correct." "2300  x490"
    
1970B2 "Exact Neighbours (Medium)" "constructive algorithms" "The only difference between this and the hard version is that a1=0.
After some recent attacks on Hogwarts Castle by the Death Eaters, the Order of the Phoenix has decided to station n members in Hogsmead Village. The houses will be situated on a picturesque n\xc3\x97n square field. Each wizard will have their own house, and every house will belong to some wizard. Each house will take up the space of one square.
However, as you might know wizards are very superstitious. During the weekends, each wizard i will want to visit the house that is exactly ai (0\xe2\x89\xa4ai\xe2\x89\xa4n) away from their own house. The roads in the village are built horizontally and vertically, so the distance between points (xi,yi) and (xj,yj) on the n\xc3\x97n field is |xi\xe2\x88\x92xj|+|yi\xe2\x88\x92yj|. The wizards know and trust each other, so one wizard can visit another wizard\'s house when the second wizard is away. The houses to be built will be big enough for all n wizards to simultaneously visit any house.
Apart from that, each wizard is mandated to have a view of the Hogwarts Castle in the north and the Forbidden Forest in the south, so the house of no other wizard should block the view. In terms of the village, it means that in each column of the n\xc3\x97n field, there can be at most one house, i.e. if the i-th house has coordinates (xi,yi), then xi\xe2\x89\xa0xj for all i\xe2\x89\xa0j.
The Order of the Phoenix doesn\'t yet know if it is possible to place n houses in such a way that will satisfy the visit and view requirements of all n wizards, so they are asking for your help in designing such a plan.
If it is possible to have a correct placement, where for the i-th wizard there is a house that is ai away from it and the house of the i-th wizard is the only house in their column, output YES, the position of houses for each wizard, and to the house of which wizard should each wizard go during the weekends.
If it is impossible to have a correct placement, output NO.
The first line contains n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105), the number of houses to be built.
The second line contains n integers a1,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4n), a1=0.
If there exists such a placement, output YES on the first line; otherwise, output NO.
If the answer is YES, output n+1 more lines describing the placement.
The next n lines should contain the positions of the houses 1\xe2\x89\xa4xi,yi\xe2\x89\xa4n for each wizard.
The i-th element of the last line should contain the index of the wizard, the house of which is exactly ai away from the house of the i-th wizard. If there are multiple such wizards, you can output any.
If there are multiple house placement configurations, you can output any.
For the sample, the house of the 1st wizard is located at (4,4), of the 2nd at (1,3), of the 3rd at (2,4), of the 4th at (3,1).
The distance from the house of the 1st wizard to the house of the 1st wizard is |4\xe2\x88\x924|+|4\xe2\x88\x924|=0.
The distance from the house of the 2nd wizard to the house of the 1st wizard is |1\xe2\x88\x924|+|3\xe2\x88\x924|=4.
The distance from the house of the 3rd wizard to the house of the 1st wizard is |2\xe2\x88\x924|+|4\xe2\x88\x924|=2.
The distance from the house of the 4th wizard to the house of the 3rd wizard is |3\xe2\x88\x922|+|1\xe2\x88\x924|=4.
The view and the distance conditions are satisfied for all houses, so the placement is correct." "2100  x819"
    
1970B1 "Exact Neighbours (Easy)" "constructive algorithms" "The only difference between this and the hard version is that all ai are even.
After some recent attacks on Hogwarts Castle by the Death Eaters, the Order of the Phoenix has decided to station n members in Hogsmead Village. The houses will be situated on a picturesque n\xc3\x97n square field. Each wizard will have their own house, and every house will belong to some wizard. Each house will take up the space of one square.
However, as you might know wizards are very superstitious. During the weekends, each wizard i will want to visit the house that is exactly ai (0\xe2\x89\xa4ai\xe2\x89\xa4n) away from their own house. The roads in the village are built horizontally and vertically, so the distance between points (xi,yi) and (xj,yj) on the n\xc3\x97n field is |xi\xe2\x88\x92xj|+|yi\xe2\x88\x92yj|. The wizards know and trust each other, so one wizard can visit another wizard\'s house when the second wizard is away. The houses to be built will be big enough for all n wizards to simultaneously visit any house.
Apart from that, each wizard is mandated to have a view of the Hogwarts Castle in the north and the Forbidden Forest in the south, so the house of no other wizard should block the view. In terms of the village, it means that in each column of the n\xc3\x97n field, there can be at most one house, i.e. if the i-th house has coordinates (xi,yi), then xi\xe2\x89\xa0xj for all i\xe2\x89\xa0j.
The Order of the Phoenix doesn\'t yet know if it is possible to place n houses in such a way that will satisfy the visit and view requirements of all n wizards, so they are asking for your help in designing such a plan.
If it is possible to have a correct placement, where for the i-th wizard there is a house that is ai away from it and the house of the i-th wizard is the only house in their column, output YES, the position of houses for each wizard, and to the house of which wizard should each wizard go during the weekends.
If it is impossible to have a correct placement, output NO.
The first line contains n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105), the number of houses to be built.
The second line contains n integers a1,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4n). All ai are even.
If there exists such a placement, output YES on the first line; otherwise, output NO.
If the answer is YES, output n+1 more lines describing the placement.
The next n lines should contain the positions of the houses 1\xe2\x89\xa4xi,yi\xe2\x89\xa4n for each wizard.
The i-th element of the last line should contain the index of the wizard, the house of which is exactly ai away from the house of the i-th wizard. If there are multiple such wizards, you can output any.
If there are multiple house placement configurations, you can output any.
For the sample, the house of the 1st wizard is located at (4,4), of the 2nd at (1,3), of the 3rd at (2,4), of the 4th at (3,1).
The distance from the house of the 1st wizard to the house of the 1st wizard is |4\xe2\x88\x924|+|4\xe2\x88\x924|=0.
The distance from the house of the 2nd wizard to the house of the 1st wizard is |1\xe2\x88\x924|+|3\xe2\x88\x924|=4.
The distance from the house of the 3rd wizard to the house of the 1st wizard is |2\xe2\x88\x924|+|4\xe2\x88\x924|=2.
The distance from the house of the 4th wizard to the house of the 3rd wizard is |3\xe2\x88\x922|+|1\xe2\x88\x924|=4.
The view and the distance conditions are satisfied for all houses, so the placement is correct." "1900  x1156"
    
1970A3 "Balanced Unshuffle (Hard)" "constructive algorithms, trees" "The only difference with the medium version is the maximum length of the input.
A parentheses sequence is a string consisting of characters ""("" and "")"", for example ""(()(("".
A balanced parentheses sequence is a parentheses sequence which can become a valid mathematical expression after inserting numbers and operations into it, for example ""(()(()))"".
The balance of a parentheses sequence is defined as the number of opening parentheses ""("" minus the number of closing parentheses "")"". For example, the balance of the sequence ""(()(("" is 3.
A balanced parentheses sequence can also be defined as a parentheses sequence with balance 0 such that each of its prefixes has a non-negative balance.
We define the balanced shuffle operation that takes a parentheses sequence and returns a parentheses sequence as follows: first, for every character of the input sequence, we compute the balance of the prefix of the sequence before that character and write those down in a table together with the positions of the characters in the input sequence, for example:


Then, we sort the columns of this table in increasing order of prefix balance, breaking ties in decreasing order of position. In the above example, we get:


The last row of this table forms another parentheses sequence, in this case ""()(()())"". This sequence is called the result of applying the balanced shuffle operation to the input sequence, or in short just the balanced shuffle of the input sequence.
Surprisingly, it turns out that the balanced shuffle of any balanced parentheses sequence is always another balanced parentheses sequence (we will omit the proof for brevity). Even more surprisingly, the balanced shuffles of two different balanced parentheses sequences are always different, therefore the balanced shuffle operation is a bijection on the set of balanced parentheses sequences of any given length (we will omit this proof, too).
You are given a balanced parentheses sequence. Find its preimage: the balanced parentheses sequence the balanced shuffle of which is equal to the given sequence.
The only line of input contains a string s consisting only of characters ""("" and "")"". This string is guaranteed to be a non-empty balanced parentheses sequence with its length not exceeding 500000.
Print the balanced parentheses sequence t such that the balanced shuffle of t is equal to s. It is guaranteed that the answer always exists and is unique." "2400  x466"
    
1970A2 "Balanced Unshuffle (Medium)" "brute force, constructive algorithms, trees" "The differences with the easy version of this problem are highlighted in bold.
A parentheses sequence is a string consisting of characters ""("" and "")"", for example ""(()(("".
A balanced parentheses sequence is a parentheses sequence which can become a valid mathematical expression after inserting numbers and operations into it, for example ""(()(()))"".
The balance of a parentheses sequence is defined as the number of opening parentheses ""("" minus the number of closing parentheses "")"". For example, the balance of the sequence ""(()(("" is 3.
A balanced parentheses sequence can also be defined as a parentheses sequence with balance 0 such that each of its prefixes has a non-negative balance.
We define the balanced shuffle operation that takes a parentheses sequence and returns a parentheses sequence as follows: first, for every character of the input sequence, we compute the balance of the prefix of the sequence before that character and write those down in a table together with the positions of the characters in the input sequence, for example:


Then, we sort the columns of this table in increasing order of prefix balance, breaking ties in decreasing order of position. In the above example, we get:


The last row of this table forms another parentheses sequence, in this case ""()(()())"". This sequence is called the result of applying the balanced shuffle operation to the input sequence, or in short just the balanced shuffle of the input sequence.
Surprisingly, it turns out that the balanced shuffle of any balanced parentheses sequence is always another balanced parentheses sequence (we will omit the proof for brevity). Even more surprisingly, the balanced shuffles of two different balanced parentheses sequences are always different, therefore the balanced shuffle operation is a bijection on the set of balanced parentheses sequences of any given length (we will omit this proof, too).
You are given a balanced parentheses sequence. Find its preimage: the balanced parentheses sequence the balanced shuffle of which is equal to the given sequence.
The only line of input contains a string s consisting only of characters ""("" and "")"". This string is guaranteed to be a non-empty balanced parentheses sequence with its length not exceeding 1000.
Print the balanced parentheses sequence t such that the balanced shuffle of t is equal to s. It is guaranteed that the answer always exists and is unique." "2400  x446"
    
1970A1 "Balanced Shuffle (Easy)" "implementation, sortings" "A parentheses sequence is a string consisting of characters ""("" and "")"", for example ""(()(("".
A balanced parentheses sequence is a parentheses sequence which can become a valid mathematical expression after inserting numbers and operations into it, for example ""(()(()))"".
The balance of a parentheses sequence is defined as the number of opening parentheses ""("" minus the number of closing parentheses "")"". For example, the balance of the sequence ""(()(("" is 3.
A balanced parentheses sequence can also be defined as a parentheses sequence with balance 0 such that each of its prefixes has a non-negative balance.
We define the balanced shuffle operation that takes a parentheses sequence and returns a parentheses sequence as follows: first, for every character of the input sequence, we compute the balance of the prefix of the sequence before that character and write those down in a table together with the positions of the characters in the input sequence, for example:


Then, we sort the columns of this table in increasing order of prefix balance, breaking ties in decreasing order of position. In the above example, we get:


The last row of this table forms another parentheses sequence, in this case ""()(()())"". This sequence is called the result of applying the balanced shuffle operation to the input sequence, or in short just the balanced shuffle of the input sequence.
You are given a balanced parentheses sequence. Print its balanced shuffle.
The only line of input contains a string s consisting only of characters ""("" and "")"". This string is guaranteed to be a non-empty balanced parentheses sequence with its length not exceeding 500000.
Print the parentheses sequence tï¿½\xe2\x80\x94 the balanced shuffle of s." "1000  x4978"
    
1969F "Card Pairing" "dp, greedy, hashing, implementation" "There is a deck of n cards, each card has one of k types. You are given the sequence a1,a2,\xe2\x80\xa6,an denoting the types of cards in the deck from top to bottom. Both n and k are even numbers.
You play a game with these cards. First, you draw k topmost cards from the deck. Then, the following happens each turn of the game:
You have to calculate the maximum number of coins you can earn during the game.
The first line of the input contains two integers n and k (2\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x89\xa41000, both n and k are even).
The second line of the input contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4k).
Print one integer \xe2\x80\x94 the maximum number of coins you can earn." "3000  x275"
    
1969E "Unique Array" "binary search, data structures, divide and conquer, dp, greedy" "You are given an integer array a of length n. A subarray of a is one of its contiguous subsequences (i.\xe2\x80\x89e. an array [al,al+1,\xe2\x80\xa6,ar] for some integers l and r such that 1\xe2\x89\xa4l<r\xe2\x89\xa4n). Let\'s call a subarray unique if there is an integer that occurs exactly once in the subarray.
You can perform the following operation any number of times (possibly zero): choose an element of the array and replace it with any integer.
Your task is to calculate the minimum number of aforementioned operation in order for all the subarrays of the array a to be unique.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
Additional constraint on the input: the sum of n over all test cases doesn\'t exceed 3\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum number of aforementioned operation in order for all the subarrays of the array a to be unique.
In the second test case, you can replace the 1-st and the 3-rd element, for example, like this: [3,4,1,4].
In the third test case, you can replace the 4-th element, for example, like this: [3,1,2,3,2]." "2400  x1381"
    
1969D "Shop Game" "data structures, greedy, math, sortings" "Alice and Bob are playing a game in the shop. There are n items in the shop; each item has two parameters: ai (item price for Alice) and bi (item price for Bob).
Alice wants to choose a subset (possibly empty) of items and buy them. After that, Bob does the following: 
Alice\'s profit is equal to \xe2\x88\x91i\xe2\x88\x88Sbi\xe2\x88\x92\xe2\x88\x91j\xe2\x88\x88Taj, where S is the set of items Bob buys from Alice, and T is the set of items Alice buys from the shop. In other words, Alice\'s profit is the difference between the amount Bob pays her and the amount she spends buying the items.
Alice wants to maximize her profit, Bob wants to minimize Alice\'s profit. Your task is to calculate Alice\'s profit if both Alice and Bob act optimally.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 0\xe2\x89\xa4k\xe2\x89\xa4n).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
The third line contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4109).
Additional constraint on the input: the sum of n over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 Alice\'s profit if both Alice and Bob act optimally.
In the first test case, Alice should buy the 2-nd item and sell it to Bob, so her profit is 2\xe2\x88\x921=1.
In the second test case, Alice should buy the 1-st, the 2-nd and the 3-rd item; then Bob takes the 1-st item for free and pays for the 2-nd and the 3-rd item. Alice\'s profit is (3+2)\xe2\x88\x92(1+2+1)=1. Bob could take 2-nd item for free instead; this does not change Alice\'s profit. Bob won\'t take the 3-rd item for free, since this would lead to a profit of 2." "1900  x4633"
    
1969C "Minimizing the Sum" "dp, implementation" "You are given an integer array a of length n.
You can perform the following operation: choose an element of the array and replace it with any of its neighbor\'s value.
For example, if a=[3,1,2], you can get one of the arrays [3,3,2], [3,2,2] and [1,1,2] using one operation, but not [2,1,2] or [3,4,2]. 
Your task is to calculate the minimum possible total sum of the array if you can perform the aforementioned operation at most k times.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105; 0\xe2\x89\xa4k\xe2\x89\xa410).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
Additional constraint on the input: the sum of n over all test cases doesn\'t exceed 3\xe2\x8b\x85105.
For each test case, print a single integerï¿½\xe2\x80\x94 the minimum possible total sum of the array if you can perform the aforementioned operation at most k times.
In the first example, one of the possible sequences of operations is the following: [3,1,2]\xe2\x86\x92[1,1,2].
In the second example, you do not need to apply the operation.
In the third example, one of the possible sequences of operations is the following: [2,2,1,3]\xe2\x86\x92[2,1,1,3]\xe2\x86\x92[2,1,1,1].
In the fourth example, one of the possible sequences of operations is the following: [4,1,2,2,4,3]\xe2\x86\x92[1,1,2,2,4,3]\xe2\x86\x92[1,1,1,2,4,3]\xe2\x86\x92[1,1,1,2,2,3]." "1700  x8790"
    
1969B "Shifts and Sorting" "constructive algorithms, greedy" "Let\'s define a cyclic shift of some string s as a transformation from s1s2\xe2\x80\xa6sn\xe2\x88\x921sn into sns1s2\xe2\x80\xa6sn\xe2\x88\x921. In other words, you take one last character sn and place it before the first character while moving all other characters to the right.
You are given a binary string s (a string consisting of only 0-s and/or 1-s).
In one operation, you can choose any substring slsl+1\xe2\x80\xa6sr (1\xe2\x89\xa4l<r\xe2\x89\xa4|s|) and cyclically shift it. The cost of such operation is equal to r\xe2\x88\x92l+1 (or the length of the chosen substring).
You can perform the given operation any number of times. What is the minimum total cost to make s sorted in non-descending order?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first and only line of each test case contains a binary string s (2\xe2\x89\xa4|s|\xe2\x89\xa42\xe2\x8b\x85105; si\xe2\x88\x88 {0, 1})ï¿½\xe2\x80\x94 the string you need to sort.
Additional constraint on the input: the sum of lengths of strings over all test cases doesn\'t exceed 2\xe2\x8b\x85105.
For each test case, print the single integerï¿½\xe2\x80\x94 the minimum total cost to make string sorted using operation above any number of times.
In the first test case, you can choose the whole string and perform a cyclic shift: 10 \xe2\x86\x92 01. The length of the substring is 2, so the cost is 2.
In the second test case, the string is already sorted, so you don\'t need to perform any operations.
In the third test case, one of the optimal strategies is the next: " "1000  x19121"
    
1969A "Two Friends" "constructive algorithms, implementation, math" "Monocarp wants to throw a party. He has n friends, and he wants to have at least 2 of them at his party.
The i-th friend\'s best friend is pi. All pi are distinct, and for every i\xe2\x88\x88[1,n], pi\xe2\x89\xa0i.
Monocarp can send invitations to friends. The i-th friend comes to the party if both the i-th friend and the pi-th friend receive an invitation (note that the pi-th friend doesn\'t have to actually come to the party). Each invitation is sent to exactly one of the friends.
For example, if p=[3,1,2,5,4], and Monocarp sends invitations to the friends [1,2,4,5], then the friends [2,4,5] will come to the party. The friend 1 won\'t come since his best friend didn\'t receive an invitation; the friend 3 won\'t come since he didn\'t receive an invitation.
Calculate the minimum number of invitations Monocarp has to send so that at least 2 friends come to the party.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of test cases.
Each test case consists of two lines:
Print one integerï¿½\xe2\x80\x94 the minimum number of invitations Monocarp has to send.
In the first testcase, Monocarp can send invitations to friends 4 and 5. Both of them will come to the party since they are each other\'s best friends, and both of them have invitations.
In the second testcase, Monocarp can send invitations to friends 1,2 and 3, for example. Then friends 1 and 2 will attend: friend 1 and his best friend 2 have invitations, friend 2 and his best friend 3 have invitations. Friend 3 won\'t attend since his friend 4 doesn\'t have an invitation. It\'s impossible to send invitations to fewer than 3 friends in such a way that at least 2 come.
In the third testcase, Monocarp can send invitations to both friends 1 and 2, and both of them will attend." "800  x19971"
    
1968G2 "Division + LCP (hard version)" "binary search, brute force, data structures, dp, hashing, math, string suffix structures, strings" "This is the hard version of the problem. In this version l\xe2\x89\xa4r.
You are given a string s. For a fixed k, consider a division of s into exactly k continuous substrings w1,\xe2\x80\xa6,wk. Let fk be the maximal possible LCP(w1,\xe2\x80\xa6,wk) among all divisions.
LCP(w1,\xe2\x80\xa6,wm) is the length of the Longest Common Prefix of the strings w1,\xe2\x80\xa6,wm.
For example, if s=abababcab and k=4, a possible division is abababcab. The LCP(ab,ab,abc,ab) is 2, since ab is the Longest Common Prefix of those four strings. Note that each substring consists of a continuous segment of characters and each character belongs to exactly one substring.
Your task is to find fl,fl+1,\xe2\x80\xa6,fr.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n, l, r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the string and the given range.
The second line of each test case contains string s of length n, all characters are lowercase English letters.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output r\xe2\x88\x92l+1 values: fl,\xe2\x80\xa6,fr." "2200  x1968"
    
1968G1 "Division + LCP (easy version)" "binary search, data structures, dp, hashing, string suffix structures, strings" "This is the easy version of the problem. In this version l=r.
You are given a string s. For a fixed k, consider a division of s into exactly k continuous substrings w1,\xe2\x80\xa6,wk. Let fk be the maximal possible LCP(w1,\xe2\x80\xa6,wk) among all divisions.
LCP(w1,\xe2\x80\xa6,wm) is the length of the Longest Common Prefix of the strings w1,\xe2\x80\xa6,wm.
For example, if s=abababcab and k=4, a possible division is abababcab. The LCP(ab,ab,abc,ab) is 2, since ab is the Longest Common Prefix of those four strings. Note that each substring consists of a continuous segment of characters and each character belongs to exactly one substring.
Your task is to find fl,fl+1,\xe2\x80\xa6,fr. In this version l=r.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n, l, r (1\xe2\x89\xa4l=r\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the string and the given range.
The second line of each test case contains string s of length n, all characters are lowercase English letters.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output r\xe2\x88\x92l+1 values: fl,\xe2\x80\xa6,fr.
In the first sample n=k, so the only division of aba is aba. The answer is zero, because those strings do not have a common prefix.
In the second sample, the only division is aaa. Their longest common prefix is one." "1900  x4295"
    
1968F "Equal XOR Segments" "binary search, data structures" "Let us call an array x1,\xe2\x80\xa6,xm interesting if it is possible to divide the array into k>1 parts so that bitwise XOR of values from each part are equal. 
More formally, you must split array x into k consecutive segments, each element of x must belong to exactly 1 segment. Let y1,\xe2\x80\xa6,yk be the XOR of elements from each part respectively. Then y1=y2=\xe2\x8b\xaf=yk must be fulfilled.
For example, if x=[1,1,2,3,0], you can split it as follows: [1],[1],[2,3,0]. Indeed 1=1=2\xe2\x8a\x953\xe2\x8a\x950.
You are given an array a1,\xe2\x80\xa6,an. Your task is to answer q queries: 
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and q (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of elements in the array and the number of queries respectively.
The next line contains n integers a1,\xe2\x80\xa6,an (0\xe2\x89\xa4ai<230)ï¿½\xe2\x80\x94 elements of the array.
Each of the next q lines contains two integers l and r (1\xe2\x89\xa4l<r\xe2\x89\xa4n) describing the query.
It is guaranteed that the sum of n over all testcases does not exceed 2\xe2\x8b\x85105.
It is guaranteed that the sum of q over all testcases does not exceed 2\xe2\x8b\x85105.
For each query, output ""YES"" if the subarray is interesting and ""NO"" otherwise.
You can output ""Yes"" and ""No"" in any case (for example, the strings ""yES"", ""yes"", and ""Yes"" will be recognized as correct answers).
Explanation for the first test case:
The first query is described in the statement.
In the second query, we should divide [1,2,3]. A possible division is [1,2],[3], since 1\xe2\x8a\x952=3.
It can be shown that for queries 3,4,5, the subarrays are not interesting." "1800  x5524"
    
1968E "Cells Arrangement" "constructive algorithms" "You are given an integer nn. You choose nn cells (x1,y1),(x2,y2),\xe2\x80\xa6,(xn,yn)(x1,y1),(x2,y2),\xe2\x80\xa6,(xn,yn) in the grid n\xc3\x97nn\xc3\x97n where 1\xe2\x89\xa4xi\xe2\x89\xa4n1\xe2\x89\xa4xi\xe2\x89\xa4n and 1\xe2\x89\xa4yi\xe2\x89\xa4n1\xe2\x89\xa4yi\xe2\x89\xa4n.
Let HH be the set of distinct Manhattan distances between any pair of cells. Your task is to maximize the size of HH. Examples of sets and their construction are given in the notes.
If there exists more than one solution, you are allowed to output any.
Manhattan distance between cells (x1,y1)(x1,y1) and (x2,y2)(x2,y2) equals |x1\xe2\x88\x92x2|+|y1\xe2\x88\x92y2||x1\xe2\x88\x92x2|+|y1\xe2\x88\x92y2|.
The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa4501\xe2\x89\xa4t\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of test cases.
Each of the following tt lines contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa41032\xe2\x89\xa4n\xe2\x89\xa4103).
For each test case, output nn points which maximize the size of HH. It is not necessary to output an empty line at the end of the answer for each test case.
In the first testcase we have n=2n=2. One of the possible arrangements is: 
In the second testcase we have n=3n=3. The optimal arrangement is: 
HH={|2\xe2\x88\x922|+|1\xe2\x88\x921|,|2\xe2\x88\x922|+|3\xe2\x88\x923|,|3\xe2\x88\x923|+|1\xe2\x88\x921|,|2\xe2\x88\x922|+|1\xe2\x88\x923|,|2\xe2\x88\x923|+|1\xe2\x88\x921|,|2\xe2\x88\x923|+|3\xe2\x88\x921|}{|2\xe2\x88\x922|+|1\xe2\x88\x921|,|2\xe2\x88\x922|+|3\xe2\x88\x923|,|3\xe2\x88\x923|+|1\xe2\x88\x921|,|2\xe2\x88\x922|+|1\xe2\x88\x923|,|2\xe2\x88\x923|+|1\xe2\x88\x921|,|2\xe2\x88\x923|+|3\xe2\x88\x921|}={0,0,0,2,1,3}{0,0,0,2,1,3}={0,1,2,3}{0,1,2,3}.
For n=4n=4 a possible arrangement is: 
For n=5n=5 a possible arrangement is: 
For n=6n=6 a possible arrangement is: " "1600  x10459"
    
1968D "Permutation Game" "brute force, dfs and similar, games, graphs, greedy, math" "Bodya and Sasha found a permutation p1,\xe2\x80\xa6,pn and an array a1,\xe2\x80\xa6,an. They decided to play a well-known ""Permutation game"".
A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Both of them chose a starting position in the permutation.
The game lasts k turns. The players make moves simultaneously. On each turn, two things happen to each player: 
Knowing Bodya\'s starting position PB and Sasha\'s starting position PS, determine who wins the game if both players are trying to win.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of testcases.
The first line of each testcase contains integers n, k, PB, PS (1\xe2\x89\xa4PB,PS\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4k\xe2\x89\xa4109)ï¿½\xe2\x80\x94 length of the permutation, duration of the game, starting positions respectively.
The next line contains n integers p1,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 elements of the permutation p.
The next line contains n integers a1,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 elements of array a.
It is guaranteed that the sum of values of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each testcase output: 
Below you can find the explanation for the first testcase, where the game consists of k=2 turns.
As we may see, Bodya\'s score is greater, so he wins the game. It can be shown that Bodya always can win this game." "1300  x14976"
    
1968C "Assembly via Remainders" "constructive algorithms, number theory" "You are given an array x2,x3,\xe2\x80\xa6,xn. Your task is to find any array a1,\xe2\x80\xa6,an, where: 
Here cmodd denotes the remainder of the division of the integer c by the integer d. For example 5mod2=1, 72mod3=0, 143mod14=3.
Note that if there is more than one a which satisfies the statement, you are allowed to find any.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of elements in a.
The second line of each test case contains n\xe2\x88\x921 integers x2,\xe2\x80\xa6,xn (1\xe2\x89\xa4xi\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the elements of x.
It is guaranteed that the sum of values n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case output any a1,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109) which satisfies the statement.
In the first test case a=[3,5,4,9] satisfies the conditions, because: " "1000  x25090"
    
1968B Prefiquence "greedy, two pointers" "You are given two binary strings a and b. A binary string is a string consisting of the characters \'0\' and \'1\'.
Your task is to determine the maximum possible number k such that a prefix of string a of length k is a subsequence of string b.
A sequence a is a subsequence of a sequence b if a can be obtained from b by the deletion of several (possibly, zero or all) elements.
The first line consists of a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of string a and the length of string b, respectively.
The second line of each test case contains a binary string a of length n.
The third line of each test case contains a binary string b of length m.
It is guaranteed that the sum of values n over all test cases does not exceed 2\xe2\x8b\x85105. Similarly, the sum of values m over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a single number \xe2\x80\x94 the maximum k, such that the first k characters of a form a subsequence of b.
In the first example, the string \'10\' is a subsequence of \'1110\' but the string \'100\' is not. So the answer is 2.
In the fifth example, a=\'100\', b=\'11010\', whole string a is a subsequence of string b. So the answer is 3.
In the sixth example, string b does not contain \'1\' so the answer is 0." "800  x27969"
    
1968A Maximize? "brute force, math, number theory" "You are given an integer x. Your task is to find any integer y (1\xe2\x89\xa4y<x) such that gcd(x,y)+y is maximum possible.
Note that if there is more than one y which satisfies the statement, you are allowed to find any.
gcd(a,b) is the Greatest Common Divisor of a and b. For example, gcd(6,4)=2.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
Each of the following t lines contains a single integer x (2\xe2\x89\xa4x\xe2\x89\xa41000).
For each test case, output any y (1\xe2\x89\xa4y<x), which satisfies the statement." "800  x34665"
    
1967F "Next and Prev" "brute force, data structures, implementation" "Let p1,\xe2\x80\xa6,pn be a permutation of [1,\xe2\x80\xa6,n].
Let the q-subsequence of p be a permutation of [1,q], whose elements are in the same relative order as in p1,\xe2\x80\xa6,pn. That is, we extract all elements not exceeding q together from p in the original order, and they make the q-subsequence of p.
For a given array a, let pre(i) be the largest value satisfying pre(i)<i and apre(i)>ai. If it does not exist, let pre(i)=\xe2\x88\x9210100. Let nxt(i) be the smallest value satisfying nxt(i)>i and anxt(i)>ai. If it does not exist, let nxt(i)=10100.
For each q such that 1\xe2\x89\xa4q\xe2\x89\xa4n, let a1,\xe2\x80\xa6,aq be the q-subsequence of p. For each i such that 1\xe2\x89\xa4i\xe2\x89\xa4q, pre(i) and nxt(i) will be calculated as defined. Then, you will be given some integer values of x, and for each of them you have to calculate q\xe2\x88\x91i=1min(nxt(i)\xe2\x88\x92pre(i),x).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the permutation.
The second line of each test case contains n integers p1,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the initial permutation.
Then, for each q such that 1\xe2\x89\xa4q\xe2\x89\xa4n in ascending order, you will be given an integer k (0\xe2\x89\xa4k\xe2\x89\xa4105), representing the number of queries for the q-subsequence. Then k numbers in a line follow: each of them is the value of x for a single query (1\xe2\x89\xa4x\xe2\x89\xa4q).
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105 and the sum of k over all test cases does not exceed 105.
For each test case, for each query, print a single line with an integer: the answer to the query.
The 1-subsequence is [1], and pre=[\xe2\x88\x9210100], nxt=[10100]. ans(1)=min(10100\xe2\x88\x92(\xe2\x88\x9210100),1)=1.
The 5-subsequence is [1,4,3,2,5], and pre=[\xe2\x88\x9210100,\xe2\x88\x9210100,2,3,\xe2\x88\x9210100], nxt=[2,5,5,5,10100]. ans(1)=5,ans(2)=10,ans(3)=14." "3200  x70"
    
1.97E+05 "Again Counting Arrays (Hard Version)" "combinatorics, dp, math" "This is the hard version of the problem. The differences between the two versions are the constraints on n,m,b0 and the time limit. You can make hacks only if both versions are solved.
Little R has counted many sets before, and now she decides to count arrays.
Little R thinks an array b0,\xe2\x80\xa6,bn consisting of non-negative integers is continuous if and only if, for each i such that 1\xe2\x89\xa4i\xe2\x89\xa4n, |bi\xe2\x88\x92bi\xe2\x88\x921|=1 is satisfied. She likes continuity, so she only wants to generate continuous arrays.
If Little R is given b0 and a1,\xe2\x80\xa6,an, she will try to generate a non-negative continuous array b, which has no similarity with a. More formally, for all 1\xe2\x89\xa4i\xe2\x89\xa4n, ai\xe2\x89\xa0bi holds.
However, Little R does not have any array a. Instead, she gives you n, m and b0. She wants to count the different integer arrays a1,\xe2\x80\xa6,an satisfying:
Note that bi\xe2\x89\xa50, but the bi can be arbitrarily large.
Since the actual answer may be enormous, please just tell her the answer modulo 998244353.
Each test contains multiple test cases. The first line contains the number of test cases tï¿½(1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first and only line of each test case contains three integers n, m, and b0 (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85106, 1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85106, 0\xe2\x89\xa4b0\xe2\x89\xa42\xe2\x8b\x85106)ï¿½\xe2\x80\x94 the length of the array a1,\xe2\x80\xa6,an, the maximum possible element in a1,\xe2\x80\xa6,an, and the initial element of the array b0,\xe2\x80\xa6,bn.
It is guaranteed that the sum of n over all test cases does not exceeds 107.
For each test case, output a single line containing an integer: the number of different arrays a1,\xe2\x80\xa6,an satisfying the conditions, modulo 998244353.
In the first test case, for example, when a=[1,2,1], we can set b=[1,0,1,0]. When a=[1,1,2], we can set b=[1,2,3,4]. In total, there are 6 valid choices of a1,\xe2\x80\xa6,an: in fact, it can be proved that only a=[2,1,1] and a=[2,1,2] make it impossible to construct a non-negative continuous b0,\xe2\x80\xa6,bn, so the answer is 23\xe2\x88\x922=6." "3500  x103"
    
1.97E+04 "Again Counting Arrays (Easy Version)" "combinatorics, dp, fft, math" "This is the easy version of the problem. The differences between the two versions are the constraints on n,m,b0 and the time limit. You can make hacks only if both versions are solved.
Little R has counted many sets before, and now she decides to count arrays.
Little R thinks an array b0,\xe2\x80\xa6,bn consisting of non-negative integers is continuous if and only if, for each i such that 1\xe2\x89\xa4i\xe2\x89\xa4n, |bi\xe2\x88\x92bi\xe2\x88\x921|=1 is satisfied. She likes continuity, so she only wants to generate continuous arrays.
If Little R is given b0 and a1,\xe2\x80\xa6,an, she will try to generate a non-negative continuous array b, which has no similarity with a. More formally, for all 1\xe2\x89\xa4i\xe2\x89\xa4n, ai\xe2\x89\xa0bi holds.
However, Little R does not have any array a. Instead, she gives you n, m and b0. She wants to count the different integer arrays a1,\xe2\x80\xa6,an satisfying:
Note that bi\xe2\x89\xa50, but the bi can be arbitrarily large.
Since the actual answer may be enormous, please just tell her the answer modulo 998244353.
Each test contains multiple test cases. The first line contains the number of test cases tï¿½(1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first and only line of each test case contains three integers n, m, and b0 (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4b0\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the length of the array a1,\xe2\x80\xa6,an, the maximum possible element in a1,\xe2\x80\xa6,an, and the initial element of the array b0,\xe2\x80\xa6,bn.
It is guaranteed that the sum of n over all test cases does not exceeds 2\xe2\x8b\x85105.
For each test case, output a single line containing an integer: the number of different arrays a1,\xe2\x80\xa6,an satisfying the conditions, modulo 998244353.
In the first test case, for example, when a=[1,2,1], we can set b=[1,0,1,0]. When a=[1,1,2], we can set b=[1,2,3,4]. In total, there are 6 valid choices of a1,\xe2\x80\xa6,an: in fact, it can be proved that only a=[2,1,1] and a=[2,1,2] make it impossible to construct a non-negative continuous b0,\xe2\x80\xa6,bn, so the answer is 23\xe2\x88\x922=6." "3100  x216"
    
1967D "Long Way to be Non-decreasing" "binary search, dfs and similar, graphs, implementation, shortest paths, two pointers" "Little R is a magician who likes non-decreasing arrays. She has an array of length n, initially as a1,\xe2\x80\xa6,an, in which each element is an integer between [1,m]. She wants it to be non-decreasing, i.e., a1\xe2\x89\xa4a2\xe2\x89\xa4\xe2\x80\xa6\xe2\x89\xa4an.
To do this, she can perform several magic tricks. Little R has a fixed array b1\xe2\x80\xa6bm of length m. Formally, let\'s define a trick as a procedure that does the following things in order:
Little R wonders how many tricks are needed at least to make the initial array non-decreasing. If it is not possible with any amount of tricks, print \xe2\x88\x921 instead.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n\xe2\x89\xa4106, 1\xe2\x89\xa4m\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the length of the initial array and the range of the elements in the array.
The second line of each test case contains n integers a1,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the initial array.
The third line of each test case contains m integers b1,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4m)ï¿½\xe2\x80\x94 the fixed magic array.
It is guaranteed that the sum of n over all test cases does not exceed 106 and the sum of m over all test cases does not exceed 106.
For each test case, output a single integer: the minimum number of tricks needed, or \xe2\x88\x921 if it is impossible to make a1,\xe2\x80\xa6,an non-decreasing.
In the first case, the initial array a1,\xe2\x80\xa6,an is [1,6,3,7,1]. You can choose S as follows: 
In the second case, it is impossible to make a1,\xe2\x80\xa6,an non-decreasing." "2800  x678"
    
1967C "Fenwick Tree" "bitmasks, brute force, combinatorics, data structures, dp, math, trees" "Let lowbit(x) denote the value of the lowest binary bit of x, e.g. lowbit(12)=4, lowbit(8)=8.
For an array a of length n, if an array s of length n satisfies sk=(k\xe2\x88\x91i=k\xe2\x88\x92lowbit(k)+1ai)mod998244353 for all k, then s is called the Fenwick Tree of a. Let\'s denote it as s=f(a).
For a positive integer k and an array a, fk(a) is defined as follows:
fk(a)={f(a)ifï¿½k=1f(fk\xe2\x88\x921(a))otherwise.
You are given an array b of length n and a positive integer k. Find an array a that satisfies 0\xe2\x89\xa4ai<998244353 and fk(a)=b. It can be proved that an answer always exists. If there are multiple possible answers, you may print any of them.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two positive integers n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) and k (1\xe2\x89\xa4k\xe2\x89\xa4109), representing the length of the array and the number of times the function f is performed.
The second line of each test case contains an array b1,b2,\xe2\x80\xa6,bn (0\xe2\x89\xa4bi<998244353).
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print a single line, containing a valid array a of length n.
In the first test case, it can be seen that f1([1,1,1,1,1,1,1,1])=[1,2,1,4,1,2,1,8].
In the second test case, it can be seen that f2([1,2,3,4,5,6])=f1([1,3,3,10,5,11])=[1,4,3,17,5,16]." "2300  x1779"
    
1967B2 "Reverse Card (Hard Version)" "brute force, math, number theory" "The two versions are different problems. You may want to read both versions. You can make hacks only if both versions are solved.
You are given two positive integers n, m.
Calculate the number of ordered pairs (a,b) satisfying the following conditions:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n, m (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85106).
It is guaranteed that neither the sum of n nor the sum of m over all test cases exceeds 2\xe2\x8b\x85106.
For each test case, print a single integer: the number of valid pairs.
In the first test case, no pair satisfies the conditions.
In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the conditions." "2200  x3946"
    
1967B1 "Reverse Card (Easy Version)" "brute force, math, number theory" "The two versions are different problems. You may want to read both versions. You can make hacks only if both versions are solved.
You are given two positive integers n, m.
Calculate the number of ordered pairs (a,b) satisfying the following conditions:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of the test cases follows.
The first line of each test case contains two integers n, m (1\xe2\x89\xa4n,m\xe2\x89\xa42\xe2\x8b\x85106).
It is guaranteed that neither the sum of n nor the sum of m over all test cases exceeds 2\xe2\x8b\x85106.
For each test case, print a single integer: the number of valid pairs.
In the first test case, only (1,1) satisfies the conditions.
In the fourth test case, (1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2) satisfy the conditions." "1400  x13336"
    
1967A "Permutation Counting" "binary search, greedy, implementation, math, sortings" "You have some cards. An integer between 1 and n is written on each card: specifically, for each i from 1 to n, you have ai cards which have the number i written on them.
There is also a shop which contains unlimited cards of each type. You have k coins, so you can buy k new cards in total, and the cards you buy can contain any integer between 1 and n.
After buying the new cards, you rearrange all your cards in a line. The score of a rearrangement is the number of (contiguous) subarrays of length n which are a permutation of [1,2,\xe2\x80\xa6,n]. What\'s the maximum score you can get?
Each test contains multiple test cases. The first line contains the number of test cases tï¿½(1\xe2\x89\xa4t\xe2\x89\xa4100). The description of the test cases follows.
The first line of each test case contains two integers n, k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 0\xe2\x89\xa4k\xe2\x89\xa41012)ï¿½\xe2\x80\x94 the number of distinct types of cards and the number of coins.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41012)ï¿½\xe2\x80\x94 the number of cards of type i you have at the beginning.
It is guaranteed that the sum of n over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, output a single line containing an integer: the maximum score you can get.
In the first test case, the final (and only) array we can get is [1,1,1,1,1,1,1,1,1,1,1] (including 11 single 1s), which contains 11 subarrays consisting of a permutation of [1].
In the second test case, we can buy 0 cards of type 1 and 4 cards of type 2, and then we rearrange the cards as following: [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]. There are 8 subarrays equal to [1,2] and 7 subarrays equal to [2,1], which make a total of 15 subarrays which are a permutation of [1,2]. It can also be proved that this is the maximum score we can get.
In the third test case, one of the possible optimal rearrangements is [3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,3]." "1400  x12528"
    
1966B "Rectangle Filling" "constructive algorithms, implementation" "There is an n\xc3\x97m grid of white and black squares. In one operation, you can select any two squares of the same color, and color all squares in the subrectangle between them that color.
Formally, if you select positions (x1,y1) and (x2,y2), both of which are currently the same color c, set the color of all (x,y) where min(x1,x2)\xe2\x89\xa4x\xe2\x89\xa4max(x1,x2) and min(y1,y2)\xe2\x89\xa4y\xe2\x89\xa4max(y1,y2) to c.
This diagram shows a sequence of two possible operations on a grid:
Is it possible for all squares in the grid to be the same color, after performing any number of operations (possibly zero)?
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of rows and columns in the grid, respectively.
Each of the next n lines contains m characters \'W\' and \'B\'ï¿½\xe2\x80\x94 the initial colors of the squares of the grid. 
It is guaranteed that the sum of n\xe2\x8b\x85m over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, print ""YES"" if it is possible to make all squares in the grid the same color, and ""NO"" otherwise.
You can output the answer in any case (upper or lower). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive responses.
In the first example, it is impossible to ever change the color of any square with an operation, so we output NO.
The second example is the case pictured above. As shown in that diagram, it is possible for all squares to be white after two operations, so we output YES.
In the third and fourth examples, all squares are already the same color, so we output YES.
In the fifth example we can do everything in two operations. First, select positions (2,1) and (1,4) and color all squares with 1\xe2\x89\xa4x\xe2\x89\xa42 and 1\xe2\x89\xa4y\xe2\x89\xa44 to white. Then, select positions (2,1) and (3,4) and color all squares with 2\xe2\x89\xa4x\xe2\x89\xa43 and 1\xe2\x89\xa4y\xe2\x89\xa44 to white. After these two operations all squares are white." "1100  x15024"
    
1966A "Card Exchange" "constructive algorithms, games, greedy" "You have a hand of nn cards, where each card has a number written on it, and a fixed integer kk. You can perform the following operation any number of times:
Here is one possible sequence of operations for the first example case, which has k=3k=3:
What is the minimum number of cards you can have in your hand at the end of this process?
The first line of the input contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa45001\xe2\x89\xa4t\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains two integers nn and kk (1\xe2\x89\xa4n\xe2\x89\xa41001\xe2\x89\xa4n\xe2\x89\xa4100, 2\xe2\x89\xa4k\xe2\x89\xa41002\xe2\x89\xa4k\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of cards you have, and the number of cards you exchange during each operation, respectively.
The next line of each test case contains nn integers c1,c2,\xe2\x80\xa6cnc1,c2,\xe2\x80\xa6cn (1\xe2\x89\xa4ci\xe2\x89\xa41001\xe2\x89\xa4ci\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the numbers written on your cards.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of cards you can have left in your hand after any number of operations.
The first example case corresponds to the picture above. The sequence of operations displayed there is optimal, so the answer is 22.
In the second example case, no operations can be performed, so the answer is 11.
In the fourth example case, you can repeatedly select 44 cards numbered with 11 and replace them with 33 cards numbered with 11, until there are 33 cards left." "800  x17917"
    
1965F Conference "data structures, flows" "You have been asked to organize a very important art conference. The first step is to choose the dates.
The conference must last for a certain number of consecutive days. Each day, one lecturer must perform, and the same lecturer cannot perform more than once.
You asked n potential lecturers if they could participate in the conference. Lecturer i indicated that they could perform on any day from li to ri inclusive.
A certain segment of days can be chosen as the conference dates if there is a way to assign an available lecturer to each day of the segment, assigning each lecturer to no more than one day.
For each k from 1 to n, find how many ways there are to choose a segment of k consecutive days as the conference dates.
The first line of input contains one integer nï¿½\xe2\x80\x94 the number of potential lecturers (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105).
Each of the next n lines contains two integers li and riï¿½\xe2\x80\x94 the segment of available days for the ith lecturer (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa42\xe2\x8b\x85105).
Print n integers, where the kth number denotes the number of ways to select a segment of k consecutive days as conference dates.
In the first testcase, a one-day conference can be organized on any of the days from 1 to 6. A two-day conference can be organized from day 2 to day 3, as well as from day 4 to day 5.
In the second testcase, five lecturers can perform only from day 1 to day 3, so it will not be possible to organize a conference longer than three days." "3300  x177"
    
1965E "Connected Cubes" "constructive algorithms, games" "There are n\xe2\x8b\x85mn\xe2\x8b\x85m unit cubes currently in positions (1,1,1)(1,1,1) through (n,m,1)(n,m,1). Each of these cubes is one of kk colors. You want to add additional cubes at any integer coordinates such that the subset of cubes of each color is connected, where two cubes are considered connected if they share a face.
In other words, for every pair of cubes of the same color cc, it should be possible to travel from one to the other, moving only through cubes of color cc that share a face.
The existing cubes are currently in the corner of a room. There are colorless cubes completely filling the planes x=0x=0, y=0y=0, and z=0z=0, preventing you from placing additional cubes there or at any negative coordinates.
Find a solution that uses at most 4\xe2\x8b\x851054\xe2\x8b\x85105 additional cubes (not including the cubes that are currently present), or determine that there is no solution. It can be shown that under the given constraints, if there is a solution, there is one using at most 4\xe2\x8b\x851054\xe2\x8b\x85105 additional cubes.
The first line of the input contains three integers nn, mm, and kk (2\xe2\x89\xa4n,m,k\xe2\x89\xa4502\xe2\x89\xa4n,m,k\xe2\x89\xa450)ï¿½\xe2\x80\x94 the number of rows and columns of cubes, and the number of colors, respectively.
The ii-th of the next nn lines contains mm integers. The jj-th of these is aijaij (1\xe2\x89\xa4aij\xe2\x89\xa4k1\xe2\x89\xa4aij\xe2\x89\xa4k)ï¿½\xe2\x80\x94 the color of the cube at position (i,j,1)(i,j,1). For every color from 11 to kk, it is guaranteed that there is at least one cube in the input of that color.
If there is no solution, print a single integer \xe2\x88\x921\xe2\x88\x921.
Otherwise, the first line of output should contain a single integer pp (0\xe2\x89\xa4p\xe2\x89\xa44\xe2\x8b\x851050\xe2\x89\xa4p\xe2\x89\xa44\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of additional cubes you will add.
The next pp lines should contain four integers xx, yy, zz and cc (1\xe2\x89\xa4x,y,z\xe2\x89\xa41061\xe2\x89\xa4x,y,z\xe2\x89\xa4106, 1\xe2\x89\xa4c\xe2\x89\xa4k1\xe2\x89\xa4c\xe2\x89\xa4k)ï¿½\xe2\x80\x94 indicating that you are adding a cube with color cc at position (x,y,z)(x,y,z).
No two cubes in the output should have the same coordinates, and no cube in the output should have the same coordinates as any cube in the input.
If there are multiple solutions, print any.
The image in the statement corresponds to the first example case, with red=1red=1, blue=2blue=2, green=3green=3." "3100  x286"
    
1965D "Missing Subarray Sum" "constructive algorithms" "There is a hidden array a of n positive integers. You know that a is a palindrome, or in other words, for all 1\xe2\x89\xa4i\xe2\x89\xa4n, ai=an+1\xe2\x88\x92i. You are given the sums of all but one of its distinct subarrays, in arbitrary order. The subarray whose sum is not given can be any of the n(n+1)2 distinct subarrays of a.
Recover any possible palindrome a. The input is chosen such that there is always at least one array a that satisfies the conditions.
An array b is a subarray of a if b can be obtained from a by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4200)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (3\xe2\x89\xa4n\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the size of the array a.
The next line of each test case contains n(n+1)2\xe2\x88\x921 integers si (1\xe2\x89\xa4si\xe2\x89\xa4109)ï¿½\xe2\x80\x94 all but one of the subarray sums of a.
It is guaranteed that the sum of n over all test cases does not exceed 1000.
Additional constraint on the input: There is always at least one valid solution.
Hacks are disabled for this problem.
For each test case, print one line containing n positive integers a1,a2,\xe2\x8b\xafanï¿½\xe2\x80\x94 any valid array a. Note that a must be a palindrome.
If there are multiple solutions, print any.
For the first example case, the subarrays of a=[1,2,1] are: 
For the second example case, the missing subarray sum is 4, for the subarray [2,2].
For the third example case, the missing subarray sum is 13, because there are two subarrays with sum 13 ([3,5,5] and [5,5,3]) but 13 only occurs once in the input." "2900  x431"
    
1965C "Folding Strip" "constructive algorithms, greedy, strings" "You have a strip of paper with a binary string ss of length nn. You can fold the paper in between any pair of adjacent digits.
A set of folds is considered valid if after the folds, all characters that are on top of or below each other match. Note that all folds are made at the same time, so the characters don\'t have to match in between folds.
For example, these are valid foldings of s=110110110011s=110110110011 and s=01110s=01110:
The length of the folded strip is the length seen from above after all folds are made. So for the two above examples, after the folds shown above, the lengths would be 77 and 33, respectively.
Notice that for the above folding of s=01110s=01110, if we made either of the two folds on their own, that would not be a valid folding. However, because we don\'t check for validity until all folds are made, this folding is valid.
After performing a set of valid folds, what is the minimum length strip you can form?
The first line of the input contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer nn (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the size of the strip.
The second line of each test case contains a string ss of nn characters \'0\' and \'1\'ï¿½\xe2\x80\x94 a description of the digits on the strip.
It is guaranteed that the sum of nn over all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum possible length of the strip after a valid folding.
For the first example case, one optimal folding is to fold the strip in the middle, which produces a strip of length 3.
The third and fourth example cases correspond to the images above. Note that the folding shown above for s=110110110011s=110110110011 is not of minimal length." "2300  x1947"
    
1965B "Missing Subsequence Sum" "bitmasks, constructive algorithms, greedy, number theory" "You are given two integers n and k. Find a sequence a of non-negative integers of size at most 25 such that the following conditions hold.
A sequence b is a subsequence of a if b can be obtained from a by the deletion of several (possibly, zero or all) elements, without changing the order of the remaining elements. For example, [5,2,3] is a subsequence of [1,5,7,8,2,4,3].
It can be shown that under the given constraints, a solution always exists.
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
Each test case consists of a single line containing two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa4106, 1\xe2\x89\xa4k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the parameters described above. 
It is guaranteed that the sum of n over all test cases does not exceed 107.
The first line of output for each test case should contain a single integer m (1\xe2\x89\xa4m\xe2\x89\xa425)ï¿½\xe2\x80\x94 the size of your chosen sequence.
The second line of output for each test case should contain m integers ai (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements of your chosen sequence.
If there are multiple solutions, print any.
In the first example, we just need a subsequence that adds up to 1, but not one that adds up to 2. So the array a=[1] suffices.
In the second example, all elements are greater than k=1, so no subsequence adds up to 1. Every other integer between 1 and n is present in the array, so there is a subsequence of size 1 adding up to each of those numbers." "1800  x6752"
    
1965A "Everything Nim" "games, greedy, math, sortings" "Alice and Bob are playing a game on n piles of stones. On each player\'s turn, they select a positive integer k that is at most the size of the smallest nonempty pile and remove k stones from each nonempty pile at once. The first player who is unable to make a move (because all piles are empty) loses.
Given that Alice goes first, who will win the game if both players play optimally?
The first line of the input contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of piles in the game.
The next line of each test case contains n integers a1,a2,\xe2\x80\xa6an (1\xe2\x89\xa4ai\xe2\x89\xa4109), where ai is the initial number of stones in the i-th pile.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, print a single line with the name of the winner, assuming both players play optimally. If Alice wins, print ""Alice"", otherwise print ""Bob"" (without quotes).
In the first test case, Alice can win by choosing k=3 on her first turn, which will empty all of the piles at once.
In the second test case, Alice must choose k=1 on her first turn since there is a pile of size 1, so Bob can win on the next turn by choosing k=6." "1400  x13791"
    
1958J Necromancer "*special problem" "Monocarp is playing a computer game. In this game, his character is a necromancer. He is fighting n monsters numbered from 1 to n. Each monster has two parameters: health and strength.
Monocarp considers q scenarios of the battle. In each scenario, he chooses some segment [l,r] of monsters and calculates the number of moves it takes to defeat all these monsters.
Each scenario proceeds as follows. First, Monocarp kills monster l and revives it as a zombie (this does not count as a move). Then each move the following happens: let i be the index of the first monster in the segment [l,r] that is still alive. All zombies attack monster i, reducing its health by their total strength. After that, if monster i has 0 or less health, it dies and Monocarp revives it as a zombie.
When the monster is revived, the zombie\'s strength is equal to the monster\'s strength.
Help Monocarp for each scenario to calculate how many moves it will take to kill all the monsters in the segment.
The first line contains two integers n and q (1\xe2\x89\xa4n,q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of monsters and the number of scenarios, respectively.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4104), where ai is the number of health points of the i-th monster.
The third line contains n integers b1,b2,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4104), where bi is the strength of the i-th monster.
Then q lines follow. The j-th of them contains two integers lj and rj (1\xe2\x89\xa4lj\xe2\x89\xa4rj\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the boundaries of the j-th scenario.
For each scenario, print a single integerï¿½\xe2\x80\x94 the number of moves it will take to kill all the monsters in the segment." "3200  x32"
    
1958I "Equal Trees" "*special problem, graphs, meet-in-the-middle" "You are given two rooted trees, consisting of n vertices each. The vertices in the trees are numbered from 1 to n, and the root is the vertex 1.
You can perform the following operation: choose the tree and the vertex v (except the root of the tree) in it; connect the child nodes of v to the parent of v and remove v from the tree.
Let\'s say that two trees are equal if both of the following conditions hold: 
Your task is to calculate the minimum number of aforementioned operation in order to make the trees equal.
The first line contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa440)ï¿½\xe2\x80\x94 the number of vertices in the trees.
The second line contains n\xe2\x88\x921 integers a2,a3,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n), where ai the parent of the i-th vertex in the first tree. Vertex 1 is the root.
The third line contains n\xe2\x88\x921 integers b2,b3,\xe2\x80\xa6,bn (1\xe2\x89\xa4bi\xe2\x89\xa4n), where bi the parent of the i-th vertex in the second tree. Vertex 1 is the root.
Print a single integerï¿½\xe2\x80\x94 the minimum number of aforementioned operation in order to make the trees equal." "3100  x34"
    
1958H "Composite Spells" "*special problem, dp" "Monocarp plays a fantasy RPG. His character is a mage, so he casts spells. There are two types of spells he knows \xe2\x80\x94 basic spells and composite spells.
There are n basic spells in Monocarp\'s spell book, numbered from 1 to n. Each basic spell simply changes the health of the target: either decreases it or increases it. The i-th basic spell changes the target\'s health value by bi (increases by bi if bi is non-negative, or decreases by |bi| if bi is negative). If the target\'s health value goes to 0 or below, it dies, and all next spells cast at it do nothing.
There are also m composite spells in the spell book, numbered from n+1 to n+m. Each composite spell is a sequence of other spells, cast in specific order. A composite spell can consist both of basic spells and composite spells; the i-th spell consists of si other spells, and each of those spells has index strictly less than i (so there is no situation that composite spells infinitely cast each other). So, actually, each composite spell can be considered a finite sequence of basic spells, although its length might be huge. Note that the same spell can appear in a composite spell multiple times.
Monocarp has decided to cast the (n+m)-th spell from his spell book. The target of this spell is a monster with an initial health value of hp. Monocarp wants to know whether the monster will be killed or not, and if it will be killed, which basic spell will kill it.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
Each test case is given as follows:
Additional constraints on the input: 
For each test case, print one integer:" "2600  x78"
    
1958G "Observation Towers" "*special problem" "Consider a segment of an OX axis from 1 to n. There are k observation towers on this segment.
Each tower has two parametersï¿½\xe2\x80\x94 the coordinate xi and the height hi. The coordinates of all towers are distinct. From tower i, you can see point j if |xi\xe2\x88\x92j|\xe2\x89\xa4hi (where |a| is an absolute value of a).
You can increase the height of any tower by 1 for one coin. The height of each tower can be increased any number of times (including zero).
You need to process q independent queries. In the i-th query, two different points l and r are given. You need to calculate the minimum number of coins required to be able to see both of these points (from one tower or from different towers).
The first line contains two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the length of the segment of an OX axis and the number of observation towers.
The second line contains k integers x1,x2,\xe2\x80\xa6,xk (1\xe2\x89\xa4xi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the coordinates of the observation towers. The coordinates of all towers are distinct.
The third line contains k integers h1,h2,\xe2\x80\xa6,hk (0\xe2\x89\xa4hi\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the heights of the observation towers.
The fourth line contains a single integer q (1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of queries.
Each of the next q lines contains two integers l and r (1\xe2\x89\xa4l<r\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the description of the next query.
For each query, output a single integerï¿½\xe2\x80\x94 the minimum number of coins required to be able to see both points (from one tower or from different towers)." "2400  x110"
    
1958F "Narrow Paths" "*special problem, combinatorics" "Monocarp is wandering through a matrix consisting of 2 rows and n columns. Let\'s denote the cell in the i-th row and j-th column as (i,j). Monocarp starts at cell (1,1) and wants to reach cell (2,n).
In one move, Monocarp can move in one of two directions: 
Monocarp can\'t go outside the matrix.
Polycarp wants to prevent Monocarp from freely wandering through the matrix. To do this, he wants to choose exactly k different cells in the matrix and block them. He cannot choose cells (1,1) and (2,n).
For each i from 0 to n, Polycarp wants to know how many ways he can block exactly k cells, so that Monocarp has exactly i different paths from (1,1) to (2,n). Two paths are considered different if there exists a cell that Monocarp visits in one path but not in the other.
As the number of ways can be quite large, output it modulo 109+7.
The only line contains two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 2\xe2\x89\xa4k\xe2\x89\xa42\xe2\x8b\x85n\xe2\x88\x922)ï¿½\xe2\x80\x94 the number of columns in the matrix and the number of cells Polycarp wants to block.
Output n+1 integers: for each i from 0 to n, the number of ways to block exactly k cells, so that Monocarp has exactly i different paths from (1,1) to (2,n). Output all answers modulo 109+7." "2000  x192"
    
1958E "Yet Another Permutation Constructive" "*special problem, constructive algorithms" "Suppose you have a permutation p of n integers \xe2\x80\x94 an array where each element is an integer from 1 to n, and every integer from 1 to n appears exactly once.
In one operation, you remove every element of this permutation which is less than at least one of its neighbors. For example, when you apply the operation to [3,1,2,5,4], you get [3,5]. If you apply an operation again, you get [5].
It\'s easy to see that after applying a finite number of operations, you get an array consisting of a single integer n.
You are given two integers n and k. Find a permutation of n integers such that it becomes an array consisting of a single element n after exactly k operations (and not earlier).
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa42000) \xe2\x80\x94 the number of test cases.
Each test case consists of one line containing two integers n and k (2\xe2\x89\xa4n\xe2\x89\xa4100; 1\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x88\x921).
For each test case, print the answer as follows:" "1900  x256"
    
1958D Staircase "*special problem" "There is a staircase consisting of n steps. Each step is either intact, or broken. For each broken step, an integer ai is given denoting the difficulty of repairing it.
Every day, you can either:
You want to repair all broken steps of the staircase, and you want to do it in the minimum possible number of days. What is the minimum total effort it will take to repair all broken steps in the minimum number of days?
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
Each test case consists of two lines:
Additional constraint on the input: the sum of values of n does not exceed 3\xe2\x8b\x85105.
For each test case, print one integer \xe2\x80\x94 the minimum possible total effort it will take to repair all broken steps in the minimum number of days.
In the first test case, you don\'t have to do anything.
In the second test case, you can repair the 3-rd and the 4-th step during the first day, and the 2-nd step during the second day. The total effort will be 2\xe2\x8b\x85(15+8)+13=59.
In the third test case, you can repair the 4-th step during the first day, and two first steps during the second day. The total effort will be 8+2\xe2\x8b\x85(13+15)=64." "1600  x533"
    
1958C Firewood "*special problem" "It\'s pretty cold in Berland (yes, even in May). So Monocarp has to light his fireplace.
Monocarp has a big log of wood, which weighs 2n grams. Monocarp has watched the weather forecast and decided that he has to burn k grams of wood in the fireplace today, and the remaining 2n\xe2\x88\x92k grams of wood will be used tomorrow.
In one minute, Monocarp can use his saw to split one of his logs in half. Initially he has only one log, but of course, after splitting a log, he gets two new logs. If the weight of the log is x, then each of the resulting logs has weight equal to x2. Monocarp can\'t split logs of weight 1 gram.
Monocarp has to cut his log in such a way that some of the resulting logs weigh exactly k grams in total (and since the total weight of wood doesn\'t change, the remaining logs will have a total weight equal to exactly 2n\xe2\x88\x92k). Help him to calculate the minimum number of minutes he has to spend cutting the logs.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases.
Each test case consists of one line containing two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa460; 1\xe2\x89\xa4k\xe2\x89\xa42n\xe2\x88\x921). 
For each test case, print one integer \xe2\x80\x94 the minimum number of minutes Monocarp has to spend splitting the wood.
In the first test case, Monocarp has to cut his log exactly once. Then he will have two logs weighing 2 grams each.
In the second test case, Monocarp has to cut his log of 4 grams once, then cut one of the resulting logs. He will have one log of weight 2 and two logs of weight 1, so he can use two logs to get exactly 3 grams." "1500  x727"
    
1958B "Clock in the Pool" "*special problem, math" "You are swimming in the pool, and you need to control the time of swimming.
The pool has a clock that cycles between three different modes: showing water temperature, showing air temperature, and showing time. At the start of the 0-th second it starts showing water temperature, at the start of the k-th second it switches to air temperature. At the start of the 2k-th second, it switches to showing time.
At the start of the 3k-th second the clock starts showing water temperature again, at the start of the 4k-th secondï¿½\xe2\x80\x94 air temperature, and so on.
You looked at the clock during the m-th second to check the time, but it may be that the clock is not showing time right now. How much time do you have to wait to see the time on the clock?
Answer t independent test cases.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases. Next t cases follow.
The first and only line of each test case contains two integers k and m (1\xe2\x89\xa4k\xe2\x89\xa4108;1\xe2\x89\xa4m\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the length of the period of the clock and the moment of time you check the clock.
For each test case, print a single integerï¿½\xe2\x80\x94 the time you have to wait from the moment m until the moment the clock starts showing the time.
You can assume that you are able to read the time instantly the moment it displays on the clock.
In the first test case, the clock will start showing time during the 2-nd second, so you have to wait 2\xe2\x88\x921=1 second.
In the second test case, the clock shows time from the 10-th until the 15-th second, so during the 14-th second it shows time, and you don\'t have to wait.
In the third test case, during the 15-th second, the clock is already showing water temperature. So you have to wait till the 25-th second, when the clock starts showing time again. You\'ll wait 25\xe2\x88\x9215=10 seconds.
In the fourth test case, the clock will start showing time at the start of the 110-th second, so you\'ll wait 110\xe2\x88\x92110=0 seconds." "1400  x902"
    
1958A 1-3-5 "*special problem, dp" "In Berland, coins of worth 1, 3 and 5 burles are commonly used (burles are local currency).
Eva has to pay exactly n burles in a shop. She has an infinite amount of coins of all three types. However, she doesn\'t like to pay using coins worth 1 burle \xe2\x80\x94 she thinks they are the most convenient to use.
Help Eva to calculate the minimum number of coins worth 1 burle she has to use, if she has to pay exactly n burles. Note that she can spend any number of coins worth 3 and/or 5 burles.
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x94 the number of test cases.
Each test case consists of one line, containing one integer n (1\xe2\x89\xa4n\xe2\x89\xa4100).
For each test case, print one integer \xe2\x80\x94 the minimum number of 1-burle coins Eva has to use.
In the first test case, Eva should use 1 coin worth 1 burle, and 2 coins worth 3 burles.
In the second test case, Eva should use 1 coin worth 3 burles and 1 coin worth 5 burles.
In the third test case, Eva should use 14 coins worth 3 burles.
In the fourth test case, Eva should use 2 coins worth 1 burle.
In the fifth test case, Eva should use 2 coins worth 3 burles and 1 coin worth 5 burles." "1100  x1971"
    
1957F2 "Frequency Mismatch (Hard Version)" "binary search, data structures, dfs and similar, hashing, probabilities, trees" "This is the hard version of the problem. The difference between the two versions of this problem is the constraint on k. You can make hacks only if all versions of the problem are solved.
You are given an undirected tree of n nodes. Each node v has a value av written on it. You have to answer queries related to the tree.
You are given q queries. In each query, you are given 5 integers, u1,v1,u2,v2,k. Denote the count of nodes with value c on path u1\xe2\x86\x92v1 with xc, and the count of nodes with value c on path u2\xe2\x86\x92v2 with yc. If there are z such values of c such that xc\xe2\x89\xa0yc, output any min(z,k) such values in any order.
The first line contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of nodes in the tree.
The next line contains n integers, a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the value written on each node of the tree.
Then n\xe2\x88\x921 lines follow. Each line contains two integers u and v (1\xe2\x89\xa4u,v\xe2\x89\xa4n,u\xe2\x89\xa0v) denoting an edge of the tree. It is guaranteed that the given edges form a tree.
The next line contains one integer q (1\xe2\x89\xa4q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of queries.
Then q lines follow. Each line contains five integers u1,v1,u2,v2,k (1\xe2\x89\xa4u1,v1,u2,v2\xe2\x89\xa4n, 1\xe2\x89\xa4k\xe2\x89\xa410).
For each query, output on a separate line. For a query, first output min(z,k) and then on the same line, output any min(z,k) values in any order which occur a different number of times in each path.
For query 1, the first path is 1\xe2\x86\x922\xe2\x86\x924, coming across the multiset of values {5,2,4}. On the second path 4\xe2\x86\x922\xe2\x86\x925, we have the multiset {4,2,3}. Two numbersï¿½\xe2\x80\x94 3 and 5 occur a different number of times, hence we print them both.
In query 2, there is no difference between the paths, hence we output 0.
In query 3, we have the same paths as query 1, but we need to output only 1 value, hence we output 5. 
In query 4, the first path is just the node 5, resulting in the multiset {3}, and the second path 4\xe2\x86\x922\xe2\x86\x921\xe2\x86\x923 gives {4,2,5,3}. The numbers 5, 2 and 4 occur a different number of times." "2700  x441"
    
1957F1 "Frequency Mismatch (Easy Version)" "binary search, data structures, divide and conquer, hashing, probabilities, trees" "This is the easy version of the problem. The difference between the two versions of this problem is the constraint on k. You can make hacks only if all versions of the problem are solved.
You are given an undirected tree of n nodes. Each node v has a value av written on it. You have to answer queries related to the tree.
You are given q queries. In each query, you are given 5 integers, u1,v1,u2,v2,k. Denote the count of nodes with value c on path u1\xe2\x86\x92v1 with xc, and the count of nodes with value c on path u2\xe2\x86\x92v2 with yc. If there are z such values of c such that xc\xe2\x89\xa0yc, output any min(z,k) such values in any order.
The first line contains one integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of nodes in the tree.
The next line contains n integers, a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the value written on each node of the tree.
Then n\xe2\x88\x921 lines follow. Each line contains two integers u and v (1\xe2\x89\xa4u,v\xe2\x89\xa4n,u\xe2\x89\xa0v) denoting an edge of the tree. It is guaranteed that the given edges form a tree.
The next line contains one integer q (1\xe2\x89\xa4q\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of queries.
Then q lines follow. Each line contains five integers u1,v1,u2,v2,k (1\xe2\x89\xa4u1,v1,u2,v2\xe2\x89\xa4n, k=1).
For each query, output on a separate line. For a query, first output min(z,k) and then on the same line, output any min(z,k) values in any order which occur a different number of times in each path.
For query 1, the first path is 1\xe2\x86\x922\xe2\x86\x924, coming across the multiset of values {5,2,4}. On the second path 4\xe2\x86\x922\xe2\x86\x925, we have the multiset {4,2,3}. Two numbersï¿½\xe2\x80\x94 3 and 5 occur a different number of times, hence we print one of them.
In query 2, there is no difference between the paths, hence we output 0.
In query 3, the first path is just the node 5, resulting in the multiset {3}, and the second path 4\xe2\x86\x922\xe2\x86\x921\xe2\x86\x923 gives {4,2,5,3}. The numbers 5, 2 and 4 occur a different number of times." "2600  x499"
    
1957E "Carousel of Combinations" "brute force, combinatorics, dp, math, number theory" "You are given an integer n. The function C(i,k) represents the number of distinct ways you can select k distinct numbers from the set {1,2,\xe2\x80\xa6,i} and arrange them in a circle\xe2\x80\xa0.
Find the value of n\xe2\x88\x91i=1i\xe2\x88\x91j=1(C(i,j)modj). Here, the operation xmody denotes the remainder from dividing x by y.
Since this value can be very large, find it modulo 109+7.
\xe2\x80\xa0 In a circular arrangement, sequences are considered identical if one can be rotated to match the other. For instance, [1,2,3] and [2,3,1] are equivalent in a circle.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4106).
For each test case, output a single integer on a new lineï¿½\xe2\x80\x94 the value of the expression to be calculated modulo 109+7.
In the first test case, C(1,1)mod1=0.
In the second test case: " "2400  x1274"
    
1957D "A BIT of an Inequality" "bitmasks, brute force, dp, math" "You are given an array a1,a2,\xe2\x80\xa6,an. Find the number of tuples (x,y,z) such that: 
We define f(l,r)=al\xe2\x8a\x95al+1\xe2\x8a\x95\xe2\x80\xa6\xe2\x8a\x95ar, where \xe2\x8a\x95 denotes the bitwise XOR operation.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105).
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109).
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output a single integer on a new lineï¿½\xe2\x80\x94 the number of described tuples.
In the first case, there are 4 such tuples in the array [6,2,4]: 
In the second test case, there are no such tuples." "1900  x4498"
    
1957C "How Does the Rook Move?" "combinatorics, dp, math" "You are given an n\xc3\x97n chessboard where you and the computer take turns alternatingly to place white rooks & black rooks on the board respectively. While placing rooks, you have to ensure that no two rooks attack each other. Two rooks attack each other if they share the same row or column regardless of color.
A valid move is placing a rook on a position (r, c) such that it doesn\'t attack any other rook.
You start first, and when you make a valid move in your turn, placing a white rook at position (r, c), the computer will mirror you and place a black rook at position (c, r) in its turn. If r=c, then the computer can\'t mirror your move, and skips its turn.
You have already played k moves with the computer (the computer tries to mirror these moves too), and you must continue playing the game until there are no valid moves remaining. How many different final configurations are possible when you continue the game after the k moves? It is guaranteed that the k moves and the implied computer moves are valid. Since the answer may be large, print it modulo 109+7.
Two configurations are considered different if there exists a coordinate (r, c) which has a rook in one configuration, but not in the other or the color of the rook on the coordinate is different.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105, 0\xe2\x89\xa4k\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the size of the chessboard and the number of moves you have already played respectively.
Each of the next k lines of the test case contains two integers ri and ci, denoting the i-th move you made.
It is guaranteed that the k moves and the implied computer moves are valid.
It is guaranteed that the sum of n over all test cases does not exceed 3\xe2\x8b\x85105.
For each test case, output a single integer on a new lineï¿½\xe2\x80\x94 the total number of possible final configurations modulo 109+7.
In the first test case, we have a 4\xc3\x974 grid and you\'ve already played 1 move. After you and the computer play a turn, we have a white rook at (1, 2), and a black rook at (2, 1). There are three possible configurations from this stateï¿½\xe2\x80\x94" "1600  x9715"
    
1957B "A BIT of a Construction" "bitmasks, constructive algorithms, greedy, implementation" "Given integers n and k, construct a sequence of n non-negative (i.e. \xe2\x89\xa50) integers a1,a2,\xe2\x80\xa6,an such that 
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The only line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4k\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the number of non-negative integers to be printed and the sum respectively.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output a sequence a1,a2,\xe2\x80\xa6,an on a new line that satisfies the conditions given above.
If there are multiple solutions, print any of them.
In the first test case, we have to print exactly one integer, hence we can only output 5 as the answer.
In the second test case, we output 1,2 which sum up to 3, and 1|2=(11)2 has two 1s in its binary representation, which is the maximum we can achieve in these constraints.
In the fourth test case, we output 3,1,1,32,2,12 which sum up to 51, and 3|1|1|32|2|12=(101111)2 has five 1s in its binary representation, which is the maximum we can achieve in these constraints." "1100  x17994"
    
1957A Stickogon "constructive algorithms, greedy" "You are given n sticks of lengths a1,a2,\xe2\x80\xa6,an. Find the maximum number of regular (equal-sided) polygons you can construct simultaneously, such that: 
Note: Sticks cannot be broken.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of sticks available.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the stick lengths.
For each test case, output a single integer on a new lineï¿½\xe2\x80\x94 the maximum number of regular (equal-sided) polygons you can make simultaneously from the sticks available.
In the first test case, we only have one stick, hence we can\'t form any polygon.
In the second test case, the two sticks aren\'t enough to form a polygon either.
In the third test case, we can use the 4 sticks of length 3 to create a square.
In the fourth test case, we can make a pentagon with side length 2, and a square of side length 4." "800  x23367"
    
1956F "Nene and the Passing Game" "constructive algorithms, data structures, dsu, graphs, sortings" "Nene is training her team as a basketball coach. Nene\'s team consists of n players, numbered from 1 to n. The i-th player has an arm interval [li,ri]. Two players i and j (i\xe2\x89\xa0j) can pass the ball to each other if and only if |i\xe2\x88\x92j|\xe2\x88\x88[li+lj,ri+rj] (here, |x| denotes the absolute value of x).
Nene wants to test the cooperation ability of these players. In order to do this, she will hold several rounds of assessment.
As a coach, Nene wants each of n players to appear in at least one round of assessment. Since Nene has to go on a date after school, Nene wants you to calculate the minimum number of rounds of assessment needed to complete the task.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85105). The description of test cases follows.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85106)ï¿½\xe2\x80\x94 the number of players.
The i-th of the next n lines contains two integers li and ri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the arm interval of the i-th player.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85106.
For each test case, output one integerï¿½\xe2\x80\x94 the minimum number of rounds of assessment Nene needs to complete her work.
In the first two test cases, Nene can host two rounds of assessment: one with p=[1] and one with p=[2]. It can be shown that hosting one round of assessment is not enough, so the answer is 2.
In the third test case, Nene can host two rounds of assessment: one with p=[1,3] and one with p=[2]. Player 1 can pass the ball to player 3 as |3\xe2\x88\x921|=2\xe2\x88\x88[1+1,3+3]. It can be shown that hosting one round of assessment is not enough, so the answer is 2." "3000  x366"
    
1.96E+05 "Nene vs. Monsters (Hard Version)" "brute force, greedy, implementation, math" "This is the hard version of the problem. The only difference between the versions is the constraints on ai. You can make hacks only if both versions of the problem are solved.
Nene is fighting with n monsters, located in a circle. These monsters are numbered from 1 to n, and the i-th (1\xe2\x89\xa4i\xe2\x89\xa4n) monster\'s current energy level is ai.
Since the monsters are too strong, Nene decided to fight with them using the Attack Your Neighbour spell. When Nene uses this spell, the following actions happen in the following order one by one: 
When the monster with energy level x attacks the monster with the energy level y, the energy level of the defending monster becomes max(0,y\xe2\x88\x92x) (the energy level of the attacking monster remains equal to x).
Nene is going to use this spell 10100 times and deal with the monsters that will still have a non-zero energy level herself. She wants you to determine which monsters will have a non-zero energy level once she will use the described spell 10100 times.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of test cases follows.
The first line contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of monsters.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the current energy levels of monsters.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, 
If m=0, you may either output an empty line or don\'t output it.
In the first test case, the following actions happen during the first 3 uses of the spell in this order:
After each of the next uses of the spell, energy levels of monsters do not change. Thus, only the 1-st monster has a non-zero energy level in the end.
In the second test case, both monsters initially have zero energy level." "2700  x888"
    
1.96E+04 "Nene vs. Monsters (Easy Version)" "brute force, implementation, math" "This is the easy version of the problem. The only difference between the versions is the constraints on ai. You can make hacks only if both versions of the problem are solved.
Nene is fighting with n monsters, located in a circle. These monsters are numbered from 1 to n, and the i-th (1\xe2\x89\xa4i\xe2\x89\xa4n) monster\'s current energy level is ai.
Since the monsters are too strong, Nene decided to fight with them using the Attack Your Neighbour spell. When Nene uses this spell, the following actions happen in the following order one by one: 
When the monster with energy level x attacks the monster with the energy level y, the energy level of the defending monster becomes max(0,y\xe2\x88\x92x) (the energy level of the attacking monster remains equal to x).
Nene is going to use this spell 10100 times and deal with the monsters that will still have a non-zero energy level herself. She wants you to determine which monsters will have a non-zero energy level once she will use the described spell 10100 times.
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of test cases follows.
The first line contains a single integer n (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of monsters.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the current energy levels of monsters.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, 
If m=0, you may either output an empty line or don\'t output it.
In the first test case, the following actions happen during the first 3 uses of the spell in this order:
After each of the next uses of the spell, energy levels of monsters do not change. Thus, only the 1-st monster has a non-zero energy level in the end.
In the second test case, both monsters initially have zero energy level." "2500  x1470"
    
1956D "Nene and the Mex Operator" "bitmasks, brute force, constructive algorithms, divide and conquer, dp, greedy, implementation, math" "Nene gave you an array of integers a1,a2,\xe2\x80\xa6,an of length n.
You can perform the following operation no more than 5\xe2\x8b\x85105 times (possibly zero):
Here, MEX of a set of integers {c1,c2,\xe2\x80\xa6,ck} is defined as the smallest non-negative integer m which does not occur in the set c.
Your goal is to maximize the sum of the elements of the array a. Find the maximum sum and construct a sequence of operations that achieves this sum. Note that you don\'t need to minimize the number of operations in this sequence, you only should use no more than 5\xe2\x8b\x85105 operations in your solution.
The first line contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa418)ï¿½\xe2\x80\x94 the length of the array a.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (0\xe2\x89\xa4ai\xe2\x89\xa4107)ï¿½\xe2\x80\x94 the array a.
In the first line, output two integers s and m (0\xe2\x89\xa4m\xe2\x89\xa45\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the maximum sum of elements of the array a and the number of operations in your solution.
In the i-th of the following m lines, output two integers l and r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n), representing the parameters of the i-th operation.
It can be shown that the maximum sum of elements of the array a can always be obtained in no more than 5\xe2\x8b\x85105 operations.
In the first example, after the operation with l=1 and r=2 the array a becomes equal to [2,2]. It can be shown that it is impossible to achieve a larger sum of the elements of a, so the answer is 4.
In the second example, the initial sum of elements is 13 which can be shown to be the largest.
In the third example, the array a changes as follows:
It can be shown that it is impossible to achieve a larger sum of the elements of a, so the answer is 105." "2000  x3943"
    
1956C "Nene's Magical Matrix" "constructive algorithms, greedy, math" "The magical girl Nene has an n\xc3\x97n matrix a filled with zeroes. The j-th element of the i-th row of matrix a is denoted as ai,j.
She can perform operations of the following two types with this matrix:
Nene wants to maximize the sum of all the numbers in the matrix n\xe2\x88\x91i=1n\xe2\x88\x91j=1ai,j. She asks you to find the way to perform the operations so that this sum is maximized. As she doesn\'t want to make too many operations, you should provide a solution with no more than 2n operations.
A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4500). The description of test cases follows.
The only line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4500)ï¿½\xe2\x80\x94 the size of the matrix a.
It is guaranteed that the sum of n2 over all test cases does not exceed 5\xe2\x8b\x85105.
For each test case, in the first line output two integers s and m (0\xe2\x89\xa4m\xe2\x89\xa42n)ï¿½\xe2\x80\x94 the maximum sum of the numbers in the matrix and the number of operations in your solution.
In the k-th of the next m lines output the description of the k-th operation: 
Note that you don\'t need to minimize the number of operations used, you only should use no more than 2n operations. It can be shown that the maximum possible sum can always be obtained in no more than 2n operations.
In the first test case, the maximum sum s=1 can be obtained in 1 operation by setting a1,1:=1.
In the second test case, the maximum sum s=7 can be obtained in 3 operations as follows:
It can be shown that it is impossible to make the sum of the numbers in the matrix larger than 7." "1600  x12957"
    
1956B "Nene and the Card Game" "games, greedy" "You and Nene are playing a card game. The deck with 2n cards is used to play this game. Each card has an integer from 1 to n on it, and each of integers 1 through n appears exactly on 2 cards. Additionally, there is a table where cards are placed during the game (initially, the table is empty).
In the beginning of the game, these 2n cards are distributed between you and Nene so that each player receives n cards. 
After it, you and Nene alternatively take 2n turns, i.e. each person takes n turns, starting with you. On each turn:
Note that turns are made publicly: each player can see all the cards on the table at each moment.
Nene is very smart so she always selects cards optimally in order to maximize her score in the end of the game (after 2n rounds). If she has several optimal moves, she selects the move that minimizes your score in the end of the game.
More formally, Nene always takes turns optimally in order to maximize her score in the end of the game in the first place and to minimize your score in the end of the game in the second place.
Assuming that the cards are already distributed and cards in your hand have integers a1,a2,\xe2\x80\xa6,an written on them, what is the maximum number of points you can get by taking your turns optimally?
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4104). The description of test cases follows.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of cards you and Nene receive in the beginning of the game.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n)ï¿½\xe2\x80\x94 the integers on the cards in your hand. It is guaranteed that each integer from 1 through n appears in the sequence a1,a2,\xe2\x80\xa6,an at most 2 times.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output one integer: the maximum number of points you can get.
In the first test case, the integers written on your cards are 1, 1, 2 and 3. The integers written on Nene\'s cards are 2, 3, 4 and 4. The game may proceed as follows:
At the end of the game, you scored 1 point, and Nene scored 3. It can be shown that you cannot score more than 1 point if Nene plays optimally, so the answer is 1.
In the second test case, if both players play optimally, you score 2 points and Nene scores 6 points." "800  x21289"
    
1956A "Nene's Game" "binary search, brute force, data structures, games, greedy" "Nene invented a new game based on an increasing sequence of integers a1,a2,\xe2\x80\xa6,ak.
In this game, initially n players are lined up in a row. In each of the rounds of this game, the following happens:
Once no one is kicked out of the game in some round, all the players that are still in the game are declared as winners.
For example, consider the game with a=[3,5] and n=5 players. Let the players be named player A, player B, \xe2\x80\xa6, player E in the order they are lined up initially. Then, 
Nene has not yet decided how many people would join the game initially. Nene gave you q integers n1,n2,\xe2\x80\xa6,nq and you should answer the following question for each 1\xe2\x89\xa4i\xe2\x89\xa4q independently:
Each test contains multiple test cases. The first line contains the number of test cases t (1\xe2\x89\xa4t\xe2\x89\xa4250). The description of test cases follows.
The first line case contains two integers k and q (1\xe2\x89\xa4k,q\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the length of the sequence a and the number of values ni you should solve this problem for.
The second line contains k integers a1,a2,\xe2\x80\xa6,ak (1\xe2\x89\xa4a1<a2<\xe2\x80\xa6<ak\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the sequence a.
The third line contains q integers n1,n2,\xe2\x80\xa6,nq (1\xe2\x89\xa4ni\xe2\x89\xa4100).
For each test case, output q integers: the i-th (1\xe2\x89\xa4i\xe2\x89\xa4q) of them should be the number of players declared as winners if initially ni players join the game.
The first test case was explained in the statement.
In the second test case, when n=1, the only player stays in the game in the first round. After that, the game ends and the only player is declared as a winner." "800  x21744"
    
1955H "The Most Reckless Defense" "bitmasks, brute force, constructive algorithms, dp, flows, graph matchings, shortest paths" "You are playing a very popular Tower Defense game called ""Runnerfield 2"". In this game, the player sets up defensive towers that attack enemies moving from a certain starting point to the player\'s base.
You are given a grid of size n\xc3\x97m, on which k towers are already placed and a path is laid out through which enemies will move. The cell at the intersection of the x-th row and the y-th column is denoted as (x,y).
Each second, a tower deals pi units of damage to all enemies within its range. For example, if an enemy is located at cell (x,y) and a tower is at (xi,yi) with a range of r, then the enemy will take damage of pi if (x\xe2\x88\x92xi)2+(y\xe2\x88\x92yi)2\xe2\x89\xa4r2.
Enemies move from cell (1,1) to cell (n,m), visiting each cell of the path exactly once. An enemy instantly moves to an adjacent cell horizontally or vertically, but before doing so, it spends one second in the current cell. If its health becomes zero or less during this second, the enemy can no longer move. The player loses if an enemy reaches cell (n,m) and can make one more move.
By default, all towers have a zero range, but the player can set a tower\'s range to an integer r (r>0), in which case the health of all enemies will increase by 3r. However, each r can only be used for at most one tower.
Suppose an enemy has a base health of h units. If the tower ranges are 2, 4, and 5, then the enemy\'s health at the start of the path will be h+32+34+35=h+9+81+243=h+333. The choice of ranges is made once before the appearance of enemies and cannot be changed after the game starts.
Find the maximum amount of base health h for which it is possible to set the ranges so that the player does not lose when an enemy with health h passes through (without considering the additions for tower ranges).
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4100) \xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, m, and k (2\xe2\x89\xa4n,m\xe2\x89\xa450,1\xe2\x89\xa4k<n\xe2\x8b\x85m) \xe2\x80\x94 the dimensions of the field and the number of towers on it.
The next n lines each contain m characters \xe2\x80\x94 the description of each row of the field, where the character ""."" denotes an empty cell, and the character ""#"" denotes a path cell that the enemies will pass through.
Then follow k lines \xe2\x80\x94 the description of the towers. Each line of description contains three integers xi, yi, and pi (1\xe2\x89\xa4xi\xe2\x89\xa4n,1\xe2\x89\xa4yi\xe2\x89\xa4m,1\xe2\x89\xa4pi\xe2\x89\xa4500) \xe2\x80\x94 the coordinates of the tower and its attack parameter. All coordinates correspond to empty cells on the game field, and all pairs (xi,yi) are pairwise distinct.
It is guaranteed that the sum of n\xe2\x8b\x85m does not exceed 2500 for all test cases.
For each test case, output the maximum amount of base health h on a separate line, for which it is possible to set the ranges so that the player does not lose when an enemy with health h passes through (without considering the additions for tower ranges).
If it is impossible to choose ranges even for an enemy with 1 unit of base health, output ""0"".
In the first example, there is no point in increasing the tower range, as it will not be able to deal enough damage to the monster even with 1 unit of health.
In the second example, the tower has a range of 1, and it deals damage to the monster in cells (1,1) and (2,2).
In the third example, the tower has a range of 2, and it deals damage to the monster in all path cells. If the enemy\'s base health is 1491, then after the addition for the tower range, its health will be 1491+32=1500, which exactly equals the damage the tower will deal to it in three seconds.
In the fourth example, the tower at (1,2) has a range of 1, and the tower at (3,1) has a range of 2." "2300  x1263"
    
1955G "GCD on a grid" "brute force, dfs and similar, dp, implementation, math, number theory" "Not long ago, Egor learned about the Euclidean algorithm for finding the greatest common divisor of two numbers. The greatest common divisor of two numbers a and b is the largest number that divides both a and b without leaving a remainder. With this knowledge, Egor can solve a problem that he once couldn\'t.
Vasily has a grid with n rows and m columns, and the integer aij is located at the intersection of the i-th row and the j-th column. Egor wants to go from the top left corner (at the intersection of the first row and the first column) to the bottom right corner (at the intersection of the last row and the last column) and find the greatest common divisor of all the numbers along the path. He is only allowed to move down and to the right. Egor has written down several paths and obtained different GCD values. He became interested in finding the maximum possible GCD.
Unfortunately, Egor is tired of calculating GCDs, so he asks for your help in finding the maximum GCD of the integers along the path from the top left corner to the bottom right corner of the grid.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and m (1\xe2\x89\xa4n,m\xe2\x89\xa4100)ï¿½\xe2\x80\x94 the number of rows and columns of the grid.
Then, there are n lines, where the i-th line contains m integers (1\xe2\x89\xa4ai,j\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the integers written in the i-th row and the j-th column of the grid.
It is guaranteed that the sum of n\xe2\x8b\x85m does not exceed 2\xe2\x8b\x85105 over all test cases.
For each test case, output the maximum possible GCD along the path from the top left cell to the bottom right cell in a separate line." "1900  x4571"
    
1955F "Unfair Game" "dp, games, greedy, math, schedules" "Alice and Bob gathered in the evening to play an exciting game on a sequence of n integers, each integer of the sequence doesn\'t exceed 4. The rules of the game are too complex to describe, so let\'s just describe the winning condition \xe2\x80\x94 Alice wins if the bitwise XOR of all the numbers in the sequence is non-zero; otherwise, Bob wins.
The guys invited Eve to act as a judge. Initially, Alice and Bob play with n numbers. After one game, Eve removes one of the numbers from the sequence, then Alice and Bob play with n\xe2\x88\x921 numbers. Eve removes one number again, after which Alice and Bob play with n\xe2\x88\x922 numbers. This continues until the sequence of numbers is empty.
Eve seems to think that in such a game, Alice almost always wins, so she wants Bob to win as many times as possible. Determine the maximum number of times Bob can win against Alice if Eve removes the numbers optimally.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first and only line of each test case contains four integers pi (0\xe2\x89\xa4pi\xe2\x89\xa4200)ï¿½\xe2\x80\x94 the number of ones, twos, threes, and fours in the sequence at the beginning of the game.
For each test case, print the maximum number of times Bob will win in a separate line, if Eve removes the numbers optimally.
In the first example, Bob wins when Eve has not removed any numbers yet.
In the second example, Bob wins if Eve removes one one and one three." "1800  x7146"
    
1955E "Long Inversions" "brute force, greedy, implementation, sortings" "A binary string s of length n is given. A binary string is a string consisting only of the characters \'1\' and \'0\'.
You can choose an integer k (1\xe2\x89\xa4k\xe2\x89\xa4n) and then apply the following operation any number of times: choose k consecutive characters of the string and invert them, i.e., replace all \'0\' with \'1\' and vice versa.
Using these operations, you need to make all the characters in the string equal to \'1\'.
For example, if n=5, s=00100, you can choose k=3 and proceed as follows: 
Find the maximum value of k for which it is possible to make all the characters in the string equal to \'1\' using the described operations. Note that the number of operations required to achieve this is not important.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains an integer n (1\xe2\x89\xa4n\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the length of the string s.
The second line of each test case contains a string s of length n, consisting of the characters \'1\' and \'0\'.
It is guaranteed that the sum of the values n2 over all test cases in the test does not exceed 25\xe2\x8b\x85106.
For each test case, output the maximum integer k (1\xe2\x89\xa4k\xe2\x89\xa4n) for which it is possible to obtain a string s consisting only of the characters \'1\' using the described operations." "1700  x8682"
    
1955D "Inaccurate Subsequence Search" "data structures, two pointers" "Maxim has an array a of n integers and an array b of m integers (m\xe2\x89\xa4n).
Maxim considers an array c of length m to be good if the elements of array c can be rearranged in such a way that at least k of them match the elements of array b. 
For example, if b=[1,2,3,4] and k=3, then the arrays [4,1,2,3] and [2,3,4,5] are good (they can be reordered as follows: [1,2,3,4] and [5,2,3,4]), while the arrays [3,4,5,6] and [3,4,3,4] are not good.
Maxim wants to choose every subsegment of array a of length m as the elements of array c. Help Maxim count how many selected arrays will be good.
In other words, find the number of positions 1\xe2\x89\xa4l\xe2\x89\xa4n\xe2\x88\x92m+1 such that the elements al,al+1,\xe2\x80\xa6,al+m\xe2\x88\x921 form a good array.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, m, and k (1\xe2\x89\xa4k\xe2\x89\xa4m\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)ï¿½\xe2\x80\x94 the number of elements in arrays a and b, the required number of matching elements.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the elements of array a. Elements of the array a are not necessarily unique.
The third line of each test case contains m integers b1,b2,\xe2\x80\xa6,bm (1\xe2\x89\xa4bi\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the elements of array b. Elements of the array b are not necessarily unique.
It is guaranteed that the sum of n over all test cases does not exceed 2\xe2\x8b\x85105. Similarly, it is guaranteed that the sum of m over all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the number of good subsegments of array a on a separate line.
In the first example, all subsegments are good.
In the second example, good subsegments start at positions 1, 2, and 3.
In the third example, good subsegments start at positions 1 and 2." "1400  x15532"
    
1955C "Inhabitant of the Deep Sea" "greedy, implementation, math" "n ships set out to explore the depths of the ocean. The ships are numbered from 1 to n and follow each other in ascending order; the i-th ship has a durability of ai.
The Kraken attacked the ships k times in a specific order. First, it attacks the first of the ships, then the last, then the first again, and so on.
Each attack by the Kraken reduces the durability of the ship by 1. When the durability of the ship drops to 0, it sinks and is no longer subjected to attacks (thus the ship ceases to be the first or last, and the Kraken only attacks the ships that have not yet sunk). If all the ships have sunk, the Kraken has nothing to attack and it swims away.
For example, if n=4, k=5, and a=[1,2,4,3], the following will happen:
How many ships were sunk after the Kraken\'s attack?
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains two integers n and k (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105, 1\xe2\x89\xa4k\xe2\x89\xa41015)ï¿½\xe2\x80\x94 the number of ships and how many times the Kraken will attack the ships.
The second line of each test case contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the durability of the ships.
It is guaranteed that the sum of n for all test cases does not exceed 2\xe2\x8b\x85105.
For each test case, output the number of ships sunk by the Kraken on a separate line." "1300  x21351"
    
1955B "Progressive Square" "constructive algorithms, data structures, implementation, sortings" "A progressive square of size n is an n\xc3\x97n matrix. Maxim chooses three integers a1,1, c, and d and constructs a progressive square according to the following rules:
ai+1,j=ai,j+c
ai,j+1=ai,j+d
For example, if n=3, a1,1=1, c=2, and d=3, then the progressive square looks as follows:
(1473695811)
Last month Maxim constructed a progressive square and remembered the values of n, c, and d. Recently, he found an array b of n2 integers in random order and wants to make sure that these elements are the elements of that specific square.
It can be shown that for any values of n, a1,1, c, and d, there exists exactly one progressive square that satisfies all the rules.
The first line contains an integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains three integers n, c, and d (2\xe2\x89\xa4n\xe2\x89\xa4500, 1\xe2\x89\xa4c,d\xe2\x89\xa4106)ï¿½\xe2\x80\x94 the size of the square and the values of c and d as described in the statement.
The second line of each test case contains n\xe2\x8b\x85n integers b1,b2,\xe2\x80\xa6,bn\xe2\x8b\x85n (1\xe2\x89\xa4bi\xe2\x89\xa4109)ï¿½\xe2\x80\x94 the elements found by Maxim.
It is guaranteed that the sum of n2 over all test cases does not exceed 25\xe2\x8b\x85104.
For each test case, output ""YES"" in a separate line if a progressive square for the given n, c, and d can be constructed from the array elements a, otherwise output ""NO"".
You can output each letter in any case (lowercase or uppercase). For example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive answer." "1000  x28051"
    
1955A "Yogurt Sale" math "The price of one yogurt at the ""Vosmiorochka"" store is a burles, but there is a promotion where you can buy two yogurts for b burles.
Maxim needs to buy exactly n yogurts. When buying two yogurts, he can choose to buy them at the regular price or at the promotion price.
What is the minimum amount of burles Maxim should spend to buy n yogurts?
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first and only line of each test case contains three integers n, a, and b (1\xe2\x89\xa4n\xe2\x89\xa4100, 1\xe2\x89\xa4a,b\xe2\x89\xa430)ï¿½\xe2\x80\x94 the number of yogurts Maxim wants to buy, the price for one yogurt, and the price for two yogurts on promotion.
For each test case, print in a separate line the minimum cost of buying n yogurts at ""Vosmiorochka"".
In the third test case of the example, it is more advantageous to buy three yogurts for 15 burles than two for 11 and one for 5.
In the fourth test case of the example, you need to buy four yogurts, each for 5 burles." "800  x43736"
    
1954F "Unique Strings" "combinatorics, dp, math" "Let\'s say that two strings a and b are equal if you can get the string b by cyclically shifting string a. For example, the strings 0100110 and 1100100 are equal, while 1010 and 1100 are not.
You are given a binary string s of length n. Its first c characters are 1-s, and its last n\xe2\x88\x92c characters are 0-s.
In one operation, you can replace one 0 with 1.
Calculate the number of unique strings you can get using no more than k operations. Since the answer may be too large, print it modulo 109+7.
The first and only line contains three integers n, c and k (1\xe2\x89\xa4n\xe2\x89\xa43000; 1\xe2\x89\xa4c\xe2\x89\xa4n; 0\xe2\x89\xa4k\xe2\x89\xa4n\xe2\x88\x92c)ï¿½\xe2\x80\x94 the length of string s, the length of prefix of 1-s and the maximum number of operations.
Print the single integerï¿½\xe2\x80\x94 the number of unique strings you can achieve performing no more than k operations, modulo 109+7.
In the first test case, the only possible string is 1.
In the second test case, the possible strings are: 100, 110, and 111. String 101 is equal to 110, so we don\'t count it.
In the third test case, the possible strings are: 10000, 11000, 10100. String 10010 is equal to 10100, and 10001 is equal to 11000." "3100  x255"
    
1954E "Chain Reaction" "binary search, data structures, dsu, greedy, implementation, math, number theory" "There are n monsters standing in a row. The i-th monster has ai health points.
Every second, you can choose one alive monster and launch a chain lightning at it. The lightning deals k damage to it, and also spreads to the left (towards decreasing i) and to the right (towards increasing i) to alive monsters, dealing k damage to each. When the lightning reaches a dead monster or the beginning/end of the row, it stops. A monster is considered alive if its health points are strictly greater than 0.
For example, consider the following scenario: there are three monsters with health equal to [5,2,7], and k=3. You can kill them all in 4 seconds:
For each k from 1 to max(a1,a2,\xe2\x80\xa6,an), calculate the minimum number of seconds it takes to kill all the monsters.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the number of monsters.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4105)ï¿½\xe2\x80\x94 the health points of the i-th monster.
For each k from 1 to max(a1,a2,\xe2\x80\xa6,an), output the minimum number of seconds it takes to kill all the monsters." "2200  x2310"
    
1954D "Colored Balls" "combinatorics, dp, math, sortings" "There are balls of n different colors; the number of balls of the i-th color is ai.
The balls can be combined into groups. Each group should contain at most 2 balls, and no more than 1 ball of each color.
Consider all 2n sets of colors. For a set of colors, let\'s denote its value as the minimum number of groups the balls of those colors can be distributed into. For example, if there are three colors with 3, 1 and 7 balls respectively, they can be combined into 7 groups (and not less than 7), so the value of that set of colors is 7.
Your task is to calculate the sum of values over all 2n possible sets of colors. Since the answer may be too large, print it modulo 998244353.
The first line contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of colors.
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa45000)ï¿½\xe2\x80\x94 the number of balls of the i-th color.
Additional constraint on input: the total number of balls doesn\'t exceed 5000.
Print a single integerï¿½\xe2\x80\x94 the sum of values of all 2n sets of colors, taken modulo 998244353.
Consider the first example. There are 8 sets of colors:
So, the sum of values over all 2n sets of colors is 11." "1800  x6221"
    
1954C "Long Multiplication" "greedy, math, number theory" "You are given two integers x and y of the same length, consisting of digits from 1 to 9.
You can perform the following operation any number of times (possibly zero): swap the i-th digit in x and the i-th digit in y.
For example, if x=73 and y=31, you can swap the 2-nd digits and get x=71 and y=33.
Your task is to maximize the product of x and y using the aforementioned operation any number of times. If there are multiple answers, print any of them.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa41000)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer x (1\xe2\x89\xa4x<10100).
The second line of each test case contains a single integer y (1\xe2\x89\xa4y<10100).
Additional constraint on input: the integers x and y consist only of digits from 1 to 9.
For each test case, print two linesï¿½\xe2\x80\x94 the first line should contain the number x after performing the operations; similarly, the second line should contain the number y after performing the operations. If there are multiple answers, print any of them." "1200  x19514"
    
1954B "Make It Ugly" "implementation, math" "Let\'s call an array a beautiful if you can make all its elements the same by using the following operation an arbitrary number of times (possibly, zero): 
You are given a beautiful array a1,a2,\xe2\x80\xa6,an. What is the minimum number of elements you have to remove from it in order for it to stop being beautiful? Swapping elements is prohibited. If it is impossible to do so, then output -1.
The first line contains a single integer t (1\xe2\x89\xa4t\xe2\x89\xa4104)ï¿½\xe2\x80\x94 the number of test cases.
The first line of each test case contains a single integer n (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105).
The second line contains n integers a1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n).
Additional constraints on the input:
For each test case, output a single integerï¿½\xe2\x80\x94 the minimum number of elements you have to remove from the array a in order for it to stop being beautiful. If it is impossible, then output -1.
In the first testcase, it is impossible to modify the array in such a way that it stops being beautiful. An array consisting of identical numbers will remain beautiful no matter how many numbers we remove from it.
In the second testcase, you can remove the number at the index 5, for example.
The resulting array will be [1,2,1,2]. Let\'s check if it is beautiful. Two operations are available: 
Thus, the array [1,2,1,2] is not beautiful.
In the fourth testcase, you can remove the first three elements, for example. The resulting array [5,3,3,3] is not beautiful." "1200  x18654"
    
1954A "Painting the Ribbon" "constructive algorithms, greedy, math" "Alice and Bob have bought a ribbon consisting of n parts. Now they want to paint it.
First, Alice will paint every part of the ribbon into one of m colors. For each part, she can choose its color arbitrarily.
Then, Bob will choose at most k parts of the ribbon and repaint them into the same color (he chooses the affected parts and the color arbitrarily).
Bob would like all parts to have the same color. However, Alice thinks that this is too dull, so she wants to paint the ribbon in such a way that Bob cannot make all parts have the same color.
Is it possible to paint the ribbon in such a way?
The first line contains one integer t (1\xe2\x89\xa4t\xe2\x89\xa41000) \xe2\x80\x94 the number of test cases.
Each test case consists of one line containing three integers n, m and k (1\xe2\x89\xa4m,k\xe2\x89\xa4n\xe2\x89\xa450) \xe2\x80\x94 the number of parts, the number of colors and the number of parts Bob can repaint, respectively.
For each test case, print YES if Alice can paint the ribbon so that Bob cannot make all parts have the same color. Otherwise, print NO.
You can print every letter in any register. For example, Yes, yes, yEs will all be recognized as positive answer.
In the first test case, a ribbon consists of 1 part. So all its parts will always have the same color.
In the second test case, there is only 1 color.
In the third test case, Alice can paint the ribbon as follows: [1,2,1,2,1]. It\'s impossible to change the color of at most 1 part so that all parts have the same color.
In the fourth test case, no matter how Alice paints the ribbon, Bob will always be able to repaint 2 parts so that all parts have the same color.
In the fifth test case, Alice can paint the ribbon as follows: [1,2,3,4,5]. It\'s impossible to change the color of at most 3 parts so that all parts have the same color." "900  x24254"
    
1953A "Accuracy-Preserving Summation Algorithm" "*special problem" "In the classic high-performance computing domain (HPC), the vast majority of computations are conducted in double-precision 64-bit floating-point numbers (fp64, double-precision, IEEE-754 binary64). The rise of Deep Neural Networks (DNNs) resulted in hardware (HW) capable of processing 16-bit floating point numbers (fp16, half precision, IEEE-754 binary16) up to 16 times faster in terms of floating-point operations per second (flops) and up to 4 times faster in terms of memory bandwidth (BW). At the same time, the short mantissa and exponent for fp16 numbers lead to a very fast loss of precision of computations, producing wrong computational results without any option to recover them in reduction operations of size greater than approximately 2000. As the typical problem size in HPC is much larger than 2000, this makes fp16 computations almost useless. To surmount this major roadblock, smarter algorithms for reduction operations are needed.
Description. There is a sequence of floating-point numbers stored in IEEE-754 binary64 (double precision, fp64) format xi of length N. The sequence needs to be summed up to S=x1+x2+\xe2\x80\xa6+xN. As professional computer equipment with native support for fp16 is usually unavailable to the general audience, we propose to do operations in a simplified simulated environment, that is, we do computations in fp64 format with mantissa and exponent cut to the range admissible in fp16. In particular, small values that do not fit fp16 admissible range turn into zeros, while excessively large values turn into infinities. 
Objective. Your objective is to sum up as many sequences as possible as fast as possible and as accurately as possible. Please note that you may do summation in fp64 format, but the summation process would be slow though accurate. If you do plain summation in fp16 format, it can be fast, but inaccurate, especially for larger sequences.
The input consists of a single line. It starts with an integer N representing the number of values in the sequence. The following N double precision numbers form the sequence xi, where i=1,\xe2\x80\xa6,N. 
Variable constraints:
Note that the actual binary64 value is not always exactly equal to the given decimal value. Instead, the actual given value is the closest number representable in binary64. When reading the input, most programming languages will do the conversion for you automatically.
It is guaranteed that every number in the sequence either is 0 or has absolute value between 10\xe2\x88\x92300 and 10300, inclusive.
Print a single line which will describe the summation process. The line should contain an encoded algorithm for the summation. We use this encoding to do actual summation and report the result to prevent the need to seek hardware capable of doing fp16 operations natively.
An encoded algorithm consists of the data type to use, followed by a list of values to sum up using this data type. The result of the algorithm is the sum of the given values, as computed in the given data type, from left to right, in the given order. It looks as follows:
As you can see, the whole algorithm is surrounded by curly brackets (""{"" and ""}""). The next character represents one of the three possible data types: 
Then goes a colon ("":""). It is followed by a non-empty list of values to sum up, separated by commas ("",""). Note that there are no spaces.
Each value can be one of the following: 
Some examples: 
Each input value must be used exactly once.
In this problem, there are 2 example tests and 76 main tests. Each main test is scored as follows.
The first part of scoring is related to accuracy. We denote the sum calculated by the solution as Sc. Next, we calculate the expected sum Se as precisely as we can, and store it in binary64 format. Then the accuracy score is calculated as: A=(max(|Sc\xe2\x88\x92Se|max(|Se|,10\xe2\x88\x92200),10\xe2\x88\x9220))0.05.
For example, if the calculated sum is 99.0 and the expected sum is 100.0, the accuracy score is A=(|99\xe2\x88\x92100||100|)0.05=(1100)0.05=0.794328.... If the relative error is 11000, the accuracy score is A=(11000)0.05=0.707945.... If the solution is exact, we get A=(10\xe2\x88\x9220)0.05=0.1.
The second part of scoring is related to the types used for summation. We define the weight W of the algorithm as follows. If the algorithm performs k additions (adding up k+1 values), its weight is: 
The third part of scoring is related to a penalty for memory reads. We list the N numbers appearing in the algorithm from left to right, omitting all curly brackets. We divide the numbers into consecutive blocks of 16 elements; the last block may contain less than 16 elements. In each block, its first element i initiates a memory read. For every other element j of the block, if |j\xe2\x88\x92i|>15, it is too far from the memory which was read for this block, and you get a penalty. The penalties increase gradually: the x-th penalty you get will be x/20000. The penalty counter x is global, it persists across different blocks. All the penalties add up to the total penalty P.
For example, consider the following algorithm: {s:1,2,3,4,5,6,7,8,9,10,{d:20,19,18,17,16},11,12,13,14,15}. It performs 15 additions in single precision, and one of its elements is also an algorithm which performs 4 additions in double precision. Thus its weight is W=15\xe2\x8b\x852+4\xe2\x8b\x854=46. The first memory read block is 1,2,3,4,5,6,7,8,9,10,20,19,18,17,16,11, the initial read is at position 1, and the positions in the block that are more than 15 units away are 20, 19, 18, and 17, so we get 4 penalties. The second memory read block is 12,13,14,15, the initial read is at position 12, and there are no penalties. The total penalty is P=(1+2+3+4)/20000=0.0005.
Putting the second and third part together, we calculate the average cost for a single operation as: C=W+PN\xe2\x88\x921. Then the data score is calculated as: D=10.0\xe2\x88\x9aC+0.5. Lastly, taking the accuracy score into account, the score for the test is: Score=DA. All individual test scores for main tests sum up together to produce the final score. Examples are checked, but do not contribute to the score.
Two sets of tests are prepared in this problem: preliminary tests and final tests. For the duration of the competition, each submission is tested on the preliminary set of tests. When the competition is finished, for each contestant:
The two sets of tests are designed to be similar, but not identical." "  1952J"
